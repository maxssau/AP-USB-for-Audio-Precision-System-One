
com_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08007608  08007608  00017608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800766c  0800766c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800766c  0800766c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800766c  0800766c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08007674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015cc  2000017c  080077f0  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20001748  080077f0  00021748  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a09  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a17  00000000  00000000  00030bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b28  00000000  00000000  000335c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e0  00000000  00000000  000340f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001963c  00000000  00000000  00034ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c1ed  00000000  00000000  0004e10c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084eb6  00000000  00000000  0005a2f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df1af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b2c  00000000  00000000  000df22c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080075f0 	.word	0x080075f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080075f0 	.word	0x080075f0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fe1a 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 fafe 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fbd8 	bl	800090c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f006 fd42 	bl	8006be4 <MX_USB_DEVICE_Init>
   */

  while (1)
  {
    /* USER CODE END WHILE */
	  if(rx_ready)
 8000160:	4bba      	ldr	r3, [pc, #744]	; (800044c <main+0x300>)
 8000162:	781b      	ldrb	r3, [r3, #0]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d0fb      	beq.n	8000160 <main+0x14>
	  {
		  rx_ready=0;
 8000168:	4bb8      	ldr	r3, [pc, #736]	; (800044c <main+0x300>)
 800016a:	2200      	movs	r2, #0
 800016c:	701a      	strb	r2, [r3, #0]
		  if(__debug_111_)
		  {
			  //printf("RX Actions\n");
		  };
		  if(rx_data_len>0 && rx_data_len<512)
 800016e:	4bb8      	ldr	r3, [pc, #736]	; (8000450 <main+0x304>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	2b00      	cmp	r3, #0
 8000174:	d0f4      	beq.n	8000160 <main+0x14>
 8000176:	4bb6      	ldr	r3, [pc, #728]	; (8000450 <main+0x304>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800017e:	d2ef      	bcs.n	8000160 <main+0x14>
		  {
			  //CDC_Transmit_FS(rx_buff,rx_data_len);
			  // command receive

			  // check signature
			  if(rx_data_len>=4)
 8000180:	4bb3      	ldr	r3, [pc, #716]	; (8000450 <main+0x304>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	2b03      	cmp	r3, #3
 8000186:	d9eb      	bls.n	8000160 <main+0x14>
			  {
				  if(rx_buff[0]=='a')
 8000188:	4bb2      	ldr	r3, [pc, #712]	; (8000454 <main+0x308>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b61      	cmp	r3, #97	; 0x61
 800018e:	d118      	bne.n	80001c2 <main+0x76>
				  {
					  if(rx_buff[1]=='p')
 8000190:	4bb0      	ldr	r3, [pc, #704]	; (8000454 <main+0x308>)
 8000192:	785b      	ldrb	r3, [r3, #1]
 8000194:	2b70      	cmp	r3, #112	; 0x70
 8000196:	d114      	bne.n	80001c2 <main+0x76>
					  {
						  if(rx_buff[2]=='i')
 8000198:	4bae      	ldr	r3, [pc, #696]	; (8000454 <main+0x308>)
 800019a:	789b      	ldrb	r3, [r3, #2]
 800019c:	2b69      	cmp	r3, #105	; 0x69
 800019e:	d110      	bne.n	80001c2 <main+0x76>
						  {
							  if(rx_buff[3]=='b')
 80001a0:	4bac      	ldr	r3, [pc, #688]	; (8000454 <main+0x308>)
 80001a2:	78db      	ldrb	r3, [r3, #3]
 80001a4:	2b62      	cmp	r3, #98	; 0x62
 80001a6:	d10c      	bne.n	80001c2 <main+0x76>
							  {
								  // send id message
								  tx_buff[0]='u';
 80001a8:	4bab      	ldr	r3, [pc, #684]	; (8000458 <main+0x30c>)
 80001aa:	2275      	movs	r2, #117	; 0x75
 80001ac:	701a      	strb	r2, [r3, #0]
								  tx_buff[1]='s';
 80001ae:	4baa      	ldr	r3, [pc, #680]	; (8000458 <main+0x30c>)
 80001b0:	2273      	movs	r2, #115	; 0x73
 80001b2:	705a      	strb	r2, [r3, #1]
								  tx_buff[2]='b';
 80001b4:	4ba8      	ldr	r3, [pc, #672]	; (8000458 <main+0x30c>)
 80001b6:	2262      	movs	r2, #98	; 0x62
 80001b8:	709a      	strb	r2, [r3, #2]
								  CDC_Transmit_FS(tx_buff,3);
 80001ba:	2103      	movs	r1, #3
 80001bc:	48a6      	ldr	r0, [pc, #664]	; (8000458 <main+0x30c>)
 80001be:	f006 fdf7 	bl	8006db0 <CDC_Transmit_FS>
							  }
						  }
					  }
				  }

				  HAL_GPIO_WritePin(AP_APIB_STAT_APIB_ACTIVE_PORT, AP_APIB_STAT_APIB_ACTIVE_PIN,1);
 80001c2:	2201      	movs	r2, #1
 80001c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001c8:	48a4      	ldr	r0, [pc, #656]	; (800045c <main+0x310>)
 80001ca:	f001 f8be 	bl	800134a <HAL_GPIO_WritePin>

				  //check signature
				  if(rx_buff[0]=='<')
 80001ce:	4ba1      	ldr	r3, [pc, #644]	; (8000454 <main+0x308>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b3c      	cmp	r3, #60	; 0x3c
 80001d4:	f040 81a4 	bne.w	8000520 <main+0x3d4>
				  {
					  if(rx_buff[1]=='w')
 80001d8:	4b9e      	ldr	r3, [pc, #632]	; (8000454 <main+0x308>)
 80001da:	785b      	ldrb	r3, [r3, #1]
 80001dc:	2b77      	cmp	r3, #119	; 0x77
 80001de:	f040 819f 	bne.w	8000520 <main+0x3d4>
					  {
						  if(rx_buff[2]=='>')
 80001e2:	4b9c      	ldr	r3, [pc, #624]	; (8000454 <main+0x308>)
 80001e4:	789b      	ldrb	r3, [r3, #2]
 80001e6:	2b3e      	cmp	r3, #62	; 0x3e
 80001e8:	f040 819a 	bne.w	8000520 <main+0x3d4>
						  {
							  switch(rx_buff[3])
 80001ec:	4b99      	ldr	r3, [pc, #612]	; (8000454 <main+0x308>)
 80001ee:	78db      	ldrb	r3, [r3, #3]
 80001f0:	3b30      	subs	r3, #48	; 0x30
 80001f2:	2b31      	cmp	r3, #49	; 0x31
 80001f4:	f200 8194 	bhi.w	8000520 <main+0x3d4>
 80001f8:	a201      	add	r2, pc, #4	; (adr r2, 8000200 <main+0xb4>)
 80001fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001fe:	bf00      	nop
 8000200:	080002c9 	.word	0x080002c9
 8000204:	080002f1 	.word	0x080002f1
 8000208:	0800032b 	.word	0x0800032b
 800020c:	08000375 	.word	0x08000375
 8000210:	080003cf 	.word	0x080003cf
 8000214:	08000403 	.word	0x08000403
 8000218:	08000461 	.word	0x08000461
 800021c:	080004c1 	.word	0x080004c1
 8000220:	080004e7 	.word	0x080004e7
 8000224:	08000521 	.word	0x08000521
 8000228:	08000521 	.word	0x08000521
 800022c:	08000521 	.word	0x08000521
 8000230:	08000521 	.word	0x08000521
 8000234:	08000521 	.word	0x08000521
 8000238:	08000521 	.word	0x08000521
 800023c:	08000521 	.word	0x08000521
 8000240:	08000521 	.word	0x08000521
 8000244:	08000521 	.word	0x08000521
 8000248:	08000521 	.word	0x08000521
 800024c:	08000521 	.word	0x08000521
 8000250:	08000521 	.word	0x08000521
 8000254:	08000521 	.word	0x08000521
 8000258:	08000521 	.word	0x08000521
 800025c:	08000521 	.word	0x08000521
 8000260:	08000521 	.word	0x08000521
 8000264:	08000521 	.word	0x08000521
 8000268:	08000521 	.word	0x08000521
 800026c:	08000521 	.word	0x08000521
 8000270:	08000521 	.word	0x08000521
 8000274:	08000521 	.word	0x08000521
 8000278:	08000521 	.word	0x08000521
 800027c:	08000521 	.word	0x08000521
 8000280:	08000521 	.word	0x08000521
 8000284:	08000521 	.word	0x08000521
 8000288:	08000521 	.word	0x08000521
 800028c:	08000521 	.word	0x08000521
 8000290:	08000521 	.word	0x08000521
 8000294:	08000521 	.word	0x08000521
 8000298:	08000521 	.word	0x08000521
 800029c:	08000521 	.word	0x08000521
 80002a0:	08000521 	.word	0x08000521
 80002a4:	08000521 	.word	0x08000521
 80002a8:	08000521 	.word	0x08000521
 80002ac:	08000521 	.word	0x08000521
 80002b0:	08000521 	.word	0x08000521
 80002b4:	08000521 	.word	0x08000521
 80002b8:	08000521 	.word	0x08000521
 80002bc:	08000521 	.word	0x08000521
 80002c0:	08000521 	.word	0x08000521
 80002c4:	08000521 	.word	0x08000521
							  {
								  case '0':
								  {
									  // check ATT
									  tx_buff[0]='<';
 80002c8:	4b63      	ldr	r3, [pc, #396]	; (8000458 <main+0x30c>)
 80002ca:	223c      	movs	r2, #60	; 0x3c
 80002cc:	701a      	strb	r2, [r3, #0]
									  tx_buff[1]='r';
 80002ce:	4b62      	ldr	r3, [pc, #392]	; (8000458 <main+0x30c>)
 80002d0:	2272      	movs	r2, #114	; 0x72
 80002d2:	705a      	strb	r2, [r3, #1]
									  tx_buff[2]='>';
 80002d4:	4b60      	ldr	r3, [pc, #384]	; (8000458 <main+0x30c>)
 80002d6:	223e      	movs	r2, #62	; 0x3e
 80002d8:	709a      	strb	r2, [r3, #2]
									  tx_buff[3]='0';
 80002da:	4b5f      	ldr	r3, [pc, #380]	; (8000458 <main+0x30c>)
 80002dc:	2230      	movs	r2, #48	; 0x30
 80002de:	70da      	strb	r2, [r3, #3]
									  if(AP_APIB_CheckATT)
									  {
										  tx_buff[4]=1;
 80002e0:	4b5d      	ldr	r3, [pc, #372]	; (8000458 <main+0x30c>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	711a      	strb	r2, [r3, #4]
									  }
									  else
									  {
										  tx_buff[4]=0;
									  }
									  CDC_Transmit_FS(tx_buff,8);
 80002e6:	2108      	movs	r1, #8
 80002e8:	485b      	ldr	r0, [pc, #364]	; (8000458 <main+0x30c>)
 80002ea:	f006 fd61 	bl	8006db0 <CDC_Transmit_FS>
								  }break;
 80002ee:	e117      	b.n	8000520 <main+0x3d4>

								  case '1':
								  {
									  // write byte
									  AP_APIB_WriteByte(rx_buff[4],rx_buff[5]);
 80002f0:	4b58      	ldr	r3, [pc, #352]	; (8000454 <main+0x308>)
 80002f2:	791a      	ldrb	r2, [r3, #4]
 80002f4:	4b57      	ldr	r3, [pc, #348]	; (8000454 <main+0x308>)
 80002f6:	795b      	ldrb	r3, [r3, #5]
 80002f8:	4619      	mov	r1, r3
 80002fa:	4610      	mov	r0, r2
 80002fc:	f000 f9e8 	bl	80006d0 <AP_APIB_WriteByte>
									  tx_buff[0]='<';
 8000300:	4b55      	ldr	r3, [pc, #340]	; (8000458 <main+0x30c>)
 8000302:	223c      	movs	r2, #60	; 0x3c
 8000304:	701a      	strb	r2, [r3, #0]
									  tx_buff[1]='r';
 8000306:	4b54      	ldr	r3, [pc, #336]	; (8000458 <main+0x30c>)
 8000308:	2272      	movs	r2, #114	; 0x72
 800030a:	705a      	strb	r2, [r3, #1]
									  tx_buff[2]='>';
 800030c:	4b52      	ldr	r3, [pc, #328]	; (8000458 <main+0x30c>)
 800030e:	223e      	movs	r2, #62	; 0x3e
 8000310:	709a      	strb	r2, [r3, #2]
									  tx_buff[3]='1';
 8000312:	4b51      	ldr	r3, [pc, #324]	; (8000458 <main+0x30c>)
 8000314:	2231      	movs	r2, #49	; 0x31
 8000316:	70da      	strb	r2, [r3, #3]
									  tx_buff[4]=rx_buff[5];
 8000318:	4b4e      	ldr	r3, [pc, #312]	; (8000454 <main+0x308>)
 800031a:	795a      	ldrb	r2, [r3, #5]
 800031c:	4b4e      	ldr	r3, [pc, #312]	; (8000458 <main+0x30c>)
 800031e:	711a      	strb	r2, [r3, #4]
									  CDC_Transmit_FS(tx_buff,8);
 8000320:	2108      	movs	r1, #8
 8000322:	484d      	ldr	r0, [pc, #308]	; (8000458 <main+0x30c>)
 8000324:	f006 fd44 	bl	8006db0 <CDC_Transmit_FS>

								  }break;
 8000328:	e0fa      	b.n	8000520 <main+0x3d4>

								  case '2':
								  {
									  //write word
									  AP_APIB_WriteByte(rx_buff[4],rx_buff[5]);
 800032a:	4b4a      	ldr	r3, [pc, #296]	; (8000454 <main+0x308>)
 800032c:	791a      	ldrb	r2, [r3, #4]
 800032e:	4b49      	ldr	r3, [pc, #292]	; (8000454 <main+0x308>)
 8000330:	795b      	ldrb	r3, [r3, #5]
 8000332:	4619      	mov	r1, r3
 8000334:	4610      	mov	r0, r2
 8000336:	f000 f9cb 	bl	80006d0 <AP_APIB_WriteByte>
									  AP_APIB_WriteByte(rx_buff[4],rx_buff[6]);
 800033a:	4b46      	ldr	r3, [pc, #280]	; (8000454 <main+0x308>)
 800033c:	791a      	ldrb	r2, [r3, #4]
 800033e:	4b45      	ldr	r3, [pc, #276]	; (8000454 <main+0x308>)
 8000340:	799b      	ldrb	r3, [r3, #6]
 8000342:	4619      	mov	r1, r3
 8000344:	4610      	mov	r0, r2
 8000346:	f000 f9c3 	bl	80006d0 <AP_APIB_WriteByte>
									  tx_buff[0]='<';
 800034a:	4b43      	ldr	r3, [pc, #268]	; (8000458 <main+0x30c>)
 800034c:	223c      	movs	r2, #60	; 0x3c
 800034e:	701a      	strb	r2, [r3, #0]
									  tx_buff[1]='r';
 8000350:	4b41      	ldr	r3, [pc, #260]	; (8000458 <main+0x30c>)
 8000352:	2272      	movs	r2, #114	; 0x72
 8000354:	705a      	strb	r2, [r3, #1]
									  tx_buff[2]='>';
 8000356:	4b40      	ldr	r3, [pc, #256]	; (8000458 <main+0x30c>)
 8000358:	223e      	movs	r2, #62	; 0x3e
 800035a:	709a      	strb	r2, [r3, #2]
									  tx_buff[3]='2';
 800035c:	4b3e      	ldr	r3, [pc, #248]	; (8000458 <main+0x30c>)
 800035e:	2232      	movs	r2, #50	; 0x32
 8000360:	70da      	strb	r2, [r3, #3]
									  tx_buff[4]=rx_buff[6];
 8000362:	4b3c      	ldr	r3, [pc, #240]	; (8000454 <main+0x308>)
 8000364:	799a      	ldrb	r2, [r3, #6]
 8000366:	4b3c      	ldr	r3, [pc, #240]	; (8000458 <main+0x30c>)
 8000368:	711a      	strb	r2, [r3, #4]
									  CDC_Transmit_FS(tx_buff,8);
 800036a:	2108      	movs	r1, #8
 800036c:	483a      	ldr	r0, [pc, #232]	; (8000458 <main+0x30c>)
 800036e:	f006 fd1f 	bl	8006db0 <CDC_Transmit_FS>
								  }break;
 8000372:	e0d5      	b.n	8000520 <main+0x3d4>

								  case '3':
								  {
									  // write tripple
									  AP_APIB_WriteByte(rx_buff[4],rx_buff[5]);
 8000374:	4b37      	ldr	r3, [pc, #220]	; (8000454 <main+0x308>)
 8000376:	791a      	ldrb	r2, [r3, #4]
 8000378:	4b36      	ldr	r3, [pc, #216]	; (8000454 <main+0x308>)
 800037a:	795b      	ldrb	r3, [r3, #5]
 800037c:	4619      	mov	r1, r3
 800037e:	4610      	mov	r0, r2
 8000380:	f000 f9a6 	bl	80006d0 <AP_APIB_WriteByte>
									  AP_APIB_WriteByte(rx_buff[4],rx_buff[6]);
 8000384:	4b33      	ldr	r3, [pc, #204]	; (8000454 <main+0x308>)
 8000386:	791a      	ldrb	r2, [r3, #4]
 8000388:	4b32      	ldr	r3, [pc, #200]	; (8000454 <main+0x308>)
 800038a:	799b      	ldrb	r3, [r3, #6]
 800038c:	4619      	mov	r1, r3
 800038e:	4610      	mov	r0, r2
 8000390:	f000 f99e 	bl	80006d0 <AP_APIB_WriteByte>
									  AP_APIB_WriteByte(rx_buff[4],rx_buff[7]);
 8000394:	4b2f      	ldr	r3, [pc, #188]	; (8000454 <main+0x308>)
 8000396:	791a      	ldrb	r2, [r3, #4]
 8000398:	4b2e      	ldr	r3, [pc, #184]	; (8000454 <main+0x308>)
 800039a:	79db      	ldrb	r3, [r3, #7]
 800039c:	4619      	mov	r1, r3
 800039e:	4610      	mov	r0, r2
 80003a0:	f000 f996 	bl	80006d0 <AP_APIB_WriteByte>
									  tx_buff[0]='<';
 80003a4:	4b2c      	ldr	r3, [pc, #176]	; (8000458 <main+0x30c>)
 80003a6:	223c      	movs	r2, #60	; 0x3c
 80003a8:	701a      	strb	r2, [r3, #0]
									  tx_buff[1]='r';
 80003aa:	4b2b      	ldr	r3, [pc, #172]	; (8000458 <main+0x30c>)
 80003ac:	2272      	movs	r2, #114	; 0x72
 80003ae:	705a      	strb	r2, [r3, #1]
									  tx_buff[2]='>';
 80003b0:	4b29      	ldr	r3, [pc, #164]	; (8000458 <main+0x30c>)
 80003b2:	223e      	movs	r2, #62	; 0x3e
 80003b4:	709a      	strb	r2, [r3, #2]
									  tx_buff[3]='3';
 80003b6:	4b28      	ldr	r3, [pc, #160]	; (8000458 <main+0x30c>)
 80003b8:	2233      	movs	r2, #51	; 0x33
 80003ba:	70da      	strb	r2, [r3, #3]
									  tx_buff[4]=rx_buff[7];
 80003bc:	4b25      	ldr	r3, [pc, #148]	; (8000454 <main+0x308>)
 80003be:	79da      	ldrb	r2, [r3, #7]
 80003c0:	4b25      	ldr	r3, [pc, #148]	; (8000458 <main+0x30c>)
 80003c2:	711a      	strb	r2, [r3, #4]
									  CDC_Transmit_FS(tx_buff,8);
 80003c4:	2108      	movs	r1, #8
 80003c6:	4824      	ldr	r0, [pc, #144]	; (8000458 <main+0x30c>)
 80003c8:	f006 fcf2 	bl	8006db0 <CDC_Transmit_FS>
								  }break;
 80003cc:	e0a8      	b.n	8000520 <main+0x3d4>

								  case '4':
								  {
									  //read byte
									  tx_buff[0]='<';
 80003ce:	4b22      	ldr	r3, [pc, #136]	; (8000458 <main+0x30c>)
 80003d0:	223c      	movs	r2, #60	; 0x3c
 80003d2:	701a      	strb	r2, [r3, #0]
									  tx_buff[1]='r';
 80003d4:	4b20      	ldr	r3, [pc, #128]	; (8000458 <main+0x30c>)
 80003d6:	2272      	movs	r2, #114	; 0x72
 80003d8:	705a      	strb	r2, [r3, #1]
									  tx_buff[2]='>';
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <main+0x30c>)
 80003dc:	223e      	movs	r2, #62	; 0x3e
 80003de:	709a      	strb	r2, [r3, #2]
									  tx_buff[3]='4';
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <main+0x30c>)
 80003e2:	2234      	movs	r2, #52	; 0x34
 80003e4:	70da      	strb	r2, [r3, #3]
									  tx_buff[4]=AP_APIB_ReadByte(rx_buff[4]);
 80003e6:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <main+0x308>)
 80003e8:	791b      	ldrb	r3, [r3, #4]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f99c 	bl	8000728 <AP_APIB_ReadByte>
 80003f0:	4603      	mov	r3, r0
 80003f2:	461a      	mov	r2, r3
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <main+0x30c>)
 80003f6:	711a      	strb	r2, [r3, #4]
									  CDC_Transmit_FS(tx_buff,8);
 80003f8:	2108      	movs	r1, #8
 80003fa:	4817      	ldr	r0, [pc, #92]	; (8000458 <main+0x30c>)
 80003fc:	f006 fcd8 	bl	8006db0 <CDC_Transmit_FS>
								  }break;
 8000400:	e08e      	b.n	8000520 <main+0x3d4>
								  case '5':
								  {
									  //read word
									  tx_buff[0]='<';
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <main+0x30c>)
 8000404:	223c      	movs	r2, #60	; 0x3c
 8000406:	701a      	strb	r2, [r3, #0]
									  tx_buff[1]='r';
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <main+0x30c>)
 800040a:	2272      	movs	r2, #114	; 0x72
 800040c:	705a      	strb	r2, [r3, #1]
									  tx_buff[2]='>';
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <main+0x30c>)
 8000410:	223e      	movs	r2, #62	; 0x3e
 8000412:	709a      	strb	r2, [r3, #2]
									  tx_buff[3]='5';
 8000414:	4b10      	ldr	r3, [pc, #64]	; (8000458 <main+0x30c>)
 8000416:	2235      	movs	r2, #53	; 0x35
 8000418:	70da      	strb	r2, [r3, #3]
									  tx_buff[4]=AP_APIB_ReadByte(rx_buff[4]);
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <main+0x308>)
 800041c:	791b      	ldrb	r3, [r3, #4]
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f982 	bl	8000728 <AP_APIB_ReadByte>
 8000424:	4603      	mov	r3, r0
 8000426:	461a      	mov	r2, r3
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <main+0x30c>)
 800042a:	711a      	strb	r2, [r3, #4]
									  tx_buff[5]=AP_APIB_ReadByte(rx_buff[4]+1);
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <main+0x308>)
 800042e:	791b      	ldrb	r3, [r3, #4]
 8000430:	3301      	adds	r3, #1
 8000432:	b2db      	uxtb	r3, r3
 8000434:	4618      	mov	r0, r3
 8000436:	f000 f977 	bl	8000728 <AP_APIB_ReadByte>
 800043a:	4603      	mov	r3, r0
 800043c:	461a      	mov	r2, r3
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <main+0x30c>)
 8000440:	715a      	strb	r2, [r3, #5]
									  CDC_Transmit_FS(tx_buff,8);
 8000442:	2108      	movs	r1, #8
 8000444:	4804      	ldr	r0, [pc, #16]	; (8000458 <main+0x30c>)
 8000446:	f006 fcb3 	bl	8006db0 <CDC_Transmit_FS>

								  }break;
 800044a:	e069      	b.n	8000520 <main+0x3d4>
 800044c:	20000198 	.word	0x20000198
 8000450:	2000019c 	.word	0x2000019c
 8000454:	200003c4 	.word	0x200003c4
 8000458:	200005c4 	.word	0x200005c4
 800045c:	40011000 	.word	0x40011000
								  case '6':
								  {
									  //read tripple

									  tx_buff[0]='<';
 8000460:	4b33      	ldr	r3, [pc, #204]	; (8000530 <main+0x3e4>)
 8000462:	223c      	movs	r2, #60	; 0x3c
 8000464:	701a      	strb	r2, [r3, #0]
									  tx_buff[1]='r';
 8000466:	4b32      	ldr	r3, [pc, #200]	; (8000530 <main+0x3e4>)
 8000468:	2272      	movs	r2, #114	; 0x72
 800046a:	705a      	strb	r2, [r3, #1]
									  tx_buff[2]='>';
 800046c:	4b30      	ldr	r3, [pc, #192]	; (8000530 <main+0x3e4>)
 800046e:	223e      	movs	r2, #62	; 0x3e
 8000470:	709a      	strb	r2, [r3, #2]
									  tx_buff[3]='6';
 8000472:	4b2f      	ldr	r3, [pc, #188]	; (8000530 <main+0x3e4>)
 8000474:	2236      	movs	r2, #54	; 0x36
 8000476:	70da      	strb	r2, [r3, #3]
									  tx_buff[4]=AP_APIB_ReadByte(rx_buff[4]);
 8000478:	4b2e      	ldr	r3, [pc, #184]	; (8000534 <main+0x3e8>)
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	4618      	mov	r0, r3
 800047e:	f000 f953 	bl	8000728 <AP_APIB_ReadByte>
 8000482:	4603      	mov	r3, r0
 8000484:	461a      	mov	r2, r3
 8000486:	4b2a      	ldr	r3, [pc, #168]	; (8000530 <main+0x3e4>)
 8000488:	711a      	strb	r2, [r3, #4]
									  tx_buff[5]=AP_APIB_ReadByte(rx_buff[4]+1);
 800048a:	4b2a      	ldr	r3, [pc, #168]	; (8000534 <main+0x3e8>)
 800048c:	791b      	ldrb	r3, [r3, #4]
 800048e:	3301      	adds	r3, #1
 8000490:	b2db      	uxtb	r3, r3
 8000492:	4618      	mov	r0, r3
 8000494:	f000 f948 	bl	8000728 <AP_APIB_ReadByte>
 8000498:	4603      	mov	r3, r0
 800049a:	461a      	mov	r2, r3
 800049c:	4b24      	ldr	r3, [pc, #144]	; (8000530 <main+0x3e4>)
 800049e:	715a      	strb	r2, [r3, #5]
									  tx_buff[6]=AP_APIB_ReadByte(rx_buff[4]+2);
 80004a0:	4b24      	ldr	r3, [pc, #144]	; (8000534 <main+0x3e8>)
 80004a2:	791b      	ldrb	r3, [r3, #4]
 80004a4:	3302      	adds	r3, #2
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 f93d 	bl	8000728 <AP_APIB_ReadByte>
 80004ae:	4603      	mov	r3, r0
 80004b0:	461a      	mov	r2, r3
 80004b2:	4b1f      	ldr	r3, [pc, #124]	; (8000530 <main+0x3e4>)
 80004b4:	719a      	strb	r2, [r3, #6]
									  CDC_Transmit_FS(tx_buff,8);
 80004b6:	2108      	movs	r1, #8
 80004b8:	481d      	ldr	r0, [pc, #116]	; (8000530 <main+0x3e4>)
 80004ba:	f006 fc79 	bl	8006db0 <CDC_Transmit_FS>
								  }break;
 80004be:	e02f      	b.n	8000520 <main+0x3d4>
								  case '7':
								  {
									  //Ap reset
									  AP_APIB_Reset_AP();
 80004c0:	f000 fbb6 	bl	8000c30 <AP_APIB_Reset_AP>
									  tx_buff[0]='<';
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <main+0x3e4>)
 80004c6:	223c      	movs	r2, #60	; 0x3c
 80004c8:	701a      	strb	r2, [r3, #0]
									  tx_buff[1]='r';
 80004ca:	4b19      	ldr	r3, [pc, #100]	; (8000530 <main+0x3e4>)
 80004cc:	2272      	movs	r2, #114	; 0x72
 80004ce:	705a      	strb	r2, [r3, #1]
									  tx_buff[2]='>';
 80004d0:	4b17      	ldr	r3, [pc, #92]	; (8000530 <main+0x3e4>)
 80004d2:	223e      	movs	r2, #62	; 0x3e
 80004d4:	709a      	strb	r2, [r3, #2]
									  tx_buff[3]='7';
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <main+0x3e4>)
 80004d8:	2237      	movs	r2, #55	; 0x37
 80004da:	70da      	strb	r2, [r3, #3]
									  CDC_Transmit_FS(tx_buff,8);
 80004dc:	2108      	movs	r1, #8
 80004de:	4814      	ldr	r0, [pc, #80]	; (8000530 <main+0x3e4>)
 80004e0:	f006 fc66 	bl	8006db0 <CDC_Transmit_FS>
								  }break;
 80004e4:	e01c      	b.n	8000520 <main+0x3d4>
								  case '8':
								  {
									  // check ATT
									 tx_buff[0]='<';
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <main+0x3e4>)
 80004e8:	223c      	movs	r2, #60	; 0x3c
 80004ea:	701a      	strb	r2, [r3, #0]
									 tx_buff[1]='r';
 80004ec:	4b10      	ldr	r3, [pc, #64]	; (8000530 <main+0x3e4>)
 80004ee:	2272      	movs	r2, #114	; 0x72
 80004f0:	705a      	strb	r2, [r3, #1]
									 tx_buff[2]='>';
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <main+0x3e4>)
 80004f4:	223e      	movs	r2, #62	; 0x3e
 80004f6:	709a      	strb	r2, [r3, #2]
									 tx_buff[3]='8';
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <main+0x3e4>)
 80004fa:	2238      	movs	r2, #56	; 0x38
 80004fc:	70da      	strb	r2, [r3, #3]
									 if(AP_APIB_Read_IRQ())
 80004fe:	f000 fb87 	bl	8000c10 <AP_APIB_Read_IRQ>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d003      	beq.n	8000510 <main+0x3c4>
									 {
									 	  tx_buff[4]=1;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <main+0x3e4>)
 800050a:	2201      	movs	r2, #1
 800050c:	711a      	strb	r2, [r3, #4]
 800050e:	e002      	b.n	8000516 <main+0x3ca>
									 }
									 else
									 {
										 tx_buff[4]=0;
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <main+0x3e4>)
 8000512:	2200      	movs	r2, #0
 8000514:	711a      	strb	r2, [r3, #4]
									 }
									 CDC_Transmit_FS(tx_buff,8);
 8000516:	2108      	movs	r1, #8
 8000518:	4805      	ldr	r0, [pc, #20]	; (8000530 <main+0x3e4>)
 800051a:	f006 fc49 	bl	8006db0 <CDC_Transmit_FS>
								  }break;
 800051e:	bf00      	nop

						  	  }
						  }
					  }
				  }
				  HAL_GPIO_WritePin(AP_APIB_STAT_APIB_ACTIVE_PORT, AP_APIB_STAT_APIB_ACTIVE_PIN,0);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <main+0x3ec>)
 8000528:	f000 ff0f 	bl	800134a <HAL_GPIO_WritePin>
	  if(rx_ready)
 800052c:	e618      	b.n	8000160 <main+0x14>
 800052e:	bf00      	nop
 8000530:	200005c4 	.word	0x200005c4
 8000534:	200003c4 	.word	0x200003c4
 8000538:	40011000 	.word	0x40011000

0800053c <AP_APIB_GetDataFromHWPin>:
	  }
  }
}

char AP_APIB_GetDataFromHWPin()
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	char result=0;
 8000542:	2300      	movs	r3, #0
 8000544:	71fb      	strb	r3, [r7, #7]
	//AP_APIB_DATA_PORT_INPUT();
	result=result+HAL_GPIO_ReadPin(AP_APIB_DATA0_PORT, AP_APIB_DATA0_PIN);
 8000546:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054a:	482d      	ldr	r0, [pc, #180]	; (8000600 <AP_APIB_GetDataFromHWPin+0xc4>)
 800054c:	f000 fee6 	bl	800131c <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	461a      	mov	r2, r3
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4413      	add	r3, r2
 8000558:	71fb      	strb	r3, [r7, #7]
	result=result+2*HAL_GPIO_ReadPin(AP_APIB_DATA1_PORT, AP_APIB_DATA1_PIN);
 800055a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055e:	4828      	ldr	r0, [pc, #160]	; (8000600 <AP_APIB_GetDataFromHWPin+0xc4>)
 8000560:	f000 fedc 	bl	800131c <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	b2da      	uxtb	r2, r3
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	4413      	add	r3, r2
 800056e:	71fb      	strb	r3, [r7, #7]
	result=result+4*HAL_GPIO_ReadPin(AP_APIB_DATA2_PORT, AP_APIB_DATA2_PIN);
 8000570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000574:	4822      	ldr	r0, [pc, #136]	; (8000600 <AP_APIB_GetDataFromHWPin+0xc4>)
 8000576:	f000 fed1 	bl	800131c <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	b2da      	uxtb	r2, r3
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4413      	add	r3, r2
 8000584:	71fb      	strb	r3, [r7, #7]
	result=result+8*HAL_GPIO_ReadPin(AP_APIB_DATA3_PORT, AP_APIB_DATA3_PIN);
 8000586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058a:	481e      	ldr	r0, [pc, #120]	; (8000604 <AP_APIB_GetDataFromHWPin+0xc8>)
 800058c:	f000 fec6 	bl	800131c <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	00db      	lsls	r3, r3, #3
 8000594:	b2da      	uxtb	r2, r3
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	4413      	add	r3, r2
 800059a:	71fb      	strb	r3, [r7, #7]
	result=result+16*HAL_GPIO_ReadPin(AP_APIB_DATA4_PORT, AP_APIB_DATA4_PIN);
 800059c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a0:	4818      	ldr	r0, [pc, #96]	; (8000604 <AP_APIB_GetDataFromHWPin+0xc8>)
 80005a2:	f000 febb 	bl	800131c <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	011b      	lsls	r3, r3, #4
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4413      	add	r3, r2
 80005b0:	71fb      	strb	r3, [r7, #7]
	result=result+32*HAL_GPIO_ReadPin(AP_APIB_DATA5_PORT, AP_APIB_DATA5_PIN);
 80005b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b6:	4813      	ldr	r0, [pc, #76]	; (8000604 <AP_APIB_GetDataFromHWPin+0xc8>)
 80005b8:	f000 feb0 	bl	800131c <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	015b      	lsls	r3, r3, #5
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4413      	add	r3, r2
 80005c6:	71fb      	strb	r3, [r7, #7]
	result=result+64*HAL_GPIO_ReadPin(AP_APIB_DATA6_PORT, AP_APIB_DATA6_PIN);
 80005c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <AP_APIB_GetDataFromHWPin+0xc8>)
 80005ce:	f000 fea5 	bl	800131c <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	019b      	lsls	r3, r3, #6
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	4413      	add	r3, r2
 80005dc:	71fb      	strb	r3, [r7, #7]
	result=result+128*HAL_GPIO_ReadPin(AP_APIB_DATA7_PORT, AP_APIB_DATA7_PIN);
 80005de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e2:	4808      	ldr	r0, [pc, #32]	; (8000604 <AP_APIB_GetDataFromHWPin+0xc8>)
 80005e4:	f000 fe9a 	bl	800131c <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	01db      	lsls	r3, r3, #7
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	4413      	add	r3, r2
 80005f2:	71fb      	strb	r3, [r7, #7]
	return result;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40010800 	.word	0x40010800
 8000604:	40010c00 	.word	0x40010c00

08000608 <AP_APIB_SetDataToHWPin>:

void AP_APIB_SetDataToHWPin(char data)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(AP_APIB_BUFF_DIR_PORT,AP_APIB_BUFF_DIR_PIN,0); // B->A
 8000612:	2200      	movs	r2, #0
 8000614:	2102      	movs	r1, #2
 8000616:	482c      	ldr	r0, [pc, #176]	; (80006c8 <AP_APIB_SetDataToHWPin+0xc0>)
 8000618:	f000 fe97 	bl	800134a <HAL_GPIO_WritePin>
	AP_APIB_DATA_PORT_OUTPUT();
 800061c:	f000 f8f4 	bl	8000808 <AP_APIB_DATA_PORT_OUTPUT>
	HAL_GPIO_WritePin(AP_APIB_DATA0_PORT, AP_APIB_DATA0_PIN,(1<<0) & data);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	b2db      	uxtb	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062e:	4827      	ldr	r0, [pc, #156]	; (80006cc <AP_APIB_SetDataToHWPin+0xc4>)
 8000630:	f000 fe8b 	bl	800134a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AP_APIB_DATA1_PORT, AP_APIB_DATA1_PIN,(1<<1) & data);
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	461a      	mov	r2, r3
 800063e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000642:	4822      	ldr	r0, [pc, #136]	; (80006cc <AP_APIB_SetDataToHWPin+0xc4>)
 8000644:	f000 fe81 	bl	800134a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AP_APIB_DATA2_PORT, AP_APIB_DATA2_PIN,(1<<2) & data);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	b2db      	uxtb	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000656:	481d      	ldr	r0, [pc, #116]	; (80006cc <AP_APIB_SetDataToHWPin+0xc4>)
 8000658:	f000 fe77 	bl	800134a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AP_APIB_DATA3_PORT, AP_APIB_DATA3_PIN,(1<<3) & data);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	b2db      	uxtb	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800066a:	4817      	ldr	r0, [pc, #92]	; (80006c8 <AP_APIB_SetDataToHWPin+0xc0>)
 800066c:	f000 fe6d 	bl	800134a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AP_APIB_DATA4_PORT, AP_APIB_DATA4_PIN,(1<<4) & data);
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	f003 0310 	and.w	r3, r3, #16
 8000676:	b2db      	uxtb	r3, r3
 8000678:	461a      	mov	r2, r3
 800067a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067e:	4812      	ldr	r0, [pc, #72]	; (80006c8 <AP_APIB_SetDataToHWPin+0xc0>)
 8000680:	f000 fe63 	bl	800134a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AP_APIB_DATA5_PORT, AP_APIB_DATA5_PIN,(1<<5) & data);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	f003 0320 	and.w	r3, r3, #32
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <AP_APIB_SetDataToHWPin+0xc0>)
 8000694:	f000 fe59 	bl	800134a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AP_APIB_DATA6_PORT, AP_APIB_DATA6_PIN,(1<<6) & data);
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	461a      	mov	r2, r3
 80006a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a6:	4808      	ldr	r0, [pc, #32]	; (80006c8 <AP_APIB_SetDataToHWPin+0xc0>)
 80006a8:	f000 fe4f 	bl	800134a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AP_APIB_DATA7_PORT, AP_APIB_DATA7_PIN,(1<<7) & data);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ba:	4803      	ldr	r0, [pc, #12]	; (80006c8 <AP_APIB_SetDataToHWPin+0xc0>)
 80006bc:	f000 fe45 	bl	800134a <HAL_GPIO_WritePin>

}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40010c00 	.word	0x40010c00
 80006cc:	40010800 	.word	0x40010800

080006d0 <AP_APIB_WriteByte>:
	}

}

void AP_APIB_WriteByte(char address,char data)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	AP_APIB_DataWrite(address);
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fa12 	bl	8000b0c <AP_APIB_DataWrite>
	AP_APIB_A_Pulse();
 80006e8:	f000 fa5e 	bl	8000ba8 <AP_APIB_A_Pulse>
	AP_APIB_DataWrite(data);
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fa0c 	bl	8000b0c <AP_APIB_DataWrite>
	AP_APIB_W_Pulse();
 80006f4:	f000 fa72 	bl	8000bdc <AP_APIB_W_Pulse>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <AP_APIB_DELAY>:
	AP_APIB_DataWrite(address);
	AP_APIB_A_Pulse();
}

void AP_APIB_DELAY(int us)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	for(int i=0;i<us;i++)
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e003      	b.n	8000716 <AP_APIB_DELAY+0x16>
	{
		__NOP();
 800070e:	bf00      	nop
	for(int i=0;i<us;i++)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	429a      	cmp	r2, r3
 800071c:	dbf7      	blt.n	800070e <AP_APIB_DELAY+0xe>
	}
}
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <AP_APIB_ReadByte>:


char AP_APIB_ReadByte(char address)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	char data=0;
 8000732:	2300      	movs	r3, #0
 8000734:	73fb      	strb	r3, [r7, #15]
	AP_APIB_DataWrite(address);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f9e7 	bl	8000b0c <AP_APIB_DataWrite>
	AP_APIB_A_Pulse();
 800073e:	f000 fa33 	bl	8000ba8 <AP_APIB_A_Pulse>
	data=AP_APIB_R_Pulse();
 8000742:	f000 fa03 	bl	8000b4c <AP_APIB_R_Pulse>
 8000746:	4603      	mov	r3, r0
 8000748:	73fb      	strb	r3, [r7, #15]
	return data;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800075e:	2228      	movs	r2, #40	; 0x28
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f006 ff26 	bl	80075b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000784:	2301      	movs	r3, #1
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000792:	2301      	movs	r3, #1
 8000794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 f968 	bl	8002a80 <HAL_RCC_OscConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007b6:	f000 fa4f 	bl	8000c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	230f      	movs	r3, #15
 80007bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2302      	movs	r3, #2
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	2102      	movs	r1, #2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f002 fbd2 	bl	8002f80 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80007e2:	f000 fa39 	bl	8000c58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80007e6:	2310      	movs	r3, #16
 80007e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fd2f 	bl	8003254 <HAL_RCCEx_PeriphCLKConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007fc:	f000 fa2c 	bl	8000c58 <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	3750      	adds	r7, #80	; 0x50
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <AP_APIB_DATA_PORT_OUTPUT>:
	HAL_GPIO_Init(AP_APIB_DATA7_PORT, &GPIO_InitStruct);

}

void AP_APIB_DATA_PORT_OUTPUT()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = AP_APIB_DATA0_PIN;
 800081a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2302      	movs	r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(AP_APIB_DATA0_PORT, &GPIO_InitStruct);
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	4834      	ldr	r0, [pc, #208]	; (8000904 <AP_APIB_DATA_PORT_OUTPUT+0xfc>)
 8000832:	f000 fc19 	bl	8001068 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = AP_APIB_DATA1_PIN;
 8000836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800083a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2302      	movs	r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(AP_APIB_DATA1_PORT, &GPIO_InitStruct);
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	482d      	ldr	r0, [pc, #180]	; (8000904 <AP_APIB_DATA_PORT_OUTPUT+0xfc>)
 800084e:	f000 fc0b 	bl	8001068 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = AP_APIB_DATA2_PIN;
 8000852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000856:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2302      	movs	r3, #2
 8000862:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(AP_APIB_DATA2_PORT, &GPIO_InitStruct);
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	4826      	ldr	r0, [pc, #152]	; (8000904 <AP_APIB_DATA_PORT_OUTPUT+0xfc>)
 800086a:	f000 fbfd 	bl	8001068 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = AP_APIB_DATA3_PIN;
 800086e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000872:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2302      	movs	r3, #2
 800087e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(AP_APIB_DATA3_PORT, &GPIO_InitStruct);
 8000880:	463b      	mov	r3, r7
 8000882:	4619      	mov	r1, r3
 8000884:	4820      	ldr	r0, [pc, #128]	; (8000908 <AP_APIB_DATA_PORT_OUTPUT+0x100>)
 8000886:	f000 fbef 	bl	8001068 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = AP_APIB_DATA4_PIN;
 800088a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800088e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2302      	movs	r3, #2
 800089a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(AP_APIB_DATA4_PORT, &GPIO_InitStruct);
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	4819      	ldr	r0, [pc, #100]	; (8000908 <AP_APIB_DATA_PORT_OUTPUT+0x100>)
 80008a2:	f000 fbe1 	bl	8001068 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = AP_APIB_DATA5_PIN;
 80008a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008aa:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2302      	movs	r3, #2
 80008b6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(AP_APIB_DATA5_PORT, &GPIO_InitStruct);
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <AP_APIB_DATA_PORT_OUTPUT+0x100>)
 80008be:	f000 fbd3 	bl	8001068 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = AP_APIB_DATA6_PIN;
 80008c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2302      	movs	r3, #2
 80008d2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(AP_APIB_DATA6_PORT, &GPIO_InitStruct);
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	480b      	ldr	r0, [pc, #44]	; (8000908 <AP_APIB_DATA_PORT_OUTPUT+0x100>)
 80008da:	f000 fbc5 	bl	8001068 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = AP_APIB_DATA7_PIN;
 80008de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008e2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2302      	movs	r3, #2
 80008ee:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(AP_APIB_DATA7_PORT, &GPIO_InitStruct);
 80008f0:	463b      	mov	r3, r7
 80008f2:	4619      	mov	r1, r3
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <AP_APIB_DATA_PORT_OUTPUT+0x100>)
 80008f6:	f000 fbb7 	bl	8001068 <HAL_GPIO_Init>

}
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40010800 	.word	0x40010800
 8000908:	40010c00 	.word	0x40010c00

0800090c <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	4b7a      	ldr	r3, [pc, #488]	; (8000afc <MX_GPIO_Init+0x1f0>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a79      	ldr	r2, [pc, #484]	; (8000afc <MX_GPIO_Init+0x1f0>)
 8000918:	f043 0320 	orr.w	r3, r3, #32
 800091c:	6193      	str	r3, [r2, #24]
 800091e:	4b77      	ldr	r3, [pc, #476]	; (8000afc <MX_GPIO_Init+0x1f0>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f003 0320 	and.w	r3, r3, #32
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b74      	ldr	r3, [pc, #464]	; (8000afc <MX_GPIO_Init+0x1f0>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a73      	ldr	r2, [pc, #460]	; (8000afc <MX_GPIO_Init+0x1f0>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b71      	ldr	r3, [pc, #452]	; (8000afc <MX_GPIO_Init+0x1f0>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b6e      	ldr	r3, [pc, #440]	; (8000afc <MX_GPIO_Init+0x1f0>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	4a6d      	ldr	r2, [pc, #436]	; (8000afc <MX_GPIO_Init+0x1f0>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6193      	str	r3, [r2, #24]
 800094e:	4b6b      	ldr	r3, [pc, #428]	; (8000afc <MX_GPIO_Init+0x1f0>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b68      	ldr	r3, [pc, #416]	; (8000afc <MX_GPIO_Init+0x1f0>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a67      	ldr	r2, [pc, #412]	; (8000afc <MX_GPIO_Init+0x1f0>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b65      	ldr	r3, [pc, #404]	; (8000afc <MX_GPIO_Init+0x1f0>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f003 0310 	and.w	r3, r3, #16
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]



  //inputs

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = AP_APIB_STAT_ATT_PIN;
 8000980:	2301      	movs	r3, #1
 8000982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2302      	movs	r3, #2
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AP_APIB_STAT_ATT_PORT, &GPIO_InitStruct);
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4619      	mov	r1, r3
 8000996:	485a      	ldr	r0, [pc, #360]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000998:	f000 fb66 	bl	8001068 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AP_APIB_STAT_AUX_PIN;
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AP_APIB_STAT_AUX_PORT, &GPIO_InitStruct);
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	4619      	mov	r1, r3
 80009b2:	4854      	ldr	r0, [pc, #336]	; (8000b04 <MX_GPIO_Init+0x1f8>)
 80009b4:	f000 fb58 	bl	8001068 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AP_APIB_STAT_PWR_PIN;
 80009b8:	2320      	movs	r3, #32
 80009ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AP_APIB_STAT_PWR_PORT, &GPIO_InitStruct);
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4619      	mov	r1, r3
 80009ce:	484d      	ldr	r0, [pc, #308]	; (8000b04 <MX_GPIO_Init+0x1f8>)
 80009d0:	f000 fb4a 	bl	8001068 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AP_APIB_STAT_IRQ_PIN;
 80009d4:	2302      	movs	r3, #2
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AP_APIB_STAT_IRQ_PORT, &GPIO_InitStruct);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	4846      	ldr	r0, [pc, #280]	; (8000b04 <MX_GPIO_Init+0x1f8>)
 80009ec:	f000 fb3c 	bl	8001068 <HAL_GPIO_Init>

  //outputs



  GPIO_InitStruct.Pin = AP_APIB_STAT_APIB_ACTIVE_PIN;
 80009f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AP_APIB_STAT_APIB_ACTIVE_PORT, &GPIO_InitStruct);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	483f      	ldr	r0, [pc, #252]	; (8000b08 <MX_GPIO_Init+0x1fc>)
 8000a0a:	f000 fb2d 	bl	8001068 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AP_APIB_BUFF_OE_PIN;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AP_APIB_BUFF_OE_PORT, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	4836      	ldr	r0, [pc, #216]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000a28:	f000 fb1e 	bl	8001068 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AP_APIB_BUFF_DIR_PIN;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AP_APIB_BUFF_DIR_PORT, &GPIO_InitStruct);
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	482f      	ldr	r0, [pc, #188]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000a44:	f000 fb10 	bl	8001068 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AP_APIB_STAT_OE_PIN;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AP_APIB_STAT_OE_PORT, &GPIO_InitStruct);
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4829      	ldr	r0, [pc, #164]	; (8000b04 <MX_GPIO_Init+0x1f8>)
 8000a60:	f000 fb02 	bl	8001068 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AP_APIB_STAT_DIR_PIN;
 8000a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AP_APIB_STAT_DIR_PORT, &GPIO_InitStruct);
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4822      	ldr	r0, [pc, #136]	; (8000b08 <MX_GPIO_Init+0x1fc>)
 8000a7e:	f000 faf3 	bl	8001068 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AP_APIB_STAT_R_PIN;
 8000a82:	2310      	movs	r3, #16
 8000a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AP_APIB_STAT_R_PORT, &GPIO_InitStruct);
 8000a92:	f107 0310 	add.w	r3, r7, #16
 8000a96:	4619      	mov	r1, r3
 8000a98:	481a      	ldr	r0, [pc, #104]	; (8000b04 <MX_GPIO_Init+0x1f8>)
 8000a9a:	f000 fae5 	bl	8001068 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AP_APIB_STAT_A_PIN;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AP_APIB_STAT_A_PORT, &GPIO_InitStruct);
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4813      	ldr	r0, [pc, #76]	; (8000b04 <MX_GPIO_Init+0x1f8>)
 8000ab6:	f000 fad7 	bl	8001068 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AP_APIB_STAT_W_PIN;
 8000aba:	2308      	movs	r3, #8
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AP_APIB_STAT_W_PORT, &GPIO_InitStruct);
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <MX_GPIO_Init+0x1f8>)
 8000ad2:	f000 fac9 	bl	8001068 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AP_APIB_STAT_RES_PIN;
 8000ad6:	2340      	movs	r3, #64	; 0x40
 8000ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AP_APIB_STAT_RES_PORT, &GPIO_InitStruct);
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_GPIO_Init+0x1f8>)
 8000aee:	f000 fabb 	bl	8001068 <HAL_GPIO_Init>

}
 8000af2:	bf00      	nop
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010c00 	.word	0x40010c00
 8000b04:	40010800 	.word	0x40010800
 8000b08:	40011000 	.word	0x40011000

08000b0c <AP_APIB_DataWrite>:

void AP_APIB_DataWrite(char data)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(AP_APIB_BUFF_DIR_PORT,AP_APIB_BUFF_DIR_PIN,0); // B->A
 8000b16:	2200      	movs	r2, #0
 8000b18:	2102      	movs	r1, #2
 8000b1a:	480b      	ldr	r0, [pc, #44]	; (8000b48 <AP_APIB_DataWrite+0x3c>)
 8000b1c:	f000 fc15 	bl	800134a <HAL_GPIO_WritePin>
	AP_APIB_DELAY(if_delay);
 8000b20:	2064      	movs	r0, #100	; 0x64
 8000b22:	f7ff fded 	bl	8000700 <AP_APIB_DELAY>
	AP_APIB_DATA_PORT_OUTPUT();
 8000b26:	f7ff fe6f 	bl	8000808 <AP_APIB_DATA_PORT_OUTPUT>
	AP_APIB_DELAY(if_delay);
 8000b2a:	2064      	movs	r0, #100	; 0x64
 8000b2c:	f7ff fde8 	bl	8000700 <AP_APIB_DELAY>
	AP_APIB_SetDataToHWPin(data);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fd68 	bl	8000608 <AP_APIB_SetDataToHWPin>
	AP_APIB_DELAY(if_delay);
 8000b38:	2064      	movs	r0, #100	; 0x64
 8000b3a:	f7ff fde1 	bl	8000700 <AP_APIB_DELAY>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40010c00 	.word	0x40010c00

08000b4c <AP_APIB_R_Pulse>:
	AP_APIB_DELAY(if_delay);
	return AP_APIB_GetDataFromHWPin();
}

char AP_APIB_R_Pulse()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
	char result=0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(AP_APIB_BUFF_DIR_PORT,AP_APIB_BUFF_DIR_PIN,1); // A->B
 8000b56:	2201      	movs	r2, #1
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <AP_APIB_R_Pulse+0x54>)
 8000b5c:	f000 fbf5 	bl	800134a <HAL_GPIO_WritePin>
	AP_APIB_DELAY(if_delay);
 8000b60:	2064      	movs	r0, #100	; 0x64
 8000b62:	f7ff fdcd 	bl	8000700 <AP_APIB_DELAY>
	HAL_GPIO_WritePin(AP_APIB_STAT_R_PORT,AP_APIB_STAT_R_PIN,1);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2110      	movs	r1, #16
 8000b6a:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <AP_APIB_R_Pulse+0x58>)
 8000b6c:	f000 fbed 	bl	800134a <HAL_GPIO_WritePin>
	AP_APIB_DELAY(if_delay);
 8000b70:	2064      	movs	r0, #100	; 0x64
 8000b72:	f7ff fdc5 	bl	8000700 <AP_APIB_DELAY>
	result=AP_APIB_GetDataFromHWPin();
 8000b76:	f7ff fce1 	bl	800053c <AP_APIB_GetDataFromHWPin>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
	AP_APIB_DELAY(if_delay);
 8000b7e:	2064      	movs	r0, #100	; 0x64
 8000b80:	f7ff fdbe 	bl	8000700 <AP_APIB_DELAY>
	HAL_GPIO_WritePin(AP_APIB_STAT_R_PORT,AP_APIB_STAT_R_PIN,0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2110      	movs	r1, #16
 8000b88:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <AP_APIB_R_Pulse+0x58>)
 8000b8a:	f000 fbde 	bl	800134a <HAL_GPIO_WritePin>
	AP_APIB_DELAY(if_delay);
 8000b8e:	2064      	movs	r0, #100	; 0x64
 8000b90:	f7ff fdb6 	bl	8000700 <AP_APIB_DELAY>
	return result;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40010c00 	.word	0x40010c00
 8000ba4:	40010800 	.word	0x40010800

08000ba8 <AP_APIB_A_Pulse>:

void AP_APIB_A_Pulse()
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	AP_APIB_DELAY(if_delay);
 8000bac:	2064      	movs	r0, #100	; 0x64
 8000bae:	f7ff fda7 	bl	8000700 <AP_APIB_DELAY>
	HAL_GPIO_WritePin(AP_APIB_STAT_A_PORT,AP_APIB_STAT_A_PIN,1);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <AP_APIB_A_Pulse+0x30>)
 8000bb8:	f000 fbc7 	bl	800134a <HAL_GPIO_WritePin>
	AP_APIB_DELAY(if_delay);
 8000bbc:	2064      	movs	r0, #100	; 0x64
 8000bbe:	f7ff fd9f 	bl	8000700 <AP_APIB_DELAY>
	HAL_GPIO_WritePin(AP_APIB_STAT_A_PORT,AP_APIB_STAT_A_PIN,0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <AP_APIB_A_Pulse+0x30>)
 8000bc8:	f000 fbbf 	bl	800134a <HAL_GPIO_WritePin>
	AP_APIB_DELAY(if_delay);
 8000bcc:	2064      	movs	r0, #100	; 0x64
 8000bce:	f7ff fd97 	bl	8000700 <AP_APIB_DELAY>
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40010800 	.word	0x40010800

08000bdc <AP_APIB_W_Pulse>:

void AP_APIB_W_Pulse()
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	AP_APIB_DELAY(if_delay);
 8000be0:	2064      	movs	r0, #100	; 0x64
 8000be2:	f7ff fd8d 	bl	8000700 <AP_APIB_DELAY>
	HAL_GPIO_WritePin(AP_APIB_STAT_W_PORT,AP_APIB_STAT_W_PIN,1);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2108      	movs	r1, #8
 8000bea:	4808      	ldr	r0, [pc, #32]	; (8000c0c <AP_APIB_W_Pulse+0x30>)
 8000bec:	f000 fbad 	bl	800134a <HAL_GPIO_WritePin>
	AP_APIB_DELAY(if_delay);
 8000bf0:	2064      	movs	r0, #100	; 0x64
 8000bf2:	f7ff fd85 	bl	8000700 <AP_APIB_DELAY>
	HAL_GPIO_WritePin(AP_APIB_STAT_W_PORT,AP_APIB_STAT_W_PIN,0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <AP_APIB_W_Pulse+0x30>)
 8000bfc:	f000 fba5 	bl	800134a <HAL_GPIO_WritePin>
	AP_APIB_DELAY(if_delay);
 8000c00:	2064      	movs	r0, #100	; 0x64
 8000c02:	f7ff fd7d 	bl	8000700 <AP_APIB_DELAY>
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40010800 	.word	0x40010800

08000c10 <AP_APIB_Read_IRQ>:

_Bool AP_APIB_Read_IRQ()
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(AP_APIB_STAT_IRQ_PORT,AP_APIB_STAT_IRQ_PIN))
 8000c14:	2102      	movs	r1, #2
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <AP_APIB_Read_IRQ+0x1c>)
 8000c18:	f000 fb80 	bl	800131c <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <AP_APIB_Read_IRQ+0x16>
	{
		return 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e000      	b.n	8000c28 <AP_APIB_Read_IRQ+0x18>
	}
	else
	{
		return 0;
 8000c26:	2300      	movs	r3, #0
	}
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40010800 	.word	0x40010800

08000c30 <AP_APIB_Reset_AP>:
{
	return HAL_GPIO_ReadPin(AP_APIB_STAT_AUX_PORT,AP_APIB_STAT_AUX_PIN);
}

void AP_APIB_Reset_AP()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AP_APIB_STAT_RES_PORT,AP_APIB_STAT_RES_PIN,1);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <AP_APIB_Reset_AP+0x24>)
 8000c3a:	f000 fb86 	bl	800134a <HAL_GPIO_WritePin>
	AP_APIB_DELAY(if_delay*10);
 8000c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c42:	f7ff fd5d 	bl	8000700 <AP_APIB_DELAY>
	HAL_GPIO_WritePin(AP_APIB_STAT_RES_PORT,AP_APIB_STAT_RES_PIN,0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	4802      	ldr	r0, [pc, #8]	; (8000c54 <AP_APIB_Reset_AP+0x24>)
 8000c4c:	f000 fb7d 	bl	800134a <HAL_GPIO_WritePin>
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40010800 	.word	0x40010800

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_MspInit+0x5c>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <HAL_MspInit+0x5c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6193      	str	r3, [r2, #24]
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_MspInit+0x5c>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <HAL_MspInit+0x5c>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <HAL_MspInit+0x5c>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	61d3      	str	r3, [r2, #28]
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_MspInit+0x5c>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_MspInit+0x60>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_MspInit+0x60>)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010000 	.word	0x40010000

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <HardFault_Handler+0x4>

08000cda <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <MemManage_Handler+0x4>

08000ce0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <BusFault_Handler+0x4>

08000ce6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <UsageFault_Handler+0x4>

08000cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d14:	f000 f87e 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d22:	f000 fc5b 	bl	80015dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000145c 	.word	0x2000145c

08000d30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d3e:	e003      	b.n	8000d48 <LoopCopyDataInit>

08000d40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d46:	3104      	adds	r1, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d48:	480a      	ldr	r0, [pc, #40]	; (8000d74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d50:	d3f6      	bcc.n	8000d40 <CopyDataInit>
  ldr r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d54:	e002      	b.n	8000d5c <LoopFillZerobss>

08000d56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d58:	f842 3b04 	str.w	r3, [r2], #4

08000d5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d60:	d3f9      	bcc.n	8000d56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d62:	f7ff ffe5 	bl	8000d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f006 fc01 	bl	800756c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d6a:	f7ff f9ef 	bl	800014c <main>
  bx lr
 8000d6e:	4770      	bx	lr
  ldr r3, =_sidata
 8000d70:	08007674 	.word	0x08007674
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d78:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8000d7c:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8000d80:	20001748 	.word	0x20001748

08000d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC1_2_IRQHandler>
	...

08000d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_Init+0x28>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <HAL_Init+0x28>)
 8000d92:	f043 0310 	orr.w	r3, r3, #16
 8000d96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 f923 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 f808 	bl	8000db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da4:	f7ff ff5e 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40022000 	.word	0x40022000

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x54>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x58>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f93b 	bl	800104e <HAL_SYSTICK_Config>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00e      	b.n	8000e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d80a      	bhi.n	8000dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f000 f903 	bl	8000ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <HAL_InitTick+0x5c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e000      	b.n	8000e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_IncTick+0x1c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_IncTick+0x20>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <HAL_IncTick+0x20>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	20000008 	.word	0x20000008
 8000e34:	200007c4 	.word	0x200007c4

08000e38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b02      	ldr	r3, [pc, #8]	; (8000e48 <HAL_GetTick+0x10>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	200007c4 	.word	0x200007c4

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4906      	ldr	r1, [pc, #24]	; (8000ee4 <__NVIC_EnableIRQ+0x34>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff90 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff2d 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff42 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff90 	bl	8000f3c <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5f 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff35 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffa2 	bl	8000fa0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b08b      	sub	sp, #44	; 0x2c
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107a:	e127      	b.n	80012cc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800107c:	2201      	movs	r2, #1
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8116 	bne.w	80012c6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d034      	beq.n	800110c <HAL_GPIO_Init+0xa4>
 80010a2:	2b12      	cmp	r3, #18
 80010a4:	d80d      	bhi.n	80010c2 <HAL_GPIO_Init+0x5a>
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d02b      	beq.n	8001102 <HAL_GPIO_Init+0x9a>
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d804      	bhi.n	80010b8 <HAL_GPIO_Init+0x50>
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d031      	beq.n	8001116 <HAL_GPIO_Init+0xae>
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d01c      	beq.n	80010f0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010b6:	e048      	b.n	800114a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d043      	beq.n	8001144 <HAL_GPIO_Init+0xdc>
 80010bc:	2b11      	cmp	r3, #17
 80010be:	d01b      	beq.n	80010f8 <HAL_GPIO_Init+0x90>
          break;
 80010c0:	e043      	b.n	800114a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010c2:	4a89      	ldr	r2, [pc, #548]	; (80012e8 <HAL_GPIO_Init+0x280>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d026      	beq.n	8001116 <HAL_GPIO_Init+0xae>
 80010c8:	4a87      	ldr	r2, [pc, #540]	; (80012e8 <HAL_GPIO_Init+0x280>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d806      	bhi.n	80010dc <HAL_GPIO_Init+0x74>
 80010ce:	4a87      	ldr	r2, [pc, #540]	; (80012ec <HAL_GPIO_Init+0x284>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d020      	beq.n	8001116 <HAL_GPIO_Init+0xae>
 80010d4:	4a86      	ldr	r2, [pc, #536]	; (80012f0 <HAL_GPIO_Init+0x288>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d01d      	beq.n	8001116 <HAL_GPIO_Init+0xae>
          break;
 80010da:	e036      	b.n	800114a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010dc:	4a85      	ldr	r2, [pc, #532]	; (80012f4 <HAL_GPIO_Init+0x28c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0xae>
 80010e2:	4a85      	ldr	r2, [pc, #532]	; (80012f8 <HAL_GPIO_Init+0x290>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d016      	beq.n	8001116 <HAL_GPIO_Init+0xae>
 80010e8:	4a84      	ldr	r2, [pc, #528]	; (80012fc <HAL_GPIO_Init+0x294>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0xae>
          break;
 80010ee:	e02c      	b.n	800114a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	623b      	str	r3, [r7, #32]
          break;
 80010f6:	e028      	b.n	800114a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	3304      	adds	r3, #4
 80010fe:	623b      	str	r3, [r7, #32]
          break;
 8001100:	e023      	b.n	800114a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	3308      	adds	r3, #8
 8001108:	623b      	str	r3, [r7, #32]
          break;
 800110a:	e01e      	b.n	800114a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	330c      	adds	r3, #12
 8001112:	623b      	str	r3, [r7, #32]
          break;
 8001114:	e019      	b.n	800114a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d102      	bne.n	8001124 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800111e:	2304      	movs	r3, #4
 8001120:	623b      	str	r3, [r7, #32]
          break;
 8001122:	e012      	b.n	800114a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d105      	bne.n	8001138 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800112c:	2308      	movs	r3, #8
 800112e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69fa      	ldr	r2, [r7, #28]
 8001134:	611a      	str	r2, [r3, #16]
          break;
 8001136:	e008      	b.n	800114a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001138:	2308      	movs	r3, #8
 800113a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	615a      	str	r2, [r3, #20]
          break;
 8001142:	e002      	b.n	800114a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
          break;
 8001148:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	2bff      	cmp	r3, #255	; 0xff
 800114e:	d801      	bhi.n	8001154 <HAL_GPIO_Init+0xec>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	e001      	b.n	8001158 <HAL_GPIO_Init+0xf0>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3304      	adds	r3, #4
 8001158:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	2bff      	cmp	r3, #255	; 0xff
 800115e:	d802      	bhi.n	8001166 <HAL_GPIO_Init+0xfe>
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	e002      	b.n	800116c <HAL_GPIO_Init+0x104>
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	3b08      	subs	r3, #8
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	210f      	movs	r1, #15
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	401a      	ands	r2, r3
 800117e:	6a39      	ldr	r1, [r7, #32]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	431a      	orrs	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 8096 	beq.w	80012c6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800119a:	4b59      	ldr	r3, [pc, #356]	; (8001300 <HAL_GPIO_Init+0x298>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	4a58      	ldr	r2, [pc, #352]	; (8001300 <HAL_GPIO_Init+0x298>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6193      	str	r3, [r2, #24]
 80011a6:	4b56      	ldr	r3, [pc, #344]	; (8001300 <HAL_GPIO_Init+0x298>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011b2:	4a54      	ldr	r2, [pc, #336]	; (8001304 <HAL_GPIO_Init+0x29c>)
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	4013      	ands	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4b      	ldr	r2, [pc, #300]	; (8001308 <HAL_GPIO_Init+0x2a0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d013      	beq.n	8001206 <HAL_GPIO_Init+0x19e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4a      	ldr	r2, [pc, #296]	; (800130c <HAL_GPIO_Init+0x2a4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00d      	beq.n	8001202 <HAL_GPIO_Init+0x19a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a49      	ldr	r2, [pc, #292]	; (8001310 <HAL_GPIO_Init+0x2a8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d007      	beq.n	80011fe <HAL_GPIO_Init+0x196>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a48      	ldr	r2, [pc, #288]	; (8001314 <HAL_GPIO_Init+0x2ac>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d101      	bne.n	80011fa <HAL_GPIO_Init+0x192>
 80011f6:	2303      	movs	r3, #3
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x1a0>
 80011fa:	2304      	movs	r3, #4
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x1a0>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x1a0>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x1a0>
 8001206:	2300      	movs	r3, #0
 8001208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800120a:	f002 0203 	and.w	r2, r2, #3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4093      	lsls	r3, r2
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001218:	493a      	ldr	r1, [pc, #232]	; (8001304 <HAL_GPIO_Init+0x29c>)
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d006      	beq.n	8001240 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001232:	4b39      	ldr	r3, [pc, #228]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4938      	ldr	r1, [pc, #224]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
 800123e:	e006      	b.n	800124e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001240:	4b35      	ldr	r3, [pc, #212]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	43db      	mvns	r3, r3
 8001248:	4933      	ldr	r1, [pc, #204]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 800124a:	4013      	ands	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d006      	beq.n	8001268 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800125a:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	492e      	ldr	r1, [pc, #184]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
 8001266:	e006      	b.n	8001276 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001268:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	43db      	mvns	r3, r3
 8001270:	4929      	ldr	r1, [pc, #164]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 8001272:	4013      	ands	r3, r2
 8001274:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d006      	beq.n	8001290 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001282:	4b25      	ldr	r3, [pc, #148]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	4924      	ldr	r1, [pc, #144]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	608b      	str	r3, [r1, #8]
 800128e:	e006      	b.n	800129e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	43db      	mvns	r3, r3
 8001298:	491f      	ldr	r1, [pc, #124]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 800129a:	4013      	ands	r3, r2
 800129c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	491a      	ldr	r1, [pc, #104]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	60cb      	str	r3, [r1, #12]
 80012b6:	e006      	b.n	80012c6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	43db      	mvns	r3, r3
 80012c0:	4915      	ldr	r1, [pc, #84]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	3301      	adds	r3, #1
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	fa22 f303 	lsr.w	r3, r2, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f47f aed0 	bne.w	800107c <HAL_GPIO_Init+0x14>
  }
}
 80012dc:	bf00      	nop
 80012de:	372c      	adds	r7, #44	; 0x2c
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	10210000 	.word	0x10210000
 80012ec:	10110000 	.word	0x10110000
 80012f0:	10120000 	.word	0x10120000
 80012f4:	10310000 	.word	0x10310000
 80012f8:	10320000 	.word	0x10320000
 80012fc:	10220000 	.word	0x10220000
 8001300:	40021000 	.word	0x40021000
 8001304:	40010000 	.word	0x40010000
 8001308:	40010800 	.word	0x40010800
 800130c:	40010c00 	.word	0x40010c00
 8001310:	40011000 	.word	0x40011000
 8001314:	40011400 	.word	0x40011400
 8001318:	40010400 	.word	0x40010400

0800131c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	4013      	ands	r3, r2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001334:	2301      	movs	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e001      	b.n	800133e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	807b      	strh	r3, [r7, #2]
 8001356:	4613      	mov	r3, r2
 8001358:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800135a:	787b      	ldrb	r3, [r7, #1]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001360:	887a      	ldrh	r2, [r7, #2]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001366:	e003      	b.n	8001370 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	041a      	lsls	r2, r3, #16
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	611a      	str	r2, [r3, #16]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800137a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137c:	b08b      	sub	sp, #44	; 0x2c
 800137e:	af06      	add	r7, sp, #24
 8001380:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0fd      	b.n	8001588 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d106      	bne.n	80013a6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f005 fe39 	bl	8007018 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2203      	movs	r2, #3
 80013aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 f82a 	bl	800340c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	687e      	ldr	r6, [r7, #4]
 80013c0:	466d      	mov	r5, sp
 80013c2:	f106 0410 	add.w	r4, r6, #16
 80013c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	602b      	str	r3, [r5, #0]
 80013ce:	1d33      	adds	r3, r6, #4
 80013d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d2:	6838      	ldr	r0, [r7, #0]
 80013d4:	f001 fff4 	bl	80033c0 <USB_CoreInit>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2202      	movs	r2, #2
 80013e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e0ce      	b.n	8001588 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 f825 	bl	8003440 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	e04c      	b.n	8001496 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	440b      	add	r3, r1
 800140c:	3301      	adds	r3, #1
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	b298      	uxth	r0, r3
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	3336      	adds	r3, #54	; 0x36
 800143a:	4602      	mov	r2, r0
 800143c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	3303      	adds	r3, #3
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	440b      	add	r3, r1
 8001462:	3338      	adds	r3, #56	; 0x38
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	333c      	adds	r3, #60	; 0x3c
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	3340      	adds	r3, #64	; 0x40
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	3301      	adds	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	d3ad      	bcc.n	80013fc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e044      	b.n	8001530 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	440b      	add	r3, r1
 80014e0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	440b      	add	r3, r1
 80014f6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	440b      	add	r3, r1
 800150c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	3301      	adds	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	d3b5      	bcc.n	80014a6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	687e      	ldr	r6, [r7, #4]
 8001542:	466d      	mov	r5, sp
 8001544:	f106 0410 	add.w	r4, r6, #16
 8001548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800154c:	6823      	ldr	r3, [r4, #0]
 800154e:	602b      	str	r3, [r5, #0]
 8001550:	1d33      	adds	r3, r6, #4
 8001552:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f001 ff7f 	bl	8003458 <USB_DevInit>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e00d      	b.n	8001588 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f003 ff19 	bl	80053b8 <USB_DevDisconnect>

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001590 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_PCD_Start+0x16>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e016      	b.n	80015d4 <HAL_PCD_Start+0x44>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 ff14 	bl	80033e0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80015b8:	2101      	movs	r1, #1
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f005 ff9f 	bl	80074fe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 feed 	bl	80053a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f003 feef 	bl	80053cc <USB_ReadInterrupts>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015f8:	d102      	bne.n	8001600 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 fb61 	bl	8001cc2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f003 fee1 	bl	80053cc <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001614:	d112      	bne.n	800163c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800161e:	b29a      	uxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001628:	b292      	uxth	r2, r2
 800162a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f005 fd6d 	bl	800710e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001634:	2100      	movs	r1, #0
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f925 	bl	8001886 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f003 fec3 	bl	80053cc <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001650:	d10b      	bne.n	800166a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800165a:	b29a      	uxth	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001664:	b292      	uxth	r2, r2
 8001666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f003 feac 	bl	80053cc <USB_ReadInterrupts>
 8001674:	4603      	mov	r3, r0
 8001676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800167a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800167e:	d10b      	bne.n	8001698 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001688:	b29a      	uxth	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001692:	b292      	uxth	r2, r2
 8001694:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f003 fe95 	bl	80053cc <USB_ReadInterrupts>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ac:	d126      	bne.n	80016fc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0204 	bic.w	r2, r2, #4
 80016c0:	b292      	uxth	r2, r2
 80016c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0208 	bic.w	r2, r2, #8
 80016d8:	b292      	uxth	r2, r2
 80016da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f005 fd4e 	bl	8007180 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016f6:	b292      	uxth	r2, r2
 80016f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fe63 	bl	80053cc <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800170c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001710:	f040 8084 	bne.w	800181c <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001714:	2300      	movs	r3, #0
 8001716:	77fb      	strb	r3, [r7, #31]
 8001718:	e011      	b.n	800173e <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	7ffb      	ldrb	r3, [r7, #31]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	441a      	add	r2, r3
 8001726:	7ffb      	ldrb	r3, [r7, #31]
 8001728:	8812      	ldrh	r2, [r2, #0]
 800172a:	b292      	uxth	r2, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	f107 0120 	add.w	r1, r7, #32
 8001732:	440b      	add	r3, r1
 8001734:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001738:	7ffb      	ldrb	r3, [r7, #31]
 800173a:	3301      	adds	r3, #1
 800173c:	77fb      	strb	r3, [r7, #31]
 800173e:	7ffb      	ldrb	r3, [r7, #31]
 8001740:	2b07      	cmp	r3, #7
 8001742:	d9ea      	bls.n	800171a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800174c:	b29a      	uxth	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	b292      	uxth	r2, r2
 8001758:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001764:	b29a      	uxth	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	b292      	uxth	r2, r2
 8001770:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001774:	bf00      	nop
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800177e:	b29b      	uxth	r3, r3
 8001780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f6      	beq.n	8001776 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800179a:	b292      	uxth	r2, r2
 800179c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	77fb      	strb	r3, [r7, #31]
 80017a4:	e010      	b.n	80017c8 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80017a6:	7ffb      	ldrb	r3, [r7, #31]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	4611      	mov	r1, r2
 80017ae:	7ffa      	ldrb	r2, [r7, #31]
 80017b0:	0092      	lsls	r2, r2, #2
 80017b2:	440a      	add	r2, r1
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	f107 0120 	add.w	r1, r7, #32
 80017ba:	440b      	add	r3, r1
 80017bc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80017c0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80017c2:	7ffb      	ldrb	r3, [r7, #31]
 80017c4:	3301      	adds	r3, #1
 80017c6:	77fb      	strb	r3, [r7, #31]
 80017c8:	7ffb      	ldrb	r3, [r7, #31]
 80017ca:	2b07      	cmp	r3, #7
 80017cc:	d9eb      	bls.n	80017a6 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0208 	orr.w	r2, r2, #8
 80017e0:	b292      	uxth	r2, r2
 80017e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017f8:	b292      	uxth	r2, r2
 80017fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001806:	b29a      	uxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0204 	orr.w	r2, r2, #4
 8001810:	b292      	uxth	r2, r2
 8001812:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f005 fc98 	bl	800714c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f003 fdd3 	bl	80053cc <USB_ReadInterrupts>
 8001826:	4603      	mov	r3, r0
 8001828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800182c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001830:	d10e      	bne.n	8001850 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800183a:	b29a      	uxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001844:	b292      	uxth	r2, r2
 8001846:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f005 fc51 	bl	80070f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f003 fdb9 	bl	80053cc <USB_ReadInterrupts>
 800185a:	4603      	mov	r3, r0
 800185c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001864:	d10b      	bne.n	800187e <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800186e:	b29a      	uxth	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001878:	b292      	uxth	r2, r2
 800187a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800187e:	bf00      	nop
 8001880:	3720      	adds	r7, #32
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_PCD_SetAddress+0x1a>
 800189c:	2302      	movs	r3, #2
 800189e:	e013      	b.n	80018c8 <HAL_PCD_SetAddress+0x42>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 fd60 	bl	800537e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	4608      	mov	r0, r1
 80018da:	4611      	mov	r1, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	4603      	mov	r3, r0
 80018e0:	70fb      	strb	r3, [r7, #3]
 80018e2:	460b      	mov	r3, r1
 80018e4:	803b      	strh	r3, [r7, #0]
 80018e6:	4613      	mov	r3, r2
 80018e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	da0e      	bge.n	8001914 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	705a      	strb	r2, [r3, #1]
 8001912:	e00e      	b.n	8001932 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	f003 0207 	and.w	r2, r3, #7
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	b2da      	uxtb	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800193e:	883a      	ldrh	r2, [r7, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	78ba      	ldrb	r2, [r7, #2]
 8001948:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	785b      	ldrb	r3, [r3, #1]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d004      	beq.n	800195c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800195c:	78bb      	ldrb	r3, [r7, #2]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d102      	bne.n	8001968 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_PCD_EP_Open+0xa6>
 8001972:	2302      	movs	r3, #2
 8001974:	e00e      	b.n	8001994 <HAL_PCD_EP_Open+0xc4>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68f9      	ldr	r1, [r7, #12]
 8001984:	4618      	mov	r0, r3
 8001986:	f001 fd87 	bl	8003498 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001992:	7afb      	ldrb	r3, [r7, #11]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	da0e      	bge.n	80019ce <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2201      	movs	r2, #1
 80019ca:	705a      	strb	r2, [r3, #1]
 80019cc:	e00e      	b.n	80019ec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	f003 0207 	and.w	r2, r3, #7
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_PCD_EP_Close+0x6a>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e00e      	b.n	8001a24 <HAL_PCD_EP_Close+0x88>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68f9      	ldr	r1, [r7, #12]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 f8a9 	bl	8003b6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
 8001a3e:	f003 0207 	and.w	r2, r3, #7
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a6c:	7afb      	ldrb	r3, [r7, #11]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a78:	7afb      	ldrb	r3, [r7, #11]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6979      	ldr	r1, [r7, #20]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 fa5b 	bl	8003f44 <USB_EPStartXfer>
 8001a8e:	e005      	b.n	8001a9c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6979      	ldr	r1, [r7, #20]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 fa54 	bl	8003f44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	f003 0207 	and.w	r2, r3, #7
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001ac8:	681b      	ldr	r3, [r3, #0]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ae4:	7afb      	ldrb	r3, [r7, #11]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b20:	7afb      	ldrb	r3, [r7, #11]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b2c:	7afb      	ldrb	r3, [r7, #11]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6979      	ldr	r1, [r7, #20]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 fa01 	bl	8003f44 <USB_EPStartXfer>
 8001b42:	e005      	b.n	8001b50 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6979      	ldr	r1, [r7, #20]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 f9fa 	bl	8003f44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	f003 0207 	and.w	r2, r3, #7
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d901      	bls.n	8001b78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e04c      	b.n	8001c12 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	da0e      	bge.n	8001b9e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	705a      	strb	r2, [r3, #1]
 8001b9c:	e00c      	b.n	8001bb8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b9e:	78fa      	ldrb	r2, [r7, #3]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_PCD_EP_SetStall+0x7e>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e01c      	b.n	8001c12 <HAL_PCD_EP_SetStall+0xb8>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68f9      	ldr	r1, [r7, #12]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f003 facc 	bl	8005184 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d108      	bne.n	8001c08 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001c00:	4619      	mov	r1, r3
 8001c02:	4610      	mov	r0, r2
 8001c04:	f003 fbf1 	bl	80053ea <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 020f 	and.w	r2, r3, #15
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d901      	bls.n	8001c38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e040      	b.n	8001cba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	da0e      	bge.n	8001c5e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	4413      	add	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	705a      	strb	r2, [r3, #1]
 8001c5c:	e00e      	b.n	8001c7c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	f003 0207 	and.w	r2, r3, #7
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_PCD_EP_ClrStall+0x82>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e00e      	b.n	8001cba <HAL_PCD_EP_ClrStall+0xa0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68f9      	ldr	r1, [r7, #12]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 faba 	bl	8005224 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b08e      	sub	sp, #56	; 0x38
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cca:	e2df      	b.n	800228c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cd4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001cd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001ce2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 8158 	bne.w	8001f9c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001cec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d152      	bne.n	8001d9c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d06:	81fb      	strh	r3, [r7, #14]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	89fb      	ldrh	r3, [r7, #14]
 8001d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3328      	adds	r3, #40	; 0x28
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	3302      	adds	r3, #2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	695a      	ldr	r2, [r3, #20]
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	441a      	add	r2, r3
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f005 f9ae 	bl	80070be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 828e 	beq.w	800228c <PCD_EP_ISR_Handler+0x5ca>
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f040 8289 	bne.w	800228c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b292      	uxth	r2, r2
 8001d8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d9a:	e277      	b.n	800228c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001dac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d034      	beq.n	8001e20 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	3306      	adds	r3, #6
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	f003 fb47 	bl	8005488 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e06:	4013      	ands	r3, r2
 8001e08:	823b      	strh	r3, [r7, #16]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	8a3a      	ldrh	r2, [r7, #16]
 8001e10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e14:	b292      	uxth	r2, r2
 8001e16:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f005 f923 	bl	8007064 <HAL_PCD_SetupStageCallback>
 8001e1e:	e235      	b.n	800228c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e20:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f280 8231 	bge.w	800228c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e36:	4013      	ands	r3, r2
 8001e38:	83bb      	strh	r3, [r7, #28]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	8bba      	ldrh	r2, [r7, #28]
 8001e40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e44:	b292      	uxth	r2, r2
 8001e46:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3306      	adds	r3, #6
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d019      	beq.n	8001eb0 <PCD_EP_ISR_Handler+0x1ee>
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d015      	beq.n	8001eb0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	6959      	ldr	r1, [r3, #20]
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	f003 faf7 	bl	8005488 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	441a      	add	r2, r3
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f005 f8ec 	bl	8007088 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d112      	bne.n	8001efe <PCD_EP_ISR_Handler+0x23c>
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	801a      	strh	r2, [r3, #0]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	801a      	strh	r2, [r3, #0]
 8001efc:	e02f      	b.n	8001f5e <PCD_EP_ISR_Handler+0x29c>
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b3e      	cmp	r3, #62	; 0x3e
 8001f04:	d813      	bhi.n	8001f2e <PCD_EP_ISR_Handler+0x26c>
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <PCD_EP_ISR_Handler+0x25e>
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8001f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	029b      	lsls	r3, r3, #10
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	801a      	strh	r2, [r3, #0]
 8001f2c:	e017      	b.n	8001f5e <PCD_EP_ISR_Handler+0x29c>
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	633b      	str	r3, [r7, #48]	; 0x30
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d102      	bne.n	8001f48 <PCD_EP_ISR_Handler+0x286>
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f44:	3b01      	subs	r3, #1
 8001f46:	633b      	str	r3, [r7, #48]	; 0x30
 8001f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	029b      	lsls	r3, r3, #10
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6e:	827b      	strh	r3, [r7, #18]
 8001f70:	8a7b      	ldrh	r3, [r7, #18]
 8001f72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f76:	827b      	strh	r3, [r7, #18]
 8001f78:	8a7b      	ldrh	r3, [r7, #18]
 8001f7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f7e:	827b      	strh	r3, [r7, #18]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	8a7b      	ldrh	r3, [r7, #18]
 8001f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	8013      	strh	r3, [r2, #0]
 8001f9a:	e177      	b.n	800228c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fae:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f280 80ea 	bge.w	800218c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fce:	4013      	ands	r3, r2
 8001fd0:	853b      	strh	r3, [r7, #40]	; 0x28
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fe2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fe6:	b292      	uxth	r2, r2
 8001fe8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	7b1b      	ldrb	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d122      	bne.n	800204e <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002010:	b29b      	uxth	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	3306      	adds	r3, #6
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002030:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002032:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 8087 	beq.w	8002148 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	6959      	ldr	r1, [r3, #20]
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	88da      	ldrh	r2, [r3, #6]
 8002046:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002048:	f003 fa1e 	bl	8005488 <USB_ReadPMA>
 800204c:	e07c      	b.n	8002148 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	78db      	ldrb	r3, [r3, #3]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d108      	bne.n	8002068 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002056:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002058:	461a      	mov	r2, r3
 800205a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f923 	bl	80022a8 <HAL_PCD_EP_DB_Receive>
 8002062:	4603      	mov	r3, r0
 8002064:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002066:	e06f      	b.n	8002148 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800207e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002082:	847b      	strh	r3, [r7, #34]	; 0x22
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	441a      	add	r2, r3
 8002092:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800209c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d021      	beq.n	8002106 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	3302      	adds	r3, #2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ea:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d02a      	beq.n	8002148 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	6959      	ldr	r1, [r3, #20]
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	891a      	ldrh	r2, [r3, #8]
 80020fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002100:	f003 f9c2 	bl	8005488 <USB_ReadPMA>
 8002104:	e020      	b.n	8002148 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210e:	b29b      	uxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	3306      	adds	r3, #6
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	4413      	add	r3, r2
 8002124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002130:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	6959      	ldr	r1, [r3, #20]
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	895a      	ldrh	r2, [r3, #10]
 8002142:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002144:	f003 f9a0 	bl	8005488 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	69da      	ldr	r2, [r3, #28]
 800214c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800214e:	441a      	add	r2, r3
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800215a:	441a      	add	r2, r3
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d004      	beq.n	8002172 <PCD_EP_ISR_Handler+0x4b0>
 8002168:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	429a      	cmp	r2, r3
 8002170:	d206      	bcs.n	8002180 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f004 ff85 	bl	8007088 <HAL_PCD_DataOutStageCallback>
 800217e:	e005      	b.n	800218c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002186:	4618      	mov	r0, r3
 8002188:	f001 fedc 	bl	8003f44 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800218c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002192:	2b00      	cmp	r3, #0
 8002194:	d07a      	beq.n	800228c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002196:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c4:	843b      	strh	r3, [r7, #32]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	441a      	add	r2, r3
 80021d4:	8c3b      	ldrh	r3, [r7, #32]
 80021d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021de:	b29b      	uxth	r3, r3
 80021e0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	78db      	ldrb	r3, [r3, #3]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d108      	bne.n	80021fc <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d146      	bne.n	8002280 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80021f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d141      	bne.n	8002280 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002204:	b29b      	uxth	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	3302      	adds	r3, #2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002224:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	8bfb      	ldrh	r3, [r7, #30]
 800222c:	429a      	cmp	r2, r3
 800222e:	d906      	bls.n	800223e <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	699a      	ldr	r2, [r3, #24]
 8002234:	8bfb      	ldrh	r3, [r7, #30]
 8002236:	1ad2      	subs	r2, r2, r3
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	619a      	str	r2, [r3, #24]
 800223c:	e002      	b.n	8002244 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d106      	bne.n	800225a <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f004 ff33 	bl	80070be <HAL_PCD_DataInStageCallback>
 8002258:	e018      	b.n	800228c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	8bfb      	ldrh	r3, [r7, #30]
 8002260:	441a      	add	r2, r3
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	8bfb      	ldrh	r3, [r7, #30]
 800226c:	441a      	add	r2, r3
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002278:	4618      	mov	r0, r3
 800227a:	f001 fe63 	bl	8003f44 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800227e:	e005      	b.n	800228c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002280:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002282:	461a      	mov	r2, r3
 8002284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f91b 	bl	80024c2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002294:	b29b      	uxth	r3, r3
 8002296:	b21b      	sxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	f6ff ad17 	blt.w	8001ccc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3738      	adds	r7, #56	; 0x38
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	4613      	mov	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d07e      	beq.n	80023be <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	3302      	adds	r3, #2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	8b7b      	ldrh	r3, [r7, #26]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d306      	bcc.n	8002302 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	699a      	ldr	r2, [r3, #24]
 80022f8:	8b7b      	ldrh	r3, [r7, #26]
 80022fa:	1ad2      	subs	r2, r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	619a      	str	r2, [r3, #24]
 8002300:	e002      	b.n	8002308 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d123      	bne.n	8002358 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232a:	833b      	strh	r3, [r7, #24]
 800232c:	8b3b      	ldrh	r3, [r7, #24]
 800232e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002332:	833b      	strh	r3, [r7, #24]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	441a      	add	r2, r3
 8002342:	8b3b      	ldrh	r3, [r7, #24]
 8002344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800234c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002354:	b29b      	uxth	r3, r3
 8002356:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01f      	beq.n	80023a2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237c:	82fb      	strh	r3, [r7, #22]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	441a      	add	r2, r3
 800238c:	8afb      	ldrh	r3, [r7, #22]
 800238e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800239e:	b29b      	uxth	r3, r3
 80023a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023a2:	8b7b      	ldrh	r3, [r7, #26]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8087 	beq.w	80024b8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	6959      	ldr	r1, [r3, #20]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	891a      	ldrh	r2, [r3, #8]
 80023b6:	8b7b      	ldrh	r3, [r7, #26]
 80023b8:	f003 f866 	bl	8005488 <USB_ReadPMA>
 80023bc:	e07c      	b.n	80024b8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	3306      	adds	r3, #6
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	699a      	ldr	r2, [r3, #24]
 80023ec:	8b7b      	ldrh	r3, [r7, #26]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d306      	bcc.n	8002400 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	8b7b      	ldrh	r3, [r7, #26]
 80023f8:	1ad2      	subs	r2, r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	619a      	str	r2, [r3, #24]
 80023fe:	e002      	b.n	8002406 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2200      	movs	r2, #0
 8002404:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d123      	bne.n	8002456 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002428:	83fb      	strh	r3, [r7, #30]
 800242a:	8bfb      	ldrh	r3, [r7, #30]
 800242c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002430:	83fb      	strh	r3, [r7, #30]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	441a      	add	r2, r3
 8002440:	8bfb      	ldrh	r3, [r7, #30]
 8002442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800244a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800244e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002452:	b29b      	uxth	r3, r3
 8002454:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245c:	2b00      	cmp	r3, #0
 800245e:	d11f      	bne.n	80024a0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247a:	83bb      	strh	r3, [r7, #28]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	441a      	add	r2, r3
 800248a:	8bbb      	ldrh	r3, [r7, #28]
 800248c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002498:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800249c:	b29b      	uxth	r3, r3
 800249e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024a0:	8b7b      	ldrh	r3, [r7, #26]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6959      	ldr	r1, [r3, #20]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	895a      	ldrh	r2, [r3, #10]
 80024b2:	8b7b      	ldrh	r3, [r7, #26]
 80024b4:	f002 ffe8 	bl	8005488 <USB_ReadPMA>
    }
  }

  return count;
 80024b8:	8b7b      	ldrh	r3, [r7, #26]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b092      	sub	sp, #72	; 0x48
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	4613      	mov	r3, r2
 80024ce:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8132 	beq.w	8002740 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	3302      	adds	r3, #2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002504:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800250c:	429a      	cmp	r2, r3
 800250e:	d906      	bls.n	800251e <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	699a      	ldr	r2, [r3, #24]
 8002514:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002516:	1ad2      	subs	r2, r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	619a      	str	r2, [r3, #24]
 800251c:	e002      	b.n	8002524 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d12c      	bne.n	8002586 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f004 fdc3 	bl	80070be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 822f 	beq.w	80029a2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800255a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255e:	827b      	strh	r3, [r7, #18]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	441a      	add	r2, r3
 800256e:	8a7b      	ldrh	r3, [r7, #18]
 8002570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800257c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002580:	b29b      	uxth	r3, r3
 8002582:	8013      	strh	r3, [r2, #0]
 8002584:	e20d      	b.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01f      	beq.n	80025d0 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	441a      	add	r2, r3
 80025ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	f040 81e3 	bne.w	80029a2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	695a      	ldr	r2, [r3, #20]
 80025e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025e2:	441a      	add	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	69da      	ldr	r2, [r3, #28]
 80025ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025ee:	441a      	add	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	6a1a      	ldr	r2, [r3, #32]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d309      	bcc.n	8002614 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	6a1a      	ldr	r2, [r3, #32]
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	1ad2      	subs	r2, r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	621a      	str	r2, [r3, #32]
 8002612:	e014      	b.n	800263e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d106      	bne.n	800262a <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 800261c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800261e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002628:	e009      	b.n	800263e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2200      	movs	r2, #0
 800263c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	785b      	ldrb	r3, [r3, #1]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d155      	bne.n	80026f2 <HAL_PCD_EP_DB_Transmit+0x230>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002654:	b29b      	uxth	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	4413      	add	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	011a      	lsls	r2, r3, #4
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4413      	add	r3, r2
 8002668:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	2b00      	cmp	r3, #0
 8002672:	d112      	bne.n	800269a <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800267e:	b29a      	uxth	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	801a      	strh	r2, [r3, #0]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800268e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002692:	b29a      	uxth	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	801a      	strh	r2, [r3, #0]
 8002698:	e047      	b.n	800272a <HAL_PCD_EP_DB_Transmit+0x268>
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	2b3e      	cmp	r3, #62	; 0x3e
 800269e:	d811      	bhi.n	80026c4 <HAL_PCD_EP_DB_Transmit+0x202>
 80026a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80026b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b2:	3301      	adds	r3, #1
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	029b      	lsls	r3, r3, #10
 80026bc:	b29a      	uxth	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	e032      	b.n	800272a <HAL_PCD_EP_DB_Transmit+0x268>
 80026c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <HAL_PCD_EP_DB_Transmit+0x218>
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	3b01      	subs	r3, #1
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	b29b      	uxth	r3, r3
 80026de:	029b      	lsls	r3, r3, #10
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	801a      	strh	r2, [r3, #0]
 80026f0:	e01b      	b.n	800272a <HAL_PCD_EP_DB_Transmit+0x268>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	785b      	ldrb	r3, [r3, #1]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d117      	bne.n	800272a <HAL_PCD_EP_DB_Transmit+0x268>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	623b      	str	r3, [r7, #32]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002708:	b29b      	uxth	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	4413      	add	r3, r2
 8002710:	623b      	str	r3, [r7, #32]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	011a      	lsls	r2, r3, #4
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	4413      	add	r3, r2
 800271c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002724:	b29a      	uxth	r2, r3
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	6959      	ldr	r1, [r3, #20]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	891a      	ldrh	r2, [r3, #8]
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	b29b      	uxth	r3, r3
 800273a:	f002 fe61 	bl	8005400 <USB_WritePMA>
 800273e:	e130      	b.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	3306      	adds	r3, #6
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002768:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002770:	429a      	cmp	r2, r3
 8002772:	d306      	bcc.n	8002782 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800277a:	1ad2      	subs	r2, r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	619a      	str	r2, [r3, #24]
 8002780:	e002      	b.n	8002788 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d12c      	bne.n	80027ea <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	4619      	mov	r1, r3
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f004 fc91 	bl	80070be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f040 80fd 	bne.w	80029a2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	441a      	add	r2, r3
 80027d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	8013      	strh	r3, [r2, #0]
 80027e8:	e0db      	b.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d11f      	bne.n	8002834 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800280a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	441a      	add	r2, r3
 800281e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800282c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002830:	b29b      	uxth	r3, r3
 8002832:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800283a:	2b01      	cmp	r3, #1
 800283c:	f040 80b1 	bne.w	80029a2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002846:	441a      	add	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002852:	441a      	add	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	6a1a      	ldr	r2, [r3, #32]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	429a      	cmp	r2, r3
 8002862:	d309      	bcc.n	8002878 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002870:	1ad2      	subs	r2, r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	621a      	str	r2, [r3, #32]
 8002876:	e014      	b.n	80028a2 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d106      	bne.n	800288e <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002880:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002882:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800288c:	e009      	b.n	80028a2 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2200      	movs	r2, #0
 8002898:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	785b      	ldrb	r3, [r3, #1]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d155      	bne.n	800295c <HAL_PCD_EP_DB_Transmit+0x49a>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	647b      	str	r3, [r7, #68]	; 0x44
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c4:	4413      	add	r3, r2
 80028c6:	647b      	str	r3, [r7, #68]	; 0x44
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	011a      	lsls	r2, r3, #4
 80028ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d0:	4413      	add	r3, r2
 80028d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028d6:	643b      	str	r3, [r7, #64]	; 0x40
 80028d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d112      	bne.n	8002904 <HAL_PCD_EP_DB_Transmit+0x442>
 80028de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ec:	801a      	strh	r2, [r3, #0]
 80028ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002900:	801a      	strh	r2, [r3, #0]
 8002902:	e044      	b.n	800298e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002906:	2b3e      	cmp	r3, #62	; 0x3e
 8002908:	d811      	bhi.n	800292e <HAL_PCD_EP_DB_Transmit+0x46c>
 800290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290c:	085b      	lsrs	r3, r3, #1
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_PCD_EP_DB_Transmit+0x45e>
 800291a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800291c:	3301      	adds	r3, #1
 800291e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002922:	b29b      	uxth	r3, r3
 8002924:	029b      	lsls	r3, r3, #10
 8002926:	b29a      	uxth	r2, r3
 8002928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292a:	801a      	strh	r2, [r3, #0]
 800292c:	e02f      	b.n	800298e <HAL_PCD_EP_DB_Transmit+0x4cc>
 800292e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <HAL_PCD_EP_DB_Transmit+0x482>
 800293e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002940:	3b01      	subs	r3, #1
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002946:	b29b      	uxth	r3, r3
 8002948:	029b      	lsls	r3, r3, #10
 800294a:	b29b      	uxth	r3, r3
 800294c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002954:	b29a      	uxth	r2, r3
 8002956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002958:	801a      	strh	r2, [r3, #0]
 800295a:	e018      	b.n	800298e <HAL_PCD_EP_DB_Transmit+0x4cc>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	785b      	ldrb	r3, [r3, #1]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d114      	bne.n	800298e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296c:	b29b      	uxth	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002972:	4413      	add	r3, r2
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	011a      	lsls	r2, r3, #4
 800297c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297e:	4413      	add	r3, r2
 8002980:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
 8002986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002988:	b29a      	uxth	r2, r3
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	6959      	ldr	r1, [r3, #20]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	895a      	ldrh	r2, [r3, #10]
 800299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299c:	b29b      	uxth	r3, r3
 800299e:	f002 fd2f 	bl	8005400 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029bc:	823b      	strh	r3, [r7, #16]
 80029be:	8a3b      	ldrh	r3, [r7, #16]
 80029c0:	f083 0310 	eor.w	r3, r3, #16
 80029c4:	823b      	strh	r3, [r7, #16]
 80029c6:	8a3b      	ldrh	r3, [r7, #16]
 80029c8:	f083 0320 	eor.w	r3, r3, #32
 80029cc:	823b      	strh	r3, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	441a      	add	r2, r3
 80029dc:	8a3b      	ldrh	r3, [r7, #16]
 80029de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3748      	adds	r7, #72	; 0x48
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	817b      	strh	r3, [r7, #10]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a0e:	897b      	ldrh	r3, [r7, #10]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a1a:	897b      	ldrh	r3, [r7, #10]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	e009      	b.n	8002a46 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a32:	897a      	ldrh	r2, [r7, #10]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4413      	add	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a46:	893b      	ldrh	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	80da      	strh	r2, [r3, #6]
 8002a5a:	e00b      	b.n	8002a74 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e26c      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8087 	beq.w	8002bae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa0:	4b92      	ldr	r3, [pc, #584]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d00c      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aac:	4b8f      	ldr	r3, [pc, #572]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d112      	bne.n	8002ade <HAL_RCC_OscConfig+0x5e>
 8002ab8:	4b8c      	ldr	r3, [pc, #560]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac4:	d10b      	bne.n	8002ade <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac6:	4b89      	ldr	r3, [pc, #548]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d06c      	beq.n	8002bac <HAL_RCC_OscConfig+0x12c>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d168      	bne.n	8002bac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e246      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x76>
 8002ae8:	4b80      	ldr	r3, [pc, #512]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a7f      	ldr	r2, [pc, #508]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	e02e      	b.n	8002b54 <HAL_RCC_OscConfig+0xd4>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x98>
 8002afe:	4b7b      	ldr	r3, [pc, #492]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a7a      	ldr	r2, [pc, #488]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b78      	ldr	r3, [pc, #480]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a77      	ldr	r2, [pc, #476]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e01d      	b.n	8002b54 <HAL_RCC_OscConfig+0xd4>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0xbc>
 8002b22:	4b72      	ldr	r3, [pc, #456]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a71      	ldr	r2, [pc, #452]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	4b6f      	ldr	r3, [pc, #444]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a6e      	ldr	r2, [pc, #440]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e00b      	b.n	8002b54 <HAL_RCC_OscConfig+0xd4>
 8002b3c:	4b6b      	ldr	r3, [pc, #428]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a6a      	ldr	r2, [pc, #424]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	4b68      	ldr	r3, [pc, #416]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a67      	ldr	r2, [pc, #412]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d013      	beq.n	8002b84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe f96c 	bl	8000e38 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b64:	f7fe f968 	bl	8000e38 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	; 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e1fa      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	4b5d      	ldr	r3, [pc, #372]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0xe4>
 8002b82:	e014      	b.n	8002bae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fe f958 	bl	8000e38 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7fe f954 	bl	8000e38 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e1e6      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9e:	4b53      	ldr	r3, [pc, #332]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x10c>
 8002baa:	e000      	b.n	8002bae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d063      	beq.n	8002c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bba:	4b4c      	ldr	r3, [pc, #304]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00b      	beq.n	8002bde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bc6:	4b49      	ldr	r3, [pc, #292]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d11c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x18c>
 8002bd2:	4b46      	ldr	r3, [pc, #280]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d116      	bne.n	8002c0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bde:	4b43      	ldr	r3, [pc, #268]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x176>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e1ba      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf6:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4939      	ldr	r1, [pc, #228]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0a:	e03a      	b.n	8002c82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d020      	beq.n	8002c56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c14:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <HAL_RCC_OscConfig+0x270>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe f90d 	bl	8000e38 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c22:	f7fe f909 	bl	8000e38 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e19b      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c34:	4b2d      	ldr	r3, [pc, #180]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c40:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4927      	ldr	r1, [pc, #156]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	600b      	str	r3, [r1, #0]
 8002c54:	e015      	b.n	8002c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c56:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_RCC_OscConfig+0x270>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7fe f8ec 	bl	8000e38 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c64:	f7fe f8e8 	bl	8000e38 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e17a      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d03a      	beq.n	8002d04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d019      	beq.n	8002cca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c96:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <HAL_RCC_OscConfig+0x274>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9c:	f7fe f8cc 	bl	8000e38 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca4:	f7fe f8c8 	bl	8000e38 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e15a      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f000 faa8 	bl	8003218 <RCC_Delay>
 8002cc8:	e01c      	b.n	8002d04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_RCC_OscConfig+0x274>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd0:	f7fe f8b2 	bl	8000e38 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd6:	e00f      	b.n	8002cf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd8:	f7fe f8ae 	bl	8000e38 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d908      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e140      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	42420000 	.word	0x42420000
 8002cf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf8:	4b9e      	ldr	r3, [pc, #632]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1e9      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80a6 	beq.w	8002e5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d12:	2300      	movs	r3, #0
 8002d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d16:	4b97      	ldr	r3, [pc, #604]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10d      	bne.n	8002d3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	4b94      	ldr	r3, [pc, #592]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	4a93      	ldr	r2, [pc, #588]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	61d3      	str	r3, [r2, #28]
 8002d2e:	4b91      	ldr	r3, [pc, #580]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	4b8e      	ldr	r3, [pc, #568]	; (8002f78 <HAL_RCC_OscConfig+0x4f8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d118      	bne.n	8002d7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4a:	4b8b      	ldr	r3, [pc, #556]	; (8002f78 <HAL_RCC_OscConfig+0x4f8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a8a      	ldr	r2, [pc, #552]	; (8002f78 <HAL_RCC_OscConfig+0x4f8>)
 8002d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d56:	f7fe f86f 	bl	8000e38 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5e:	f7fe f86b 	bl	8000e38 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b64      	cmp	r3, #100	; 0x64
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e0fd      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d70:	4b81      	ldr	r3, [pc, #516]	; (8002f78 <HAL_RCC_OscConfig+0x4f8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_OscConfig+0x312>
 8002d84:	4b7b      	ldr	r3, [pc, #492]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4a7a      	ldr	r2, [pc, #488]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6213      	str	r3, [r2, #32]
 8002d90:	e02d      	b.n	8002dee <HAL_RCC_OscConfig+0x36e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x334>
 8002d9a:	4b76      	ldr	r3, [pc, #472]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4a75      	ldr	r2, [pc, #468]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	6213      	str	r3, [r2, #32]
 8002da6:	4b73      	ldr	r3, [pc, #460]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4a72      	ldr	r2, [pc, #456]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002dac:	f023 0304 	bic.w	r3, r3, #4
 8002db0:	6213      	str	r3, [r2, #32]
 8002db2:	e01c      	b.n	8002dee <HAL_RCC_OscConfig+0x36e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b05      	cmp	r3, #5
 8002dba:	d10c      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x356>
 8002dbc:	4b6d      	ldr	r3, [pc, #436]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4a6c      	ldr	r2, [pc, #432]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002dc2:	f043 0304 	orr.w	r3, r3, #4
 8002dc6:	6213      	str	r3, [r2, #32]
 8002dc8:	4b6a      	ldr	r3, [pc, #424]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	4a69      	ldr	r2, [pc, #420]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6213      	str	r3, [r2, #32]
 8002dd4:	e00b      	b.n	8002dee <HAL_RCC_OscConfig+0x36e>
 8002dd6:	4b67      	ldr	r3, [pc, #412]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	4a66      	ldr	r2, [pc, #408]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	6213      	str	r3, [r2, #32]
 8002de2:	4b64      	ldr	r3, [pc, #400]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	4a63      	ldr	r2, [pc, #396]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	f023 0304 	bic.w	r3, r3, #4
 8002dec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d015      	beq.n	8002e22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df6:	f7fe f81f 	bl	8000e38 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe f81b 	bl	8000e38 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0ab      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e14:	4b57      	ldr	r3, [pc, #348]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0ee      	beq.n	8002dfe <HAL_RCC_OscConfig+0x37e>
 8002e20:	e014      	b.n	8002e4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e22:	f7fe f809 	bl	8000e38 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fe f805 	bl	8000e38 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e095      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e40:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1ee      	bne.n	8002e2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e4c:	7dfb      	ldrb	r3, [r7, #23]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d105      	bne.n	8002e5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e52:	4b48      	ldr	r3, [pc, #288]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	4a47      	ldr	r2, [pc, #284]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8081 	beq.w	8002f6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e68:	4b42      	ldr	r3, [pc, #264]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 030c 	and.w	r3, r3, #12
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d061      	beq.n	8002f38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d146      	bne.n	8002f0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7c:	4b3f      	ldr	r3, [pc, #252]	; (8002f7c <HAL_RCC_OscConfig+0x4fc>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e82:	f7fd ffd9 	bl	8000e38 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8a:	f7fd ffd5 	bl	8000e38 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e067      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9c:	4b35      	ldr	r3, [pc, #212]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f0      	bne.n	8002e8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb0:	d108      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eb2:	4b30      	ldr	r3, [pc, #192]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	492d      	ldr	r1, [pc, #180]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a19      	ldr	r1, [r3, #32]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	4927      	ldr	r1, [pc, #156]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002edc:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <HAL_RCC_OscConfig+0x4fc>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee2:	f7fd ffa9 	bl	8000e38 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eea:	f7fd ffa5 	bl	8000e38 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e037      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002efc:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x46a>
 8002f08:	e02f      	b.n	8002f6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <HAL_RCC_OscConfig+0x4fc>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fd ff92 	bl	8000e38 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fd ff8e 	bl	8000e38 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e020      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x498>
 8002f36:	e018      	b.n	8002f6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e013      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCC_OscConfig+0x4f4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	42420060 	.word	0x42420060

08002f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0d0      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f94:	4b6a      	ldr	r3, [pc, #424]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d910      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b67      	ldr	r3, [pc, #412]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 0207 	bic.w	r2, r3, #7
 8002faa:	4965      	ldr	r1, [pc, #404]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b63      	ldr	r3, [pc, #396]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0b8      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d020      	beq.n	8003012 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fdc:	4b59      	ldr	r3, [pc, #356]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4a58      	ldr	r2, [pc, #352]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fe6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff4:	4b53      	ldr	r3, [pc, #332]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4a52      	ldr	r2, [pc, #328]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ffe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003000:	4b50      	ldr	r3, [pc, #320]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	494d      	ldr	r1, [pc, #308]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d040      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d115      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e07f      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303e:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e073      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304e:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e06b      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305e:	4b39      	ldr	r3, [pc, #228]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f023 0203 	bic.w	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4936      	ldr	r1, [pc, #216]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003070:	f7fd fee2 	bl	8000e38 <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	e00a      	b.n	800308e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003078:	f7fd fede 	bl	8000e38 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	; 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e053      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 020c 	and.w	r2, r3, #12
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d1eb      	bne.n	8003078 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a0:	4b27      	ldr	r3, [pc, #156]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d210      	bcs.n	80030d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b24      	ldr	r3, [pc, #144]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 0207 	bic.w	r2, r3, #7
 80030b6:	4922      	ldr	r1, [pc, #136]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b20      	ldr	r3, [pc, #128]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e032      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4916      	ldr	r1, [pc, #88]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	490e      	ldr	r1, [pc, #56]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800310e:	f000 f821 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8003112:	4601      	mov	r1, r0
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <HAL_RCC_ClockConfig+0x1c8>)
 8003120:	5cd3      	ldrb	r3, [r2, r3]
 8003122:	fa21 f303 	lsr.w	r3, r1, r3
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <HAL_RCC_ClockConfig+0x1cc>)
 8003128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_RCC_ClockConfig+0x1d0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd fe40 	bl	8000db4 <HAL_InitTick>

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40022000 	.word	0x40022000
 8003144:	40021000 	.word	0x40021000
 8003148:	0800765c 	.word	0x0800765c
 800314c:	20000000 	.word	0x20000000
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003154:	b490      	push	{r4, r7}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800315a:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <HAL_RCC_GetSysClockFreq+0xb0>)
 800315c:	1d3c      	adds	r4, r7, #4
 800315e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003164:	4b28      	ldr	r3, [pc, #160]	; (8003208 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	2300      	movs	r3, #0
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800317e:	4b23      	ldr	r3, [pc, #140]	; (800320c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b04      	cmp	r3, #4
 800318c:	d002      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x40>
 800318e:	2b08      	cmp	r3, #8
 8003190:	d003      	beq.n	800319a <HAL_RCC_GetSysClockFreq+0x46>
 8003192:	e02d      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003194:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003196:	623b      	str	r3, [r7, #32]
      break;
 8003198:	e02d      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	0c9b      	lsrs	r3, r3, #18
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031a6:	4413      	add	r3, r2
 80031a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d013      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031b8:	4b14      	ldr	r3, [pc, #80]	; (800320c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	0c5b      	lsrs	r3, r3, #17
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031c6:	4413      	add	r3, r2
 80031c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	4a0f      	ldr	r2, [pc, #60]	; (8003210 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031d2:	fb02 f203 	mul.w	r2, r2, r3
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
 80031de:	e004      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031e4:	fb02 f303 	mul.w	r3, r2, r3
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	623b      	str	r3, [r7, #32]
      break;
 80031ee:	e002      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031f0:	4b07      	ldr	r3, [pc, #28]	; (8003210 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031f2:	623b      	str	r3, [r7, #32]
      break;
 80031f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031f6:	6a3b      	ldr	r3, [r7, #32]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3728      	adds	r7, #40	; 0x28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc90      	pop	{r4, r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	08007608 	.word	0x08007608
 8003208:	08007618 	.word	0x08007618
 800320c:	40021000 	.word	0x40021000
 8003210:	007a1200 	.word	0x007a1200
 8003214:	003d0900 	.word	0x003d0900

08003218 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <RCC_Delay+0x34>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <RCC_Delay+0x38>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	0a5b      	lsrs	r3, r3, #9
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003234:	bf00      	nop
  }
  while (Delay --);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1e5a      	subs	r2, r3, #1
 800323a:	60fa      	str	r2, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f9      	bne.n	8003234 <RCC_Delay+0x1c>
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000000 	.word	0x20000000
 8003250:	10624dd3 	.word	0x10624dd3

08003254 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d07d      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003270:	2300      	movs	r3, #0
 8003272:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003274:	4b4f      	ldr	r3, [pc, #316]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10d      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003280:	4b4c      	ldr	r3, [pc, #304]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	4a4b      	ldr	r2, [pc, #300]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328a:	61d3      	str	r3, [r2, #28]
 800328c:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003298:	2301      	movs	r3, #1
 800329a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	4b46      	ldr	r3, [pc, #280]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d118      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a8:	4b43      	ldr	r3, [pc, #268]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a42      	ldr	r2, [pc, #264]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b4:	f7fd fdc0 	bl	8000e38 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ba:	e008      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032bc:	f7fd fdbc 	bl	8000e38 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	; 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e06d      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ce:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032da:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d02e      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d027      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032f8:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003300:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003302:	4b2e      	ldr	r3, [pc, #184]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003308:	4b2c      	ldr	r3, [pc, #176]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800330e:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d014      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7fd fd8b 	bl	8000e38 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003324:	e00a      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003326:	f7fd fd87 	bl	8000e38 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f241 3288 	movw	r2, #5000	; 0x1388
 8003334:	4293      	cmp	r3, r2
 8003336:	d901      	bls.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e036      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0ee      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003348:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4917      	ldr	r1, [pc, #92]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003356:	4313      	orrs	r3, r2
 8003358:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d105      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800336a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	490b      	ldr	r1, [pc, #44]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003396:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	4904      	ldr	r1, [pc, #16]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40007000 	.word	0x40007000
 80033bc:	42420440 	.word	0x42420440

080033c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80033c0:	b084      	sub	sp, #16
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	f107 0014 	add.w	r0, r7, #20
 80033ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	b004      	add	sp, #16
 80033de:	4770      	bx	lr

080033e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80033f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80033f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003414:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003418:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	b29b      	uxth	r3, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	b29b      	uxth	r3, r3
 800342a:	4013      	ands	r3, r2
 800342c:	b29a      	uxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003458:	b084      	sub	sp, #16
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	f107 0014 	add.w	r0, r7, #20
 8003466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	b004      	add	sp, #16
 8003496:	4770      	bx	lr

08003498 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003498:	b480      	push	{r7}
 800349a:	b09b      	sub	sp, #108	; 0x6c
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80034ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	78db      	ldrb	r3, [r3, #3]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d81f      	bhi.n	800350a <USB_ActivateEndpoint+0x72>
 80034ca:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <USB_ActivateEndpoint+0x38>)
 80034cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d0:	080034e1 	.word	0x080034e1
 80034d4:	080034fd 	.word	0x080034fd
 80034d8:	08003513 	.word	0x08003513
 80034dc:	080034ef 	.word	0x080034ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80034e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80034e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80034ec:	e012      	b.n	8003514 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80034ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80034f2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80034f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80034fa:	e00b      	b.n	8003514 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80034fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003500:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003504:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003508:	e004      	b.n	8003514 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003510:	e000      	b.n	8003514 <USB_ActivateEndpoint+0x7c>
      break;
 8003512:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	441a      	add	r2, r3
 800351e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800352a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800352e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003532:	b29b      	uxth	r3, r3
 8003534:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354c:	b29a      	uxth	r2, r3
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
 8003554:	4313      	orrs	r3, r2
 8003556:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	441a      	add	r2, r3
 8003564:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800356c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003578:	b29b      	uxth	r3, r3
 800357a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	7b1b      	ldrb	r3, [r3, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	f040 8149 	bne.w	8003818 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	785b      	ldrb	r3, [r3, #1]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8084 	beq.w	8003698 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800359a:	b29b      	uxth	r3, r3
 800359c:	461a      	mov	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	4413      	add	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	011a      	lsls	r2, r3, #4
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	88db      	ldrh	r3, [r3, #6]
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	81fb      	strh	r3, [r7, #14]
 80035d2:	89fb      	ldrh	r3, [r7, #14]
 80035d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <USB_ActivateEndpoint+0x17c>
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f2:	81bb      	strh	r3, [r7, #12]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	89bb      	ldrh	r3, [r7, #12]
 8003600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800360c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003610:	b29b      	uxth	r3, r3
 8003612:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	78db      	ldrb	r3, [r3, #3]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d020      	beq.n	800365e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003632:	813b      	strh	r3, [r7, #8]
 8003634:	893b      	ldrh	r3, [r7, #8]
 8003636:	f083 0320 	eor.w	r3, r3, #32
 800363a:	813b      	strh	r3, [r7, #8]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	441a      	add	r2, r3
 8003646:	893b      	ldrh	r3, [r7, #8]
 8003648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800364c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003658:	b29b      	uxth	r3, r3
 800365a:	8013      	strh	r3, [r2, #0]
 800365c:	e27f      	b.n	8003b5e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	b29b      	uxth	r3, r3
 800366c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003674:	817b      	strh	r3, [r7, #10]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	441a      	add	r2, r3
 8003680:	897b      	ldrh	r3, [r7, #10]
 8003682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800368a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003692:	b29b      	uxth	r3, r3
 8003694:	8013      	strh	r3, [r2, #0]
 8003696:	e262      	b.n	8003b5e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a8:	4413      	add	r3, r2
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	011a      	lsls	r2, r3, #4
 80036b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	88db      	ldrh	r3, [r3, #6]
 80036c0:	085b      	lsrs	r3, r3, #1
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ca:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	4413      	add	r3, r2
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	011a      	lsls	r2, r3, #4
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	4413      	add	r3, r2
 80036ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036ee:	623b      	str	r3, [r7, #32]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d112      	bne.n	800371e <USB_ActivateEndpoint+0x286>
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003702:	b29a      	uxth	r2, r3
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	801a      	strh	r2, [r3, #0]
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003716:	b29a      	uxth	r2, r3
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	801a      	strh	r2, [r3, #0]
 800371c:	e02f      	b.n	800377e <USB_ActivateEndpoint+0x2e6>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b3e      	cmp	r3, #62	; 0x3e
 8003724:	d813      	bhi.n	800374e <USB_ActivateEndpoint+0x2b6>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	085b      	lsrs	r3, r3, #1
 800372c:	663b      	str	r3, [r7, #96]	; 0x60
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <USB_ActivateEndpoint+0x2a8>
 800373a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800373c:	3301      	adds	r3, #1
 800373e:	663b      	str	r3, [r7, #96]	; 0x60
 8003740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003742:	b29b      	uxth	r3, r3
 8003744:	029b      	lsls	r3, r3, #10
 8003746:	b29a      	uxth	r2, r3
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	801a      	strh	r2, [r3, #0]
 800374c:	e017      	b.n	800377e <USB_ActivateEndpoint+0x2e6>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	663b      	str	r3, [r7, #96]	; 0x60
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	2b00      	cmp	r3, #0
 8003760:	d102      	bne.n	8003768 <USB_ActivateEndpoint+0x2d0>
 8003762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003764:	3b01      	subs	r3, #1
 8003766:	663b      	str	r3, [r7, #96]	; 0x60
 8003768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800376a:	b29b      	uxth	r3, r3
 800376c:	029b      	lsls	r3, r3, #10
 800376e:	b29b      	uxth	r3, r3
 8003770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003778:	b29a      	uxth	r2, r3
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	83fb      	strh	r3, [r7, #30]
 800378c:	8bfb      	ldrh	r3, [r7, #30]
 800378e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01b      	beq.n	80037ce <USB_ActivateEndpoint+0x336>
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ac:	83bb      	strh	r3, [r7, #28]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	441a      	add	r2, r3
 80037b8:	8bbb      	ldrh	r3, [r7, #28]
 80037ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	b29b      	uxth	r3, r3
 80037dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e4:	837b      	strh	r3, [r7, #26]
 80037e6:	8b7b      	ldrh	r3, [r7, #26]
 80037e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80037ec:	837b      	strh	r3, [r7, #26]
 80037ee:	8b7b      	ldrh	r3, [r7, #26]
 80037f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80037f4:	837b      	strh	r3, [r7, #26]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	441a      	add	r2, r3
 8003800:	8b7b      	ldrh	r3, [r7, #26]
 8003802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800380a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003812:	b29b      	uxth	r3, r3
 8003814:	8013      	strh	r3, [r2, #0]
 8003816:	e1a2      	b.n	8003b5e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	441a      	add	r2, r3
 800383c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003848:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800384c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003850:	b29b      	uxth	r3, r3
 8003852:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	65bb      	str	r3, [r7, #88]	; 0x58
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800385e:	b29b      	uxth	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003864:	4413      	add	r3, r2
 8003866:	65bb      	str	r3, [r7, #88]	; 0x58
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	011a      	lsls	r2, r3, #4
 800386e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003870:	4413      	add	r3, r2
 8003872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003876:	657b      	str	r3, [r7, #84]	; 0x54
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	891b      	ldrh	r3, [r3, #8]
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	b29b      	uxth	r3, r3
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	653b      	str	r3, [r7, #80]	; 0x50
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003892:	b29b      	uxth	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003898:	4413      	add	r3, r2
 800389a:	653b      	str	r3, [r7, #80]	; 0x50
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	011a      	lsls	r2, r3, #4
 80038a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80038aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	895b      	ldrh	r3, [r3, #10]
 80038b0:	085b      	lsrs	r3, r3, #1
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	785b      	ldrb	r3, [r3, #1]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f040 8091 	bne.w	80039e8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80038d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80038d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01b      	beq.n	8003916 <USB_ActivateEndpoint+0x47e>
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	441a      	add	r2, r3
 8003900:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800390a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800390e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003912:	b29b      	uxth	r3, r3
 8003914:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	873b      	strh	r3, [r7, #56]	; 0x38
 8003924:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d01b      	beq.n	8003966 <USB_ActivateEndpoint+0x4ce>
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003944:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800395e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003962:	b29b      	uxth	r3, r3
 8003964:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	b29b      	uxth	r3, r3
 8003974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800397e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003980:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003984:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003986:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003988:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800398c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	441a      	add	r2, r3
 8003998:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800399a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800399e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c4:	867b      	strh	r3, [r7, #50]	; 0x32
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	441a      	add	r2, r3
 80039d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80039d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	8013      	strh	r3, [r2, #0]
 80039e6:	e0ba      	b.n	8003b5e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80039f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80039fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01d      	beq.n	8003a40 <USB_ActivateEndpoint+0x5a8>
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	441a      	add	r2, r3
 8003a28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003a50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01d      	beq.n	8003a98 <USB_ActivateEndpoint+0x600>
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	441a      	add	r2, r3
 8003a80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	78db      	ldrb	r3, [r3, #3]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d024      	beq.n	8003aea <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003aba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003abe:	f083 0320 	eor.w	r3, r3, #32
 8003ac2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	441a      	add	r2, r3
 8003ad0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	8013      	strh	r3, [r2, #0]
 8003ae8:	e01d      	b.n	8003b26 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	441a      	add	r2, r3
 8003b0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	441a      	add	r2, r3
 8003b48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003b5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	376c      	adds	r7, #108	; 0x6c
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b08d      	sub	sp, #52	; 0x34
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	7b1b      	ldrb	r3, [r3, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f040 808e 	bne.w	8003c9c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	785b      	ldrb	r3, [r3, #1]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d044      	beq.n	8003c12 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	81bb      	strh	r3, [r7, #12]
 8003b96:	89bb      	ldrh	r3, [r7, #12]
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01b      	beq.n	8003bd8 <USB_DeactivateEndpoint+0x6c>
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb6:	817b      	strh	r3, [r7, #10]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	441a      	add	r2, r3
 8003bc2:	897b      	ldrh	r3, [r7, #10]
 8003bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bee:	813b      	strh	r3, [r7, #8]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	441a      	add	r2, r3
 8003bfa:	893b      	ldrh	r3, [r7, #8]
 8003bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	8013      	strh	r3, [r2, #0]
 8003c10:	e192      	b.n	8003f38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	827b      	strh	r3, [r7, #18]
 8003c20:	8a7b      	ldrh	r3, [r7, #18]
 8003c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d01b      	beq.n	8003c62 <USB_DeactivateEndpoint+0xf6>
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c40:	823b      	strh	r3, [r7, #16]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	441a      	add	r2, r3
 8003c4c:	8a3b      	ldrh	r3, [r7, #16]
 8003c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c78:	81fb      	strh	r3, [r7, #14]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	441a      	add	r2, r3
 8003c84:	89fb      	ldrh	r3, [r7, #14]
 8003c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	8013      	strh	r3, [r2, #0]
 8003c9a:	e14d      	b.n	8003f38 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f040 80a5 	bne.w	8003df0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	843b      	strh	r3, [r7, #32]
 8003cb4:	8c3b      	ldrh	r3, [r7, #32]
 8003cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01b      	beq.n	8003cf6 <USB_DeactivateEndpoint+0x18a>
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd4:	83fb      	strh	r3, [r7, #30]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	441a      	add	r2, r3
 8003ce0:	8bfb      	ldrh	r3, [r7, #30]
 8003ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	83bb      	strh	r3, [r7, #28]
 8003d04:	8bbb      	ldrh	r3, [r7, #28]
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01b      	beq.n	8003d46 <USB_DeactivateEndpoint+0x1da>
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d24:	837b      	strh	r3, [r7, #26]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	441a      	add	r2, r3
 8003d30:	8b7b      	ldrh	r3, [r7, #26]
 8003d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5c:	833b      	strh	r3, [r7, #24]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	441a      	add	r2, r3
 8003d68:	8b3b      	ldrh	r3, [r7, #24]
 8003d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d94:	82fb      	strh	r3, [r7, #22]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	441a      	add	r2, r3
 8003da0:	8afb      	ldrh	r3, [r7, #22]
 8003da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dcc:	82bb      	strh	r3, [r7, #20]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	441a      	add	r2, r3
 8003dd8:	8abb      	ldrh	r3, [r7, #20]
 8003dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	8013      	strh	r3, [r2, #0]
 8003dee:	e0a3      	b.n	8003f38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003dfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01b      	beq.n	8003e40 <USB_DeactivateEndpoint+0x2d4>
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	441a      	add	r2, r3
 8003e2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003e4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01b      	beq.n	8003e90 <USB_DeactivateEndpoint+0x324>
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	441a      	add	r2, r3
 8003e7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	441a      	add	r2, r3
 8003eb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ede:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	441a      	add	r2, r3
 8003eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	847b      	strh	r3, [r7, #34]	; 0x22
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	441a      	add	r2, r3
 8003f22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3734      	adds	r7, #52	; 0x34
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b0c4      	sub	sp, #272	; 0x110
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	6018      	str	r0, [r3, #0]
 8003f4e:	463b      	mov	r3, r7
 8003f50:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f52:	463b      	mov	r3, r7
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	785b      	ldrb	r3, [r3, #1]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	f040 8557 	bne.w	8004a0c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003f5e:	463b      	mov	r3, r7
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699a      	ldr	r2, [r3, #24]
 8003f64:	463b      	mov	r3, r7
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d905      	bls.n	8003f7a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003f6e:	463b      	mov	r3, r7
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003f78:	e004      	b.n	8003f84 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003f7a:	463b      	mov	r3, r7
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003f84:	463b      	mov	r3, r7
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	7b1b      	ldrb	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d12c      	bne.n	8003fe8 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003f8e:	463b      	mov	r3, r7
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6959      	ldr	r1, [r3, #20]
 8003f94:	463b      	mov	r3, r7
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	88da      	ldrh	r2, [r3, #6]
 8003f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	1d38      	adds	r0, r7, #4
 8003fa2:	6800      	ldr	r0, [r0, #0]
 8003fa4:	f001 fa2c 	bl	8005400 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003fa8:	1d3b      	adds	r3, r7, #4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	1d3b      	adds	r3, r7, #4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	463b      	mov	r3, r7
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	011a      	lsls	r2, r3, #4
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003fd0:	f107 0310 	add.w	r3, r7, #16
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	f107 0310 	add.w	r3, r7, #16
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	801a      	strh	r2, [r3, #0]
 8003fe4:	f000 bcdd 	b.w	80049a2 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003fe8:	463b      	mov	r3, r7
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	78db      	ldrb	r3, [r3, #3]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	f040 8347 	bne.w	8004682 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003ff4:	463b      	mov	r3, r7
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6a1a      	ldr	r2, [r3, #32]
 8003ffa:	463b      	mov	r3, r7
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	429a      	cmp	r2, r3
 8004002:	f240 82eb 	bls.w	80045dc <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	463b      	mov	r3, r7
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	b29b      	uxth	r3, r3
 8004018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004020:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004024:	1d3b      	adds	r3, r7, #4
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	463b      	mov	r3, r7
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	441a      	add	r2, r3
 8004032:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800403a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800403e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004046:	b29b      	uxth	r3, r3
 8004048:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800404a:	463b      	mov	r3, r7
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004054:	1ad2      	subs	r2, r2, r3
 8004056:	463b      	mov	r3, r7
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800405c:	1d3b      	adds	r3, r7, #4
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	463b      	mov	r3, r7
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b29b      	uxth	r3, r3
 800406e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8159 	beq.w	800432a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004078:	1d3b      	adds	r3, r7, #4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
 800407e:	463b      	mov	r3, r7
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	785b      	ldrb	r3, [r3, #1]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d164      	bne.n	8004152 <USB_EPStartXfer+0x20e>
 8004088:	1d3b      	adds	r3, r7, #4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800408e:	1d3b      	adds	r3, r7, #4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004096:	b29b      	uxth	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	4413      	add	r3, r2
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a0:	463b      	mov	r3, r7
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	011a      	lsls	r2, r3, #4
 80040a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040aa:	4413      	add	r3, r2
 80040ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d112      	bne.n	80040e0 <USB_EPStartXfer+0x19c>
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	801a      	strh	r2, [r3, #0]
 80040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d8:	b29a      	uxth	r2, r3
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	801a      	strh	r2, [r3, #0]
 80040de:	e054      	b.n	800418a <USB_EPStartXfer+0x246>
 80040e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e4:	2b3e      	cmp	r3, #62	; 0x3e
 80040e6:	d817      	bhi.n	8004118 <USB_EPStartXfer+0x1d4>
 80040e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ec:	085b      	lsrs	r3, r3, #1
 80040ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80040f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d004      	beq.n	8004108 <USB_EPStartXfer+0x1c4>
 80040fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004102:	3301      	adds	r3, #1
 8004104:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800410c:	b29b      	uxth	r3, r3
 800410e:	029b      	lsls	r3, r3, #10
 8004110:	b29a      	uxth	r2, r3
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	801a      	strh	r2, [r3, #0]
 8004116:	e038      	b.n	800418a <USB_EPStartXfer+0x246>
 8004118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	2b00      	cmp	r3, #0
 800412c:	d104      	bne.n	8004138 <USB_EPStartXfer+0x1f4>
 800412e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004132:	3b01      	subs	r3, #1
 8004134:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800413c:	b29b      	uxth	r3, r3
 800413e:	029b      	lsls	r3, r3, #10
 8004140:	b29b      	uxth	r3, r3
 8004142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800414a:	b29a      	uxth	r2, r3
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	801a      	strh	r2, [r3, #0]
 8004150:	e01b      	b.n	800418a <USB_EPStartXfer+0x246>
 8004152:	463b      	mov	r3, r7
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d116      	bne.n	800418a <USB_EPStartXfer+0x246>
 800415c:	1d3b      	adds	r3, r7, #4
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004164:	b29b      	uxth	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416a:	4413      	add	r3, r2
 800416c:	637b      	str	r3, [r7, #52]	; 0x34
 800416e:	463b      	mov	r3, r7
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	011a      	lsls	r2, r3, #4
 8004176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004178:	4413      	add	r3, r2
 800417a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800417e:	633b      	str	r3, [r7, #48]	; 0x30
 8004180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004184:	b29a      	uxth	r2, r3
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800418a:	463b      	mov	r3, r7
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	895b      	ldrh	r3, [r3, #10]
 8004190:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004194:	463b      	mov	r3, r7
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6959      	ldr	r1, [r3, #20]
 800419a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80041a4:	1d38      	adds	r0, r7, #4
 80041a6:	6800      	ldr	r0, [r0, #0]
 80041a8:	f001 f92a 	bl	8005400 <USB_WritePMA>
            ep->xfer_buff += len;
 80041ac:	463b      	mov	r3, r7
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b6:	441a      	add	r2, r3
 80041b8:	463b      	mov	r3, r7
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80041be:	463b      	mov	r3, r7
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a1a      	ldr	r2, [r3, #32]
 80041c4:	463b      	mov	r3, r7
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d909      	bls.n	80041e2 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80041ce:	463b      	mov	r3, r7
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6a1a      	ldr	r2, [r3, #32]
 80041d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d8:	1ad2      	subs	r2, r2, r3
 80041da:	463b      	mov	r3, r7
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	621a      	str	r2, [r3, #32]
 80041e0:	e008      	b.n	80041f4 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80041e2:	463b      	mov	r3, r7
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80041ec:	463b      	mov	r3, r7
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2200      	movs	r2, #0
 80041f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80041f4:	463b      	mov	r3, r7
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	785b      	ldrb	r3, [r3, #1]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d164      	bne.n	80042c8 <USB_EPStartXfer+0x384>
 80041fe:	1d3b      	adds	r3, r7, #4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800420c:	b29b      	uxth	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	4413      	add	r3, r2
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	463b      	mov	r3, r7
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	011a      	lsls	r2, r3, #4
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	4413      	add	r3, r2
 8004222:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004226:	61bb      	str	r3, [r7, #24]
 8004228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d112      	bne.n	8004256 <USB_EPStartXfer+0x312>
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800423a:	b29a      	uxth	r2, r3
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	801a      	strh	r2, [r3, #0]
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800424a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800424e:	b29a      	uxth	r2, r3
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	801a      	strh	r2, [r3, #0]
 8004254:	e057      	b.n	8004306 <USB_EPStartXfer+0x3c2>
 8004256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800425a:	2b3e      	cmp	r3, #62	; 0x3e
 800425c:	d817      	bhi.n	800428e <USB_EPStartXfer+0x34a>
 800425e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <USB_EPStartXfer+0x33a>
 8004274:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004278:	3301      	adds	r3, #1
 800427a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800427e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004282:	b29b      	uxth	r3, r3
 8004284:	029b      	lsls	r3, r3, #10
 8004286:	b29a      	uxth	r2, r3
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	801a      	strh	r2, [r3, #0]
 800428c:	e03b      	b.n	8004306 <USB_EPStartXfer+0x3c2>
 800428e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d104      	bne.n	80042ae <USB_EPStartXfer+0x36a>
 80042a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80042a8:	3b01      	subs	r3, #1
 80042aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80042ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	029b      	lsls	r3, r3, #10
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	801a      	strh	r2, [r3, #0]
 80042c6:	e01e      	b.n	8004306 <USB_EPStartXfer+0x3c2>
 80042c8:	463b      	mov	r3, r7
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	785b      	ldrb	r3, [r3, #1]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d119      	bne.n	8004306 <USB_EPStartXfer+0x3c2>
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
 80042d8:	1d3b      	adds	r3, r7, #4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	4413      	add	r3, r2
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ea:	463b      	mov	r3, r7
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	011a      	lsls	r2, r3, #4
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	4413      	add	r3, r2
 80042f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042fa:	623b      	str	r3, [r7, #32]
 80042fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004300:	b29a      	uxth	r2, r3
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004306:	463b      	mov	r3, r7
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	891b      	ldrh	r3, [r3, #8]
 800430c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004310:	463b      	mov	r3, r7
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6959      	ldr	r1, [r3, #20]
 8004316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431a:	b29b      	uxth	r3, r3
 800431c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004320:	1d38      	adds	r0, r7, #4
 8004322:	6800      	ldr	r0, [r0, #0]
 8004324:	f001 f86c 	bl	8005400 <USB_WritePMA>
 8004328:	e33b      	b.n	80049a2 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800432a:	463b      	mov	r3, r7
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	785b      	ldrb	r3, [r3, #1]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d164      	bne.n	80043fe <USB_EPStartXfer+0x4ba>
 8004334:	1d3b      	adds	r3, r7, #4
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800433a:	1d3b      	adds	r3, r7, #4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004342:	b29b      	uxth	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004348:	4413      	add	r3, r2
 800434a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800434c:	463b      	mov	r3, r7
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	011a      	lsls	r2, r3, #4
 8004354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004356:	4413      	add	r3, r2
 8004358:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800435c:	64bb      	str	r3, [r7, #72]	; 0x48
 800435e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d112      	bne.n	800438c <USB_EPStartXfer+0x448>
 8004366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004370:	b29a      	uxth	r2, r3
 8004372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004374:	801a      	strh	r2, [r3, #0]
 8004376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004384:	b29a      	uxth	r2, r3
 8004386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	e057      	b.n	800443c <USB_EPStartXfer+0x4f8>
 800438c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004390:	2b3e      	cmp	r3, #62	; 0x3e
 8004392:	d817      	bhi.n	80043c4 <USB_EPStartXfer+0x480>
 8004394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004398:	085b      	lsrs	r3, r3, #1
 800439a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800439e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d004      	beq.n	80043b4 <USB_EPStartXfer+0x470>
 80043aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ae:	3301      	adds	r3, #1
 80043b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80043b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	029b      	lsls	r3, r3, #10
 80043bc:	b29a      	uxth	r2, r3
 80043be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	e03b      	b.n	800443c <USB_EPStartXfer+0x4f8>
 80043c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80043ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d104      	bne.n	80043e4 <USB_EPStartXfer+0x4a0>
 80043da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043de:	3b01      	subs	r3, #1
 80043e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80043e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	029b      	lsls	r3, r3, #10
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043fa:	801a      	strh	r2, [r3, #0]
 80043fc:	e01e      	b.n	800443c <USB_EPStartXfer+0x4f8>
 80043fe:	463b      	mov	r3, r7
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d119      	bne.n	800443c <USB_EPStartXfer+0x4f8>
 8004408:	1d3b      	adds	r3, r7, #4
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	657b      	str	r3, [r7, #84]	; 0x54
 800440e:	1d3b      	adds	r3, r7, #4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004416:	b29b      	uxth	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441c:	4413      	add	r3, r2
 800441e:	657b      	str	r3, [r7, #84]	; 0x54
 8004420:	463b      	mov	r3, r7
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	011a      	lsls	r2, r3, #4
 8004428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442a:	4413      	add	r3, r2
 800442c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004430:	653b      	str	r3, [r7, #80]	; 0x50
 8004432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004436:	b29a      	uxth	r2, r3
 8004438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800443a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800443c:	463b      	mov	r3, r7
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	891b      	ldrh	r3, [r3, #8]
 8004442:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004446:	463b      	mov	r3, r7
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6959      	ldr	r1, [r3, #20]
 800444c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004450:	b29b      	uxth	r3, r3
 8004452:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004456:	1d38      	adds	r0, r7, #4
 8004458:	6800      	ldr	r0, [r0, #0]
 800445a:	f000 ffd1 	bl	8005400 <USB_WritePMA>
            ep->xfer_buff += len;
 800445e:	463b      	mov	r3, r7
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004468:	441a      	add	r2, r3
 800446a:	463b      	mov	r3, r7
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004470:	463b      	mov	r3, r7
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6a1a      	ldr	r2, [r3, #32]
 8004476:	463b      	mov	r3, r7
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	429a      	cmp	r2, r3
 800447e:	d909      	bls.n	8004494 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004480:	463b      	mov	r3, r7
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6a1a      	ldr	r2, [r3, #32]
 8004486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800448a:	1ad2      	subs	r2, r2, r3
 800448c:	463b      	mov	r3, r7
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	621a      	str	r2, [r3, #32]
 8004492:	e008      	b.n	80044a6 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004494:	463b      	mov	r3, r7
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800449e:	463b      	mov	r3, r7
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2200      	movs	r2, #0
 80044a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80044a6:	1d3b      	adds	r3, r7, #4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	647b      	str	r3, [r7, #68]	; 0x44
 80044ac:	463b      	mov	r3, r7
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	785b      	ldrb	r3, [r3, #1]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d164      	bne.n	8004580 <USB_EPStartXfer+0x63c>
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044bc:	1d3b      	adds	r3, r7, #4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ca:	4413      	add	r3, r2
 80044cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ce:	463b      	mov	r3, r7
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	011a      	lsls	r2, r3, #4
 80044d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d8:	4413      	add	r3, r2
 80044da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044de:	63bb      	str	r3, [r7, #56]	; 0x38
 80044e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d112      	bne.n	800450e <USB_EPStartXfer+0x5ca>
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	801a      	strh	r2, [r3, #0]
 80044f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004506:	b29a      	uxth	r2, r3
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	e054      	b.n	80045b8 <USB_EPStartXfer+0x674>
 800450e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004512:	2b3e      	cmp	r3, #62	; 0x3e
 8004514:	d817      	bhi.n	8004546 <USB_EPStartXfer+0x602>
 8004516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800451a:	085b      	lsrs	r3, r3, #1
 800451c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d004      	beq.n	8004536 <USB_EPStartXfer+0x5f2>
 800452c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004530:	3301      	adds	r3, #1
 8004532:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800453a:	b29b      	uxth	r3, r3
 800453c:	029b      	lsls	r3, r3, #10
 800453e:	b29a      	uxth	r2, r3
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	801a      	strh	r2, [r3, #0]
 8004544:	e038      	b.n	80045b8 <USB_EPStartXfer+0x674>
 8004546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	2b00      	cmp	r3, #0
 800455a:	d104      	bne.n	8004566 <USB_EPStartXfer+0x622>
 800455c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004560:	3b01      	subs	r3, #1
 8004562:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004566:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800456a:	b29b      	uxth	r3, r3
 800456c:	029b      	lsls	r3, r3, #10
 800456e:	b29b      	uxth	r3, r3
 8004570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004578:	b29a      	uxth	r2, r3
 800457a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457c:	801a      	strh	r2, [r3, #0]
 800457e:	e01b      	b.n	80045b8 <USB_EPStartXfer+0x674>
 8004580:	463b      	mov	r3, r7
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d116      	bne.n	80045b8 <USB_EPStartXfer+0x674>
 800458a:	1d3b      	adds	r3, r7, #4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004598:	4413      	add	r3, r2
 800459a:	647b      	str	r3, [r7, #68]	; 0x44
 800459c:	463b      	mov	r3, r7
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	011a      	lsls	r2, r3, #4
 80045a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a6:	4413      	add	r3, r2
 80045a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045ac:	643b      	str	r3, [r7, #64]	; 0x40
 80045ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80045b8:	463b      	mov	r3, r7
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	895b      	ldrh	r3, [r3, #10]
 80045be:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045c2:	463b      	mov	r3, r7
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6959      	ldr	r1, [r3, #20]
 80045c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80045d2:	1d38      	adds	r0, r7, #4
 80045d4:	6800      	ldr	r0, [r0, #0]
 80045d6:	f000 ff13 	bl	8005400 <USB_WritePMA>
 80045da:	e1e2      	b.n	80049a2 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80045dc:	463b      	mov	r3, r7
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80045e6:	1d3b      	adds	r3, r7, #4
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	463b      	mov	r3, r7
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80045fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004600:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	463b      	mov	r3, r7
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	441a      	add	r2, r3
 8004612:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800461e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004626:	b29b      	uxth	r3, r3
 8004628:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800462a:	1d3b      	adds	r3, r7, #4
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	663b      	str	r3, [r7, #96]	; 0x60
 8004630:	1d3b      	adds	r3, r7, #4
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004638:	b29b      	uxth	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800463e:	4413      	add	r3, r2
 8004640:	663b      	str	r3, [r7, #96]	; 0x60
 8004642:	463b      	mov	r3, r7
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	011a      	lsls	r2, r3, #4
 800464a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800464c:	4413      	add	r3, r2
 800464e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004658:	b29a      	uxth	r2, r3
 800465a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800465c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800465e:	463b      	mov	r3, r7
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	891b      	ldrh	r3, [r3, #8]
 8004664:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004668:	463b      	mov	r3, r7
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6959      	ldr	r1, [r3, #20]
 800466e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004672:	b29b      	uxth	r3, r3
 8004674:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004678:	1d38      	adds	r0, r7, #4
 800467a:	6800      	ldr	r0, [r0, #0]
 800467c:	f000 fec0 	bl	8005400 <USB_WritePMA>
 8004680:	e18f      	b.n	80049a2 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004682:	1d3b      	adds	r3, r7, #4
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	463b      	mov	r3, r7
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29b      	uxth	r3, r3
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 808f 	beq.w	80047bc <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800469e:	1d3b      	adds	r3, r7, #4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80046a4:	463b      	mov	r3, r7
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	785b      	ldrb	r3, [r3, #1]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d164      	bne.n	8004778 <USB_EPStartXfer+0x834>
 80046ae:	1d3b      	adds	r3, r7, #4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	673b      	str	r3, [r7, #112]	; 0x70
 80046b4:	1d3b      	adds	r3, r7, #4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046bc:	b29b      	uxth	r3, r3
 80046be:	461a      	mov	r2, r3
 80046c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046c2:	4413      	add	r3, r2
 80046c4:	673b      	str	r3, [r7, #112]	; 0x70
 80046c6:	463b      	mov	r3, r7
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	011a      	lsls	r2, r3, #4
 80046ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046d0:	4413      	add	r3, r2
 80046d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d112      	bne.n	8004706 <USB_EPStartXfer+0x7c2>
 80046e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ee:	801a      	strh	r2, [r3, #0]
 80046f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fe:	b29a      	uxth	r2, r3
 8004700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004702:	801a      	strh	r2, [r3, #0]
 8004704:	e054      	b.n	80047b0 <USB_EPStartXfer+0x86c>
 8004706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800470a:	2b3e      	cmp	r3, #62	; 0x3e
 800470c:	d817      	bhi.n	800473e <USB_EPStartXfer+0x7fa>
 800470e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <USB_EPStartXfer+0x7ea>
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	3301      	adds	r3, #1
 800472a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004732:	b29b      	uxth	r3, r3
 8004734:	029b      	lsls	r3, r3, #10
 8004736:	b29a      	uxth	r2, r3
 8004738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473a:	801a      	strh	r2, [r3, #0]
 800473c:	e038      	b.n	80047b0 <USB_EPStartXfer+0x86c>
 800473e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <USB_EPStartXfer+0x81a>
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	3b01      	subs	r3, #1
 800475a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004762:	b29b      	uxth	r3, r3
 8004764:	029b      	lsls	r3, r3, #10
 8004766:	b29b      	uxth	r3, r3
 8004768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004770:	b29a      	uxth	r2, r3
 8004772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	e01b      	b.n	80047b0 <USB_EPStartXfer+0x86c>
 8004778:	463b      	mov	r3, r7
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	785b      	ldrb	r3, [r3, #1]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d116      	bne.n	80047b0 <USB_EPStartXfer+0x86c>
 8004782:	1d3b      	adds	r3, r7, #4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800478a:	b29b      	uxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004790:	4413      	add	r3, r2
 8004792:	67bb      	str	r3, [r7, #120]	; 0x78
 8004794:	463b      	mov	r3, r7
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	011a      	lsls	r2, r3, #4
 800479c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800479e:	4413      	add	r3, r2
 80047a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047a4:	677b      	str	r3, [r7, #116]	; 0x74
 80047a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80047b0:	463b      	mov	r3, r7
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	895b      	ldrh	r3, [r3, #10]
 80047b6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80047ba:	e097      	b.n	80048ec <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047bc:	463b      	mov	r3, r7
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d168      	bne.n	8004898 <USB_EPStartXfer+0x954>
 80047c6:	1d3b      	adds	r3, r7, #4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047ce:	1d3b      	adds	r3, r7, #4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047de:	4413      	add	r3, r2
 80047e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047e4:	463b      	mov	r3, r7
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	011a      	lsls	r2, r3, #4
 80047ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047f0:	4413      	add	r3, r2
 80047f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d112      	bne.n	8004826 <USB_EPStartXfer+0x8e2>
 8004800:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800480a:	b29a      	uxth	r2, r3
 800480c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800480e:	801a      	strh	r2, [r3, #0]
 8004810:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800481e:	b29a      	uxth	r2, r3
 8004820:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004822:	801a      	strh	r2, [r3, #0]
 8004824:	e05d      	b.n	80048e2 <USB_EPStartXfer+0x99e>
 8004826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482a:	2b3e      	cmp	r3, #62	; 0x3e
 800482c:	d817      	bhi.n	800485e <USB_EPStartXfer+0x91a>
 800482e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d004      	beq.n	800484e <USB_EPStartXfer+0x90a>
 8004844:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004848:	3301      	adds	r3, #1
 800484a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800484e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004852:	b29b      	uxth	r3, r3
 8004854:	029b      	lsls	r3, r3, #10
 8004856:	b29a      	uxth	r2, r3
 8004858:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800485a:	801a      	strh	r2, [r3, #0]
 800485c:	e041      	b.n	80048e2 <USB_EPStartXfer+0x99e>
 800485e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <USB_EPStartXfer+0x93a>
 8004874:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004878:	3b01      	subs	r3, #1
 800487a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800487e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004882:	b29b      	uxth	r3, r3
 8004884:	029b      	lsls	r3, r3, #10
 8004886:	b29b      	uxth	r3, r3
 8004888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800488c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004890:	b29a      	uxth	r2, r3
 8004892:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004894:	801a      	strh	r2, [r3, #0]
 8004896:	e024      	b.n	80048e2 <USB_EPStartXfer+0x99e>
 8004898:	463b      	mov	r3, r7
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	785b      	ldrb	r3, [r3, #1]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d11f      	bne.n	80048e2 <USB_EPStartXfer+0x99e>
 80048a2:	1d3b      	adds	r3, r7, #4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048aa:	1d3b      	adds	r3, r7, #4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048ba:	4413      	add	r3, r2
 80048bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048c0:	463b      	mov	r3, r7
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	011a      	lsls	r2, r3, #4
 80048c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048cc:	4413      	add	r3, r2
 80048ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048da:	b29a      	uxth	r2, r3
 80048dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80048e2:	463b      	mov	r3, r7
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	891b      	ldrh	r3, [r3, #8]
 80048e8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048ec:	463b      	mov	r3, r7
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6959      	ldr	r1, [r3, #20]
 80048f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80048fc:	1d38      	adds	r0, r7, #4
 80048fe:	6800      	ldr	r0, [r0, #0]
 8004900:	f000 fd7e 	bl	8005400 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004904:	463b      	mov	r3, r7
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	785b      	ldrb	r3, [r3, #1]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d122      	bne.n	8004954 <USB_EPStartXfer+0xa10>
 800490e:	1d3b      	adds	r3, r7, #4
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	463b      	mov	r3, r7
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	b29b      	uxth	r3, r3
 8004920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004928:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800492c:	1d3b      	adds	r3, r7, #4
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	463b      	mov	r3, r7
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	441a      	add	r2, r3
 800493a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800493e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800494e:	b29b      	uxth	r3, r3
 8004950:	8013      	strh	r3, [r2, #0]
 8004952:	e026      	b.n	80049a2 <USB_EPStartXfer+0xa5e>
 8004954:	463b      	mov	r3, r7
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	785b      	ldrb	r3, [r3, #1]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d121      	bne.n	80049a2 <USB_EPStartXfer+0xa5e>
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	463b      	mov	r3, r7
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004978:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	463b      	mov	r3, r7
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800498e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800499a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499e:	b29b      	uxth	r3, r3
 80049a0:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80049a2:	1d3b      	adds	r3, r7, #4
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	463b      	mov	r3, r7
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f107 020e 	add.w	r2, r7, #14
 80049b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c0:	8013      	strh	r3, [r2, #0]
 80049c2:	f107 030e 	add.w	r3, r7, #14
 80049c6:	f107 020e 	add.w	r2, r7, #14
 80049ca:	8812      	ldrh	r2, [r2, #0]
 80049cc:	f082 0210 	eor.w	r2, r2, #16
 80049d0:	801a      	strh	r2, [r3, #0]
 80049d2:	f107 030e 	add.w	r3, r7, #14
 80049d6:	f107 020e 	add.w	r2, r7, #14
 80049da:	8812      	ldrh	r2, [r2, #0]
 80049dc:	f082 0220 	eor.w	r2, r2, #32
 80049e0:	801a      	strh	r2, [r3, #0]
 80049e2:	1d3b      	adds	r3, r7, #4
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	463b      	mov	r3, r7
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	441a      	add	r2, r3
 80049f0:	f107 030e 	add.w	r3, r7, #14
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	8013      	strh	r3, [r2, #0]
 8004a0a:	e3b5      	b.n	8005178 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004a0c:	463b      	mov	r3, r7
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	7b1b      	ldrb	r3, [r3, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f040 8090 	bne.w	8004b38 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004a18:	463b      	mov	r3, r7
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	463b      	mov	r3, r7
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d90e      	bls.n	8004a46 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004a28:	463b      	mov	r3, r7
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004a32:	463b      	mov	r3, r7
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699a      	ldr	r2, [r3, #24]
 8004a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a3c:	1ad2      	subs	r2, r2, r3
 8004a3e:	463b      	mov	r3, r7
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	619a      	str	r2, [r3, #24]
 8004a44:	e008      	b.n	8004a58 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004a46:	463b      	mov	r3, r7
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004a50:	463b      	mov	r3, r7
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2200      	movs	r2, #0
 8004a56:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004a58:	1d3b      	adds	r3, r7, #4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a60:	1d3b      	adds	r3, r7, #4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a70:	4413      	add	r3, r2
 8004a72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a76:	463b      	mov	r3, r7
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	011a      	lsls	r2, r3, #4
 8004a7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a82:	4413      	add	r3, r2
 8004a84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d116      	bne.n	8004ac2 <USB_EPStartXfer+0xb7e>
 8004a94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004aa6:	801a      	strh	r2, [r3, #0]
 8004aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	e32c      	b.n	800511c <USB_EPStartXfer+0x11d8>
 8004ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ac8:	d818      	bhi.n	8004afc <USB_EPStartXfer+0xbb8>
 8004aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d004      	beq.n	8004aea <USB_EPStartXfer+0xba6>
 8004ae0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004aea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	029b      	lsls	r3, r3, #10
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004af8:	801a      	strh	r2, [r3, #0]
 8004afa:	e30f      	b.n	800511c <USB_EPStartXfer+0x11d8>
 8004afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <USB_EPStartXfer+0xbd8>
 8004b12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004b16:	3b01      	subs	r3, #1
 8004b18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004b1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	029b      	lsls	r3, r3, #10
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b34:	801a      	strh	r2, [r3, #0]
 8004b36:	e2f1      	b.n	800511c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004b38:	463b      	mov	r3, r7
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	78db      	ldrb	r3, [r3, #3]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	f040 818f 	bne.w	8004e62 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004b44:	463b      	mov	r3, r7
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	785b      	ldrb	r3, [r3, #1]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d175      	bne.n	8004c3a <USB_EPStartXfer+0xcf6>
 8004b4e:	1d3b      	adds	r3, r7, #4
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	461a      	mov	r2, r3
 8004b62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b66:	4413      	add	r3, r2
 8004b68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b6c:	463b      	mov	r3, r7
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	011a      	lsls	r2, r3, #4
 8004b74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b78:	4413      	add	r3, r2
 8004b7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b82:	463b      	mov	r3, r7
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d116      	bne.n	8004bba <USB_EPStartXfer+0xc76>
 8004b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b9e:	801a      	strh	r2, [r3, #0]
 8004ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bb6:	801a      	strh	r2, [r3, #0]
 8004bb8:	e065      	b.n	8004c86 <USB_EPStartXfer+0xd42>
 8004bba:	463b      	mov	r3, r7
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b3e      	cmp	r3, #62	; 0x3e
 8004bc2:	d81a      	bhi.n	8004bfa <USB_EPStartXfer+0xcb6>
 8004bc4:	463b      	mov	r3, r7
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004bd0:	463b      	mov	r3, r7
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d004      	beq.n	8004be8 <USB_EPStartXfer+0xca4>
 8004bde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004be2:	3301      	adds	r3, #1
 8004be4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004be8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	029b      	lsls	r3, r3, #10
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bf6:	801a      	strh	r2, [r3, #0]
 8004bf8:	e045      	b.n	8004c86 <USB_EPStartXfer+0xd42>
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c06:	463b      	mov	r3, r7
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f003 031f 	and.w	r3, r3, #31
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d104      	bne.n	8004c1e <USB_EPStartXfer+0xcda>
 8004c14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	029b      	lsls	r3, r3, #10
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c36:	801a      	strh	r2, [r3, #0]
 8004c38:	e025      	b.n	8004c86 <USB_EPStartXfer+0xd42>
 8004c3a:	463b      	mov	r3, r7
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	785b      	ldrb	r3, [r3, #1]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d120      	bne.n	8004c86 <USB_EPStartXfer+0xd42>
 8004c44:	1d3b      	adds	r3, r7, #4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c4c:	1d3b      	adds	r3, r7, #4
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c62:	463b      	mov	r3, r7
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	011a      	lsls	r2, r3, #4
 8004c6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c6e:	4413      	add	r3, r2
 8004c70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c78:	463b      	mov	r3, r7
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c84:	801a      	strh	r2, [r3, #0]
 8004c86:	1d3b      	adds	r3, r7, #4
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c8e:	463b      	mov	r3, r7
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	785b      	ldrb	r3, [r3, #1]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d175      	bne.n	8004d84 <USB_EPStartXfer+0xe40>
 8004c98:	1d3b      	adds	r3, r7, #4
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ca0:	1d3b      	adds	r3, r7, #4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cb6:	463b      	mov	r3, r7
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	011a      	lsls	r2, r3, #4
 8004cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ccc:	463b      	mov	r3, r7
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d116      	bne.n	8004d04 <USB_EPStartXfer+0xdc0>
 8004cd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ce8:	801a      	strh	r2, [r3, #0]
 8004cea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d00:	801a      	strh	r2, [r3, #0]
 8004d02:	e061      	b.n	8004dc8 <USB_EPStartXfer+0xe84>
 8004d04:	463b      	mov	r3, r7
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d0c:	d81a      	bhi.n	8004d44 <USB_EPStartXfer+0xe00>
 8004d0e:	463b      	mov	r3, r7
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <USB_EPStartXfer+0xdee>
 8004d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	029b      	lsls	r3, r3, #10
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d40:	801a      	strh	r2, [r3, #0]
 8004d42:	e041      	b.n	8004dc8 <USB_EPStartXfer+0xe84>
 8004d44:	463b      	mov	r3, r7
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d50:	463b      	mov	r3, r7
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <USB_EPStartXfer+0xe24>
 8004d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d62:	3b01      	subs	r3, #1
 8004d64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	029b      	lsls	r3, r3, #10
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d80:	801a      	strh	r2, [r3, #0]
 8004d82:	e021      	b.n	8004dc8 <USB_EPStartXfer+0xe84>
 8004d84:	463b      	mov	r3, r7
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	785b      	ldrb	r3, [r3, #1]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d11c      	bne.n	8004dc8 <USB_EPStartXfer+0xe84>
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d9e:	4413      	add	r3, r2
 8004da0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004da4:	463b      	mov	r3, r7
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	011a      	lsls	r2, r3, #4
 8004dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004db0:	4413      	add	r3, r2
 8004db2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004dba:	463b      	mov	r3, r7
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004dc6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004dc8:	463b      	mov	r3, r7
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 81a4 	beq.w	800511c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	463b      	mov	r3, r7
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004de8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <USB_EPStartXfer+0xebc>
 8004df4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10d      	bne.n	8004e1c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004e00:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f040 8187 	bne.w	800511c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004e0e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f040 8180 	bne.w	800511c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004e1c:	1d3b      	adds	r3, r7, #4
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	463b      	mov	r3, r7
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8004e3a:	1d3b      	adds	r3, r7, #4
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	463b      	mov	r3, r7
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	8013      	strh	r3, [r2, #0]
 8004e60:	e15c      	b.n	800511c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004e62:	463b      	mov	r3, r7
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	78db      	ldrb	r3, [r3, #3]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	f040 8155 	bne.w	8005118 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004e6e:	463b      	mov	r3, r7
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699a      	ldr	r2, [r3, #24]
 8004e74:	463b      	mov	r3, r7
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d90e      	bls.n	8004e9c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8004e7e:	463b      	mov	r3, r7
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004e88:	463b      	mov	r3, r7
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e92:	1ad2      	subs	r2, r2, r3
 8004e94:	463b      	mov	r3, r7
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	619a      	str	r2, [r3, #24]
 8004e9a:	e008      	b.n	8004eae <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004e9c:	463b      	mov	r3, r7
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004eae:	463b      	mov	r3, r7
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	785b      	ldrb	r3, [r3, #1]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d16f      	bne.n	8004f98 <USB_EPStartXfer+0x1054>
 8004eb8:	1d3b      	adds	r3, r7, #4
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ec0:	1d3b      	adds	r3, r7, #4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ed6:	463b      	mov	r3, r7
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	011a      	lsls	r2, r3, #4
 8004ede:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ee8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d116      	bne.n	8004f22 <USB_EPStartXfer+0xfde>
 8004ef4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f06:	801a      	strh	r2, [r3, #0]
 8004f08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f1e:	801a      	strh	r2, [r3, #0]
 8004f20:	e05f      	b.n	8004fe2 <USB_EPStartXfer+0x109e>
 8004f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f26:	2b3e      	cmp	r3, #62	; 0x3e
 8004f28:	d818      	bhi.n	8004f5c <USB_EPStartXfer+0x1018>
 8004f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f2e:	085b      	lsrs	r3, r3, #1
 8004f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d004      	beq.n	8004f4a <USB_EPStartXfer+0x1006>
 8004f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f44:	3301      	adds	r3, #1
 8004f46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	029b      	lsls	r3, r3, #10
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f58:	801a      	strh	r2, [r3, #0]
 8004f5a:	e042      	b.n	8004fe2 <USB_EPStartXfer+0x109e>
 8004f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f6a:	f003 031f 	and.w	r3, r3, #31
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d104      	bne.n	8004f7c <USB_EPStartXfer+0x1038>
 8004f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f76:	3b01      	subs	r3, #1
 8004f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	029b      	lsls	r3, r3, #10
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	e024      	b.n	8004fe2 <USB_EPStartXfer+0x109e>
 8004f98:	463b      	mov	r3, r7
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d11f      	bne.n	8004fe2 <USB_EPStartXfer+0x109e>
 8004fa2:	1d3b      	adds	r3, r7, #4
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004faa:	1d3b      	adds	r3, r7, #4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fba:	4413      	add	r3, r2
 8004fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	011a      	lsls	r2, r3, #4
 8004fc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fcc:	4413      	add	r3, r2
 8004fce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fe0:	801a      	strh	r2, [r3, #0]
 8004fe2:	1d3b      	adds	r3, r7, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fea:	463b      	mov	r3, r7
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d16f      	bne.n	80050d4 <USB_EPStartXfer+0x1190>
 8004ff4:	1d3b      	adds	r3, r7, #4
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ffc:	1d3b      	adds	r3, r7, #4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005004:	b29b      	uxth	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800500c:	4413      	add	r3, r2
 800500e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005012:	463b      	mov	r3, r7
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	011a      	lsls	r2, r3, #4
 800501a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800501e:	4413      	add	r3, r2
 8005020:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005024:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d116      	bne.n	800505e <USB_EPStartXfer+0x111a>
 8005030:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800503c:	b29a      	uxth	r2, r3
 800503e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005042:	801a      	strh	r2, [r3, #0]
 8005044:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005054:	b29a      	uxth	r2, r3
 8005056:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800505a:	801a      	strh	r2, [r3, #0]
 800505c:	e05e      	b.n	800511c <USB_EPStartXfer+0x11d8>
 800505e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005062:	2b3e      	cmp	r3, #62	; 0x3e
 8005064:	d818      	bhi.n	8005098 <USB_EPStartXfer+0x1154>
 8005066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <USB_EPStartXfer+0x1142>
 800507c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005080:	3301      	adds	r3, #1
 8005082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800508a:	b29b      	uxth	r3, r3
 800508c:	029b      	lsls	r3, r3, #10
 800508e:	b29a      	uxth	r2, r3
 8005090:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005094:	801a      	strh	r2, [r3, #0]
 8005096:	e041      	b.n	800511c <USB_EPStartXfer+0x11d8>
 8005098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80050a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050a6:	f003 031f 	and.w	r3, r3, #31
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d104      	bne.n	80050b8 <USB_EPStartXfer+0x1174>
 80050ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050b2:	3b01      	subs	r3, #1
 80050b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80050b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050bc:	b29b      	uxth	r3, r3
 80050be:	029b      	lsls	r3, r3, #10
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050d0:	801a      	strh	r2, [r3, #0]
 80050d2:	e023      	b.n	800511c <USB_EPStartXfer+0x11d8>
 80050d4:	463b      	mov	r3, r7
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d11e      	bne.n	800511c <USB_EPStartXfer+0x11d8>
 80050de:	1d3b      	adds	r3, r7, #4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	461a      	mov	r2, r3
 80050ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050ee:	4413      	add	r3, r2
 80050f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050f4:	463b      	mov	r3, r7
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	011a      	lsls	r2, r3, #4
 80050fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005100:	4413      	add	r3, r2
 8005102:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005106:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800510a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800510e:	b29a      	uxth	r2, r3
 8005110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005114:	801a      	strh	r2, [r3, #0]
 8005116:	e001      	b.n	800511c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e02e      	b.n	800517a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800511c:	1d3b      	adds	r3, r7, #4
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	463b      	mov	r3, r7
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	b29b      	uxth	r3, r3
 800512e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005136:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800513a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800513e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005142:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005146:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800514a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800514e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005152:	1d3b      	adds	r3, r7, #4
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	463b      	mov	r3, r7
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	441a      	add	r2, r3
 8005160:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005174:	b29b      	uxth	r3, r3
 8005176:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d020      	beq.n	80051d8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ac:	81bb      	strh	r3, [r7, #12]
 80051ae:	89bb      	ldrh	r3, [r7, #12]
 80051b0:	f083 0310 	eor.w	r3, r3, #16
 80051b4:	81bb      	strh	r3, [r7, #12]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	441a      	add	r2, r3
 80051c0:	89bb      	ldrh	r3, [r7, #12]
 80051c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	8013      	strh	r3, [r2, #0]
 80051d6:	e01f      	b.n	8005218 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ee:	81fb      	strh	r3, [r7, #14]
 80051f0:	89fb      	ldrh	r3, [r7, #14]
 80051f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051f6:	81fb      	strh	r3, [r7, #14]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	441a      	add	r2, r3
 8005202:	89fb      	ldrh	r3, [r7, #14]
 8005204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005214:	b29b      	uxth	r3, r3
 8005216:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr

08005224 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	7b1b      	ldrb	r3, [r3, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f040 809d 	bne.w	8005372 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	785b      	ldrb	r3, [r3, #1]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d04c      	beq.n	80052da <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	823b      	strh	r3, [r7, #16]
 800524e:	8a3b      	ldrh	r3, [r7, #16]
 8005250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01b      	beq.n	8005290 <USB_EPClearStall+0x6c>
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526e:	81fb      	strh	r3, [r7, #14]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	441a      	add	r2, r3
 800527a:	89fb      	ldrh	r3, [r7, #14]
 800527c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005288:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800528c:	b29b      	uxth	r3, r3
 800528e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	78db      	ldrb	r3, [r3, #3]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d06c      	beq.n	8005372 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ae:	81bb      	strh	r3, [r7, #12]
 80052b0:	89bb      	ldrh	r3, [r7, #12]
 80052b2:	f083 0320 	eor.w	r3, r3, #32
 80052b6:	81bb      	strh	r3, [r7, #12]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	441a      	add	r2, r3
 80052c2:	89bb      	ldrh	r3, [r7, #12]
 80052c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	8013      	strh	r3, [r2, #0]
 80052d8:	e04b      	b.n	8005372 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	82fb      	strh	r3, [r7, #22]
 80052e8:	8afb      	ldrh	r3, [r7, #22]
 80052ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01b      	beq.n	800532a <USB_EPClearStall+0x106>
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005308:	82bb      	strh	r3, [r7, #20]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	441a      	add	r2, r3
 8005314:	8abb      	ldrh	r3, [r7, #20]
 8005316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800531a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800531e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005326:	b29b      	uxth	r3, r3
 8005328:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	b29b      	uxth	r3, r3
 8005338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800533c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005340:	827b      	strh	r3, [r7, #18]
 8005342:	8a7b      	ldrh	r3, [r7, #18]
 8005344:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005348:	827b      	strh	r3, [r7, #18]
 800534a:	8a7b      	ldrh	r3, [r7, #18]
 800534c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005350:	827b      	strh	r3, [r7, #18]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	441a      	add	r2, r3
 800535c:	8a7b      	ldrh	r3, [r7, #18]
 800535e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800536a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536e:	b29b      	uxth	r3, r3
 8005370:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	460b      	mov	r3, r1
 8005388:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800538a:	78fb      	ldrb	r3, [r7, #3]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2280      	movs	r2, #128	; 0x80
 8005394:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr

080053a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr

080053b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053da:	b29b      	uxth	r3, r3
 80053dc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80053de:	68fb      	ldr	r3, [r7, #12]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr

08005400 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005400:	b480      	push	{r7}
 8005402:	b08d      	sub	sp, #52	; 0x34
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	4611      	mov	r1, r2
 800540c:	461a      	mov	r2, r3
 800540e:	460b      	mov	r3, r1
 8005410:	80fb      	strh	r3, [r7, #6]
 8005412:	4613      	mov	r3, r2
 8005414:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005416:	88bb      	ldrh	r3, [r7, #4]
 8005418:	3301      	adds	r3, #1
 800541a:	085b      	lsrs	r3, r3, #1
 800541c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	005a      	lsls	r2, r3, #1
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005432:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005438:	e01e      	b.n	8005478 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	3301      	adds	r3, #1
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	b29b      	uxth	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	b29a      	uxth	r2, r3
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	3302      	adds	r3, #2
 8005464:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	3302      	adds	r3, #2
 800546a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	3301      	adds	r3, #1
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	3b01      	subs	r3, #1
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1dd      	bne.n	800543a <USB_WritePMA+0x3a>
  }
}
 800547e:	bf00      	nop
 8005480:	3734      	adds	r7, #52	; 0x34
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr

08005488 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005488:	b480      	push	{r7}
 800548a:	b08b      	sub	sp, #44	; 0x2c
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	4611      	mov	r1, r2
 8005494:	461a      	mov	r2, r3
 8005496:	460b      	mov	r3, r1
 8005498:	80fb      	strh	r3, [r7, #6]
 800549a:	4613      	mov	r3, r2
 800549c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800549e:	88bb      	ldrh	r3, [r7, #4]
 80054a0:	085b      	lsrs	r3, r3, #1
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	005a      	lsls	r2, r3, #1
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ba:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
 80054c0:	e01b      	b.n	80054fa <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	3302      	adds	r3, #2
 80054ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	3301      	adds	r3, #1
 80054dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	0a1b      	lsrs	r3, r3, #8
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	3301      	adds	r3, #1
 80054ec:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	3302      	adds	r3, #2
 80054f2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	3b01      	subs	r3, #1
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e0      	bne.n	80054c2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005500:	88bb      	ldrh	r3, [r7, #4]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d007      	beq.n	800551c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	b2da      	uxtb	r2, r3
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	701a      	strb	r2, [r3, #0]
  }
}
 800551c:	bf00      	nop
 800551e:	372c      	adds	r7, #44	; 0x2c
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr

08005526 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	460b      	mov	r3, r1
 8005530:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	7c1b      	ldrb	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d115      	bne.n	800556a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800553e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005542:	2202      	movs	r2, #2
 8005544:	2181      	movs	r1, #129	; 0x81
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f001 fe9d 	bl	8007286 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005556:	2202      	movs	r2, #2
 8005558:	2101      	movs	r1, #1
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f001 fe93 	bl	8007286 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005568:	e012      	b.n	8005590 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800556a:	2340      	movs	r3, #64	; 0x40
 800556c:	2202      	movs	r2, #2
 800556e:	2181      	movs	r1, #129	; 0x81
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f001 fe88 	bl	8007286 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800557c:	2340      	movs	r3, #64	; 0x40
 800557e:	2202      	movs	r2, #2
 8005580:	2101      	movs	r1, #1
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f001 fe7f 	bl	8007286 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005590:	2308      	movs	r3, #8
 8005592:	2203      	movs	r2, #3
 8005594:	2182      	movs	r1, #130	; 0x82
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f001 fe75 	bl	8007286 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80055a2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80055a6:	f001 ff95 	bl	80074d4 <USBD_static_malloc>
 80055aa:	4602      	mov	r2, r0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d102      	bne.n	80055c2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
 80055c0:	e026      	b.n	8005610 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	7c1b      	ldrb	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d109      	bne.n	8005600 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055f6:	2101      	movs	r1, #1
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f001 ff35 	bl	8007468 <USBD_LL_PrepareReceive>
 80055fe:	e007      	b.n	8005610 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005606:	2340      	movs	r3, #64	; 0x40
 8005608:	2101      	movs	r1, #1
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f001 ff2c 	bl	8007468 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005610:	7bfb      	ldrb	r3, [r7, #15]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	460b      	mov	r3, r1
 8005624:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800562a:	2181      	movs	r1, #129	; 0x81
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f001 fe50 	bl	80072d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005638:	2101      	movs	r1, #1
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f001 fe49 	bl	80072d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005648:	2182      	movs	r1, #130	; 0x82
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f001 fe41 	bl	80072d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00e      	beq.n	800567e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005670:	4618      	mov	r0, r3
 8005672:	f001 ff3b 	bl	80074ec <USBD_static_free>
    pdev->pClassData = NULL;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800567e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005698:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d039      	beq.n	8005726 <USBD_CDC_Setup+0x9e>
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d17c      	bne.n	80057b0 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	88db      	ldrh	r3, [r3, #6]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d029      	beq.n	8005712 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	b25b      	sxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	da11      	bge.n	80056ec <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80056d4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	88d2      	ldrh	r2, [r2, #6]
 80056da:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80056dc:	6939      	ldr	r1, [r7, #16]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	88db      	ldrh	r3, [r3, #6]
 80056e2:	461a      	mov	r2, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f001 f9f9 	bl	8006adc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80056ea:	e068      	b.n	80057be <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	785a      	ldrb	r2, [r3, #1]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	88db      	ldrh	r3, [r3, #6]
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005702:	6939      	ldr	r1, [r7, #16]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	88db      	ldrh	r3, [r3, #6]
 8005708:	461a      	mov	r2, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 fa14 	bl	8006b38 <USBD_CtlPrepareRx>
      break;
 8005710:	e055      	b.n	80057be <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	7850      	ldrb	r0, [r2, #1]
 800571e:	2200      	movs	r2, #0
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	4798      	blx	r3
      break;
 8005724:	e04b      	b.n	80057be <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	785b      	ldrb	r3, [r3, #1]
 800572a:	2b0a      	cmp	r3, #10
 800572c:	d017      	beq.n	800575e <USBD_CDC_Setup+0xd6>
 800572e:	2b0b      	cmp	r3, #11
 8005730:	d029      	beq.n	8005786 <USBD_CDC_Setup+0xfe>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d133      	bne.n	800579e <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800573c:	2b03      	cmp	r3, #3
 800573e:	d107      	bne.n	8005750 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005740:	f107 030c 	add.w	r3, r7, #12
 8005744:	2202      	movs	r2, #2
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 f9c7 	bl	8006adc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800574e:	e02e      	b.n	80057ae <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 f958 	bl	8006a08 <USBD_CtlError>
            ret = USBD_FAIL;
 8005758:	2302      	movs	r3, #2
 800575a:	75fb      	strb	r3, [r7, #23]
          break;
 800575c:	e027      	b.n	80057ae <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005764:	2b03      	cmp	r3, #3
 8005766:	d107      	bne.n	8005778 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005768:	f107 030f 	add.w	r3, r7, #15
 800576c:	2201      	movs	r2, #1
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 f9b3 	bl	8006adc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005776:	e01a      	b.n	80057ae <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 f944 	bl	8006a08 <USBD_CtlError>
            ret = USBD_FAIL;
 8005780:	2302      	movs	r3, #2
 8005782:	75fb      	strb	r3, [r7, #23]
          break;
 8005784:	e013      	b.n	80057ae <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800578c:	2b03      	cmp	r3, #3
 800578e:	d00d      	beq.n	80057ac <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f001 f938 	bl	8006a08 <USBD_CtlError>
            ret = USBD_FAIL;
 8005798:	2302      	movs	r3, #2
 800579a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800579c:	e006      	b.n	80057ac <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f001 f931 	bl	8006a08 <USBD_CtlError>
          ret = USBD_FAIL;
 80057a6:	2302      	movs	r3, #2
 80057a8:	75fb      	strb	r3, [r7, #23]
          break;
 80057aa:	e000      	b.n	80057ae <USBD_CDC_Setup+0x126>
          break;
 80057ac:	bf00      	nop
      }
      break;
 80057ae:	e006      	b.n	80057be <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f001 f928 	bl	8006a08 <USBD_CtlError>
      ret = USBD_FAIL;
 80057b8:	2302      	movs	r3, #2
 80057ba:	75fb      	strb	r3, [r7, #23]
      break;
 80057bc:	bf00      	nop
  }

  return ret;
 80057be:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057da:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057e2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d03a      	beq.n	8005864 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80057ee:	78fa      	ldrb	r2, [r7, #3]
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	331c      	adds	r3, #28
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d029      	beq.n	8005858 <USBD_CDC_DataIn+0x90>
 8005804:	78fa      	ldrb	r2, [r7, #3]
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	331c      	adds	r3, #28
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	78f9      	ldrb	r1, [r7, #3]
 8005818:	68b8      	ldr	r0, [r7, #8]
 800581a:	460b      	mov	r3, r1
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	4403      	add	r3, r0
 8005824:	3338      	adds	r3, #56	; 0x38
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	fbb2 f1f3 	udiv	r1, r2, r3
 800582c:	fb03 f301 	mul.w	r3, r3, r1
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d110      	bne.n	8005858 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005836:	78fa      	ldrb	r2, [r7, #3]
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	331c      	adds	r3, #28
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800584a:	78f9      	ldrb	r1, [r7, #3]
 800584c:	2300      	movs	r3, #0
 800584e:	2200      	movs	r2, #0
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 fde6 	bl	8007422 <USBD_LL_Transmit>
 8005856:	e003      	b.n	8005860 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	e000      	b.n	8005866 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005864:	2302      	movs	r3, #2
  }
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	460b      	mov	r3, r1
 8005878:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005880:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005882:	78fb      	ldrb	r3, [r7, #3]
 8005884:	4619      	mov	r1, r3
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f001 fe11 	bl	80074ae <USBD_LL_GetRxDataSize>
 800588c:	4602      	mov	r2, r0
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00d      	beq.n	80058ba <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058b2:	4611      	mov	r1, r2
 80058b4:	4798      	blx	r3

    return USBD_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e000      	b.n	80058bc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80058ba:	2302      	movs	r3, #2
  }
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d015      	beq.n	800590a <USBD_CDC_EP0_RxReady+0x46>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80058e4:	2bff      	cmp	r3, #255	; 0xff
 80058e6:	d010      	beq.n	800590a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80058f6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80058fe:	b292      	uxth	r2, r2
 8005900:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	22ff      	movs	r2, #255	; 0xff
 8005906:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2243      	movs	r2, #67	; 0x43
 8005920:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005922:	4b03      	ldr	r3, [pc, #12]	; (8005930 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	20000094 	.word	0x20000094

08005934 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2243      	movs	r2, #67	; 0x43
 8005940:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005942:	4b03      	ldr	r3, [pc, #12]	; (8005950 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20000050 	.word	0x20000050

08005954 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2243      	movs	r2, #67	; 0x43
 8005960:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005962:	4b03      	ldr	r3, [pc, #12]	; (8005970 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	bc80      	pop	{r7}
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	200000d8 	.word	0x200000d8

08005974 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	220a      	movs	r2, #10
 8005980:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005982:	4b03      	ldr	r3, [pc, #12]	; (8005990 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	2000000c 	.word	0x2000000c

08005994 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800599e:	2302      	movs	r3, #2
 80059a0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr

080059c0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	4613      	mov	r3, r2
 80059cc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059d4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80059de:	88fa      	ldrh	r2, [r7, #6]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr

080059f2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a02:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr

08005a18 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d01c      	beq.n	8005a6c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d115      	bne.n	8005a68 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2181      	movs	r1, #129	; 0x81
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 fcdf 	bl	8007422 <USBD_LL_Transmit>

      return USBD_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	e002      	b.n	8005a6e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005a6c:	2302      	movs	r3, #2
  }
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d017      	beq.n	8005ac0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	7c1b      	ldrb	r3, [r3, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d109      	bne.n	8005aac <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 fcdf 	bl	8007468 <USBD_LL_PrepareReceive>
 8005aaa:	e007      	b.n	8005abc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ab2:	2340      	movs	r3, #64	; 0x40
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 fcd6 	bl	8007468 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	e000      	b.n	8005ac2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005ac0:	2302      	movs	r3, #2
  }
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e01a      	b.n	8005b18 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	79fa      	ldrb	r2, [r7, #7]
 8005b0e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f001 fb43 	bl	800719c <USBD_LL_Init>

  return USBD_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d006      	beq.n	8005b42 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	73fb      	strb	r3, [r7, #15]
 8005b40:	e001      	b.n	8005b46 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005b42:	2302      	movs	r3, #2
 8005b44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr

08005b52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f001 fb78 	bl	8007250 <USBD_LL_Start>

  return USBD_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr

08005b7e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	460b      	mov	r3, r1
 8005b88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00c      	beq.n	8005bb2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	78fa      	ldrb	r2, [r7, #3]
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	4798      	blx	r3
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	78fa      	ldrb	r2, [r7, #3]
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	4798      	blx	r3

  return USBD_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fecb 	bl	8006990 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005c08:	461a      	mov	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c16:	f003 031f 	and.w	r3, r3, #31
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d00c      	beq.n	8005c38 <USBD_LL_SetupStage+0x56>
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d302      	bcc.n	8005c28 <USBD_LL_SetupStage+0x46>
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d010      	beq.n	8005c48 <USBD_LL_SetupStage+0x66>
 8005c26:	e017      	b.n	8005c58 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f9cb 	bl	8005fcc <USBD_StdDevReq>
      break;
 8005c36:	e01a      	b.n	8005c6e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fa2d 	bl	80060a0 <USBD_StdItfReq>
      break;
 8005c46:	e012      	b.n	8005c6e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fa6b 	bl	800612c <USBD_StdEPReq>
      break;
 8005c56:	e00a      	b.n	8005c6e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 fb52 	bl	8007310 <USBD_LL_StallEP>
      break;
 8005c6c:	bf00      	nop
  }

  return USBD_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	460b      	mov	r3, r1
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005c86:	7afb      	ldrb	r3, [r7, #11]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d14b      	bne.n	8005d24 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c92:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d134      	bne.n	8005d08 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d919      	bls.n	8005cde <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	1ad2      	subs	r2, r2, r3
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d203      	bcs.n	8005ccc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	e002      	b.n	8005cd2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 ff4c 	bl	8006b74 <USBD_CtlContinueRx>
 8005cdc:	e038      	b.n	8005d50 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d105      	bne.n	8005d00 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 ff49 	bl	8006b98 <USBD_CtlSendStatus>
 8005d06:	e023      	b.n	8005d50 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d0e:	2b05      	cmp	r3, #5
 8005d10:	d11e      	bne.n	8005d50 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f001 faf7 	bl	8007310 <USBD_LL_StallEP>
 8005d22:	e015      	b.n	8005d50 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00d      	beq.n	8005d4c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d108      	bne.n	8005d4c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	7afa      	ldrb	r2, [r7, #11]
 8005d44:	4611      	mov	r1, r2
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	4798      	blx	r3
 8005d4a:	e001      	b.n	8005d50 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e000      	b.n	8005d52 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	460b      	mov	r3, r1
 8005d64:	607a      	str	r2, [r7, #4]
 8005d66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005d68:	7afb      	ldrb	r3, [r7, #11]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d17f      	bne.n	8005e6e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3314      	adds	r3, #20
 8005d72:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d15c      	bne.n	8005e38 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d915      	bls.n	8005db6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	1ad2      	subs	r2, r2, r3
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 feb6 	bl	8006b14 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005da8:	2300      	movs	r3, #0
 8005daa:	2200      	movs	r2, #0
 8005dac:	2100      	movs	r1, #0
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f001 fb5a 	bl	8007468 <USBD_LL_PrepareReceive>
 8005db4:	e04e      	b.n	8005e54 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	6912      	ldr	r2, [r2, #16]
 8005dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dc2:	fb02 f201 	mul.w	r2, r2, r1
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d11c      	bne.n	8005e06 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d316      	bcc.n	8005e06 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d20f      	bcs.n	8005e06 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005de6:	2200      	movs	r2, #0
 8005de8:	2100      	movs	r1, #0
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fe92 	bl	8006b14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005df8:	2300      	movs	r3, #0
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f001 fb32 	bl	8007468 <USBD_LL_PrepareReceive>
 8005e04:	e026      	b.n	8005e54 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d105      	bne.n	8005e28 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005e28:	2180      	movs	r1, #128	; 0x80
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f001 fa70 	bl	8007310 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 fec4 	bl	8006bbe <USBD_CtlReceiveStatus>
 8005e36:	e00d      	b.n	8005e54 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d004      	beq.n	8005e4c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d103      	bne.n	8005e54 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005e4c:	2180      	movs	r1, #128	; 0x80
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f001 fa5e 	bl	8007310 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d11d      	bne.n	8005e9a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7ff fe83 	bl	8005b6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e6c:	e015      	b.n	8005e9a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00d      	beq.n	8005e96 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d108      	bne.n	8005e96 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	7afa      	ldrb	r2, [r7, #11]
 8005e8e:	4611      	mov	r1, r2
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	4798      	blx	r3
 8005e94:	e001      	b.n	8005e9a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e96:	2302      	movs	r3, #2
 8005e98:	e000      	b.n	8005e9c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005eac:	2340      	movs	r3, #64	; 0x40
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 f9e7 	bl	8007286 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2240      	movs	r2, #64	; 0x40
 8005ec4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ec8:	2340      	movs	r3, #64	; 0x40
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2180      	movs	r1, #128	; 0x80
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f001 f9d9 	bl	8007286 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2240      	movs	r2, #64	; 0x40
 8005ede:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d009      	beq.n	8005f1c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6852      	ldr	r2, [r2, #4]
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	4611      	mov	r1, r2
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	4798      	blx	r3
  }

  return USBD_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	78fa      	ldrb	r2, [r7, #3]
 8005f36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr

08005f44 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr

08005f6c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d105      	bne.n	8005f8a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc80      	pop	{r7}
 8005f94:	4770      	bx	lr

08005f96 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d10b      	bne.n	8005fc0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d004      	beq.n	8005ff0 <USBD_StdDevReq+0x24>
 8005fe6:	2b40      	cmp	r3, #64	; 0x40
 8005fe8:	d002      	beq.n	8005ff0 <USBD_StdDevReq+0x24>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d008      	beq.n	8006000 <USBD_StdDevReq+0x34>
 8005fee:	e04c      	b.n	800608a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	4798      	blx	r3
      break;
 8005ffe:	e049      	b.n	8006094 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	2b09      	cmp	r3, #9
 8006006:	d83a      	bhi.n	800607e <USBD_StdDevReq+0xb2>
 8006008:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <USBD_StdDevReq+0x44>)
 800600a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600e:	bf00      	nop
 8006010:	08006061 	.word	0x08006061
 8006014:	08006075 	.word	0x08006075
 8006018:	0800607f 	.word	0x0800607f
 800601c:	0800606b 	.word	0x0800606b
 8006020:	0800607f 	.word	0x0800607f
 8006024:	08006043 	.word	0x08006043
 8006028:	08006039 	.word	0x08006039
 800602c:	0800607f 	.word	0x0800607f
 8006030:	08006057 	.word	0x08006057
 8006034:	0800604d 	.word	0x0800604d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f9d4 	bl	80063e8 <USBD_GetDescriptor>
          break;
 8006040:	e022      	b.n	8006088 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fb37 	bl	80066b8 <USBD_SetAddress>
          break;
 800604a:	e01d      	b.n	8006088 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800604c:	6839      	ldr	r1, [r7, #0]
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fb74 	bl	800673c <USBD_SetConfig>
          break;
 8006054:	e018      	b.n	8006088 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fbfd 	bl	8006858 <USBD_GetConfig>
          break;
 800605e:	e013      	b.n	8006088 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fc2c 	bl	80068c0 <USBD_GetStatus>
          break;
 8006068:	e00e      	b.n	8006088 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fc5a 	bl	8006926 <USBD_SetFeature>
          break;
 8006072:	e009      	b.n	8006088 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fc69 	bl	800694e <USBD_ClrFeature>
          break;
 800607c:	e004      	b.n	8006088 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fcc1 	bl	8006a08 <USBD_CtlError>
          break;
 8006086:	bf00      	nop
      }
      break;
 8006088:	e004      	b.n	8006094 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fcbb 	bl	8006a08 <USBD_CtlError>
      break;
 8006092:	bf00      	nop
  }

  return ret;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop

080060a0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d003      	beq.n	80060c2 <USBD_StdItfReq+0x22>
 80060ba:	2b40      	cmp	r3, #64	; 0x40
 80060bc:	d001      	beq.n	80060c2 <USBD_StdItfReq+0x22>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d12a      	bne.n	8006118 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060c8:	3b01      	subs	r3, #1
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d81d      	bhi.n	800610a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	889b      	ldrh	r3, [r3, #4]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d813      	bhi.n	8006100 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	4798      	blx	r3
 80060e6:	4603      	mov	r3, r0
 80060e8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	88db      	ldrh	r3, [r3, #6]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d110      	bne.n	8006114 <USBD_StdItfReq+0x74>
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10d      	bne.n	8006114 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fd4d 	bl	8006b98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80060fe:	e009      	b.n	8006114 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fc80 	bl	8006a08 <USBD_CtlError>
          break;
 8006108:	e004      	b.n	8006114 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fc7b 	bl	8006a08 <USBD_CtlError>
          break;
 8006112:	e000      	b.n	8006116 <USBD_StdItfReq+0x76>
          break;
 8006114:	bf00      	nop
      }
      break;
 8006116:	e004      	b.n	8006122 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fc74 	bl	8006a08 <USBD_CtlError>
      break;
 8006120:	bf00      	nop
  }

  return USBD_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	889b      	ldrh	r3, [r3, #4]
 800613e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006148:	2b20      	cmp	r3, #32
 800614a:	d004      	beq.n	8006156 <USBD_StdEPReq+0x2a>
 800614c:	2b40      	cmp	r3, #64	; 0x40
 800614e:	d002      	beq.n	8006156 <USBD_StdEPReq+0x2a>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d008      	beq.n	8006166 <USBD_StdEPReq+0x3a>
 8006154:	e13d      	b.n	80063d2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
      break;
 8006164:	e13a      	b.n	80063dc <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800616e:	2b20      	cmp	r3, #32
 8006170:	d10a      	bne.n	8006188 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	4798      	blx	r3
 8006180:	4603      	mov	r3, r0
 8006182:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	e12a      	b.n	80063de <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	785b      	ldrb	r3, [r3, #1]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d03e      	beq.n	800620e <USBD_StdEPReq+0xe2>
 8006190:	2b03      	cmp	r3, #3
 8006192:	d002      	beq.n	800619a <USBD_StdEPReq+0x6e>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d070      	beq.n	800627a <USBD_StdEPReq+0x14e>
 8006198:	e115      	b.n	80063c6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d002      	beq.n	80061aa <USBD_StdEPReq+0x7e>
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d015      	beq.n	80061d4 <USBD_StdEPReq+0xa8>
 80061a8:	e02b      	b.n	8006202 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00c      	beq.n	80061ca <USBD_StdEPReq+0x9e>
 80061b0:	7bbb      	ldrb	r3, [r7, #14]
 80061b2:	2b80      	cmp	r3, #128	; 0x80
 80061b4:	d009      	beq.n	80061ca <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80061b6:	7bbb      	ldrb	r3, [r7, #14]
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f001 f8a8 	bl	8007310 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80061c0:	2180      	movs	r1, #128	; 0x80
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 f8a4 	bl	8007310 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061c8:	e020      	b.n	800620c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fc1b 	bl	8006a08 <USBD_CtlError>
              break;
 80061d2:	e01b      	b.n	800620c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	885b      	ldrh	r3, [r3, #2]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10e      	bne.n	80061fa <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80061dc:	7bbb      	ldrb	r3, [r7, #14]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00b      	beq.n	80061fa <USBD_StdEPReq+0xce>
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	2b80      	cmp	r3, #128	; 0x80
 80061e6:	d008      	beq.n	80061fa <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	88db      	ldrh	r3, [r3, #6]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d104      	bne.n	80061fa <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80061f0:	7bbb      	ldrb	r3, [r7, #14]
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 f88b 	bl	8007310 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fccc 	bl	8006b98 <USBD_CtlSendStatus>

              break;
 8006200:	e004      	b.n	800620c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fbff 	bl	8006a08 <USBD_CtlError>
              break;
 800620a:	bf00      	nop
          }
          break;
 800620c:	e0e0      	b.n	80063d0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006214:	2b02      	cmp	r3, #2
 8006216:	d002      	beq.n	800621e <USBD_StdEPReq+0xf2>
 8006218:	2b03      	cmp	r3, #3
 800621a:	d015      	beq.n	8006248 <USBD_StdEPReq+0x11c>
 800621c:	e026      	b.n	800626c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00c      	beq.n	800623e <USBD_StdEPReq+0x112>
 8006224:	7bbb      	ldrb	r3, [r7, #14]
 8006226:	2b80      	cmp	r3, #128	; 0x80
 8006228:	d009      	beq.n	800623e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800622a:	7bbb      	ldrb	r3, [r7, #14]
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f001 f86e 	bl	8007310 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006234:	2180      	movs	r1, #128	; 0x80
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f001 f86a 	bl	8007310 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800623c:	e01c      	b.n	8006278 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fbe1 	bl	8006a08 <USBD_CtlError>
              break;
 8006246:	e017      	b.n	8006278 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	885b      	ldrh	r3, [r3, #2]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d112      	bne.n	8006276 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006250:	7bbb      	ldrb	r3, [r7, #14]
 8006252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006256:	2b00      	cmp	r3, #0
 8006258:	d004      	beq.n	8006264 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800625a:	7bbb      	ldrb	r3, [r7, #14]
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 f875 	bl	800734e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fc97 	bl	8006b98 <USBD_CtlSendStatus>
              }
              break;
 800626a:	e004      	b.n	8006276 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fbca 	bl	8006a08 <USBD_CtlError>
              break;
 8006274:	e000      	b.n	8006278 <USBD_StdEPReq+0x14c>
              break;
 8006276:	bf00      	nop
          }
          break;
 8006278:	e0aa      	b.n	80063d0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006280:	2b02      	cmp	r3, #2
 8006282:	d002      	beq.n	800628a <USBD_StdEPReq+0x15e>
 8006284:	2b03      	cmp	r3, #3
 8006286:	d032      	beq.n	80062ee <USBD_StdEPReq+0x1c2>
 8006288:	e097      	b.n	80063ba <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d007      	beq.n	80062a0 <USBD_StdEPReq+0x174>
 8006290:	7bbb      	ldrb	r3, [r7, #14]
 8006292:	2b80      	cmp	r3, #128	; 0x80
 8006294:	d004      	beq.n	80062a0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fbb5 	bl	8006a08 <USBD_CtlError>
                break;
 800629e:	e091      	b.n	80063c4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	da0b      	bge.n	80062c0 <USBD_StdEPReq+0x194>
 80062a8:	7bbb      	ldrb	r3, [r7, #14]
 80062aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	3310      	adds	r3, #16
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	4413      	add	r3, r2
 80062bc:	3304      	adds	r3, #4
 80062be:	e00b      	b.n	80062d8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062c0:	7bbb      	ldrb	r3, [r7, #14]
 80062c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	4413      	add	r3, r2
 80062d6:	3304      	adds	r3, #4
 80062d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2202      	movs	r2, #2
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fbf8 	bl	8006adc <USBD_CtlSendData>
              break;
 80062ec:	e06a      	b.n	80063c4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80062ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da11      	bge.n	800631a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	f003 020f 	and.w	r2, r3, #15
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	440b      	add	r3, r1
 8006308:	3318      	adds	r3, #24
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d117      	bne.n	8006340 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fb78 	bl	8006a08 <USBD_CtlError>
                  break;
 8006318:	e054      	b.n	80063c4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	f003 020f 	and.w	r2, r3, #15
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	440b      	add	r3, r1
 800632c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d104      	bne.n	8006340 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fb65 	bl	8006a08 <USBD_CtlError>
                  break;
 800633e:	e041      	b.n	80063c4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006344:	2b00      	cmp	r3, #0
 8006346:	da0b      	bge.n	8006360 <USBD_StdEPReq+0x234>
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800634e:	4613      	mov	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	3310      	adds	r3, #16
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	4413      	add	r3, r2
 800635c:	3304      	adds	r3, #4
 800635e:	e00b      	b.n	8006378 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006360:	7bbb      	ldrb	r3, [r7, #14]
 8006362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006366:	4613      	mov	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	4413      	add	r3, r2
 8006376:	3304      	adds	r3, #4
 8006378:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <USBD_StdEPReq+0x25a>
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	2b80      	cmp	r3, #128	; 0x80
 8006384:	d103      	bne.n	800638e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	e00e      	b.n	80063ac <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800638e:	7bbb      	ldrb	r3, [r7, #14]
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fffa 	bl	800738c <USBD_LL_IsStallEP>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2201      	movs	r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	e002      	b.n	80063ac <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2202      	movs	r2, #2
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fb92 	bl	8006adc <USBD_CtlSendData>
              break;
 80063b8:	e004      	b.n	80063c4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fb23 	bl	8006a08 <USBD_CtlError>
              break;
 80063c2:	bf00      	nop
          }
          break;
 80063c4:	e004      	b.n	80063d0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fb1d 	bl	8006a08 <USBD_CtlError>
          break;
 80063ce:	bf00      	nop
      }
      break;
 80063d0:	e004      	b.n	80063dc <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fb17 	bl	8006a08 <USBD_CtlError>
      break;
 80063da:	bf00      	nop
  }

  return ret;
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	885b      	ldrh	r3, [r3, #2]
 8006402:	0a1b      	lsrs	r3, r3, #8
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	2b06      	cmp	r3, #6
 800640a:	f200 8128 	bhi.w	800665e <USBD_GetDescriptor+0x276>
 800640e:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <USBD_GetDescriptor+0x2c>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006431 	.word	0x08006431
 8006418:	08006449 	.word	0x08006449
 800641c:	08006489 	.word	0x08006489
 8006420:	0800665f 	.word	0x0800665f
 8006424:	0800665f 	.word	0x0800665f
 8006428:	080065ff 	.word	0x080065ff
 800642c:	0800662b 	.word	0x0800662b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	7c12      	ldrb	r2, [r2, #16]
 800643c:	f107 0108 	add.w	r1, r7, #8
 8006440:	4610      	mov	r0, r2
 8006442:	4798      	blx	r3
 8006444:	60f8      	str	r0, [r7, #12]
      break;
 8006446:	e112      	b.n	800666e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	7c1b      	ldrb	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10d      	bne.n	800646c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	f107 0208 	add.w	r2, r7, #8
 800645c:	4610      	mov	r0, r2
 800645e:	4798      	blx	r3
 8006460:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	2202      	movs	r2, #2
 8006468:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800646a:	e100      	b.n	800666e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	f107 0208 	add.w	r2, r7, #8
 8006478:	4610      	mov	r0, r2
 800647a:	4798      	blx	r3
 800647c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3301      	adds	r3, #1
 8006482:	2202      	movs	r2, #2
 8006484:	701a      	strb	r2, [r3, #0]
      break;
 8006486:	e0f2      	b.n	800666e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	885b      	ldrh	r3, [r3, #2]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b05      	cmp	r3, #5
 8006490:	f200 80ac 	bhi.w	80065ec <USBD_GetDescriptor+0x204>
 8006494:	a201      	add	r2, pc, #4	; (adr r2, 800649c <USBD_GetDescriptor+0xb4>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064b5 	.word	0x080064b5
 80064a0:	080064e9 	.word	0x080064e9
 80064a4:	0800651d 	.word	0x0800651d
 80064a8:	08006551 	.word	0x08006551
 80064ac:	08006585 	.word	0x08006585
 80064b0:	080065b9 	.word	0x080065b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00b      	beq.n	80064d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	7c12      	ldrb	r2, [r2, #16]
 80064cc:	f107 0108 	add.w	r1, r7, #8
 80064d0:	4610      	mov	r0, r2
 80064d2:	4798      	blx	r3
 80064d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064d6:	e091      	b.n	80065fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fa94 	bl	8006a08 <USBD_CtlError>
            err++;
 80064e0:	7afb      	ldrb	r3, [r7, #11]
 80064e2:	3301      	adds	r3, #1
 80064e4:	72fb      	strb	r3, [r7, #11]
          break;
 80064e6:	e089      	b.n	80065fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	7c12      	ldrb	r2, [r2, #16]
 8006500:	f107 0108 	add.w	r1, r7, #8
 8006504:	4610      	mov	r0, r2
 8006506:	4798      	blx	r3
 8006508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800650a:	e077      	b.n	80065fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa7a 	bl	8006a08 <USBD_CtlError>
            err++;
 8006514:	7afb      	ldrb	r3, [r7, #11]
 8006516:	3301      	adds	r3, #1
 8006518:	72fb      	strb	r3, [r7, #11]
          break;
 800651a:	e06f      	b.n	80065fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	7c12      	ldrb	r2, [r2, #16]
 8006534:	f107 0108 	add.w	r1, r7, #8
 8006538:	4610      	mov	r0, r2
 800653a:	4798      	blx	r3
 800653c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800653e:	e05d      	b.n	80065fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fa60 	bl	8006a08 <USBD_CtlError>
            err++;
 8006548:	7afb      	ldrb	r3, [r7, #11]
 800654a:	3301      	adds	r3, #1
 800654c:	72fb      	strb	r3, [r7, #11]
          break;
 800654e:	e055      	b.n	80065fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	7c12      	ldrb	r2, [r2, #16]
 8006568:	f107 0108 	add.w	r1, r7, #8
 800656c:	4610      	mov	r0, r2
 800656e:	4798      	blx	r3
 8006570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006572:	e043      	b.n	80065fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fa46 	bl	8006a08 <USBD_CtlError>
            err++;
 800657c:	7afb      	ldrb	r3, [r7, #11]
 800657e:	3301      	adds	r3, #1
 8006580:	72fb      	strb	r3, [r7, #11]
          break;
 8006582:	e03b      	b.n	80065fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00b      	beq.n	80065a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	7c12      	ldrb	r2, [r2, #16]
 800659c:	f107 0108 	add.w	r1, r7, #8
 80065a0:	4610      	mov	r0, r2
 80065a2:	4798      	blx	r3
 80065a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065a6:	e029      	b.n	80065fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fa2c 	bl	8006a08 <USBD_CtlError>
            err++;
 80065b0:	7afb      	ldrb	r3, [r7, #11]
 80065b2:	3301      	adds	r3, #1
 80065b4:	72fb      	strb	r3, [r7, #11]
          break;
 80065b6:	e021      	b.n	80065fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	7c12      	ldrb	r2, [r2, #16]
 80065d0:	f107 0108 	add.w	r1, r7, #8
 80065d4:	4610      	mov	r0, r2
 80065d6:	4798      	blx	r3
 80065d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065da:	e00f      	b.n	80065fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fa12 	bl	8006a08 <USBD_CtlError>
            err++;
 80065e4:	7afb      	ldrb	r3, [r7, #11]
 80065e6:	3301      	adds	r3, #1
 80065e8:	72fb      	strb	r3, [r7, #11]
          break;
 80065ea:	e007      	b.n	80065fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fa0a 	bl	8006a08 <USBD_CtlError>
          err++;
 80065f4:	7afb      	ldrb	r3, [r7, #11]
 80065f6:	3301      	adds	r3, #1
 80065f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80065fa:	e038      	b.n	800666e <USBD_GetDescriptor+0x286>
 80065fc:	e037      	b.n	800666e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	7c1b      	ldrb	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660e:	f107 0208 	add.w	r2, r7, #8
 8006612:	4610      	mov	r0, r2
 8006614:	4798      	blx	r3
 8006616:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006618:	e029      	b.n	800666e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f9f3 	bl	8006a08 <USBD_CtlError>
        err++;
 8006622:	7afb      	ldrb	r3, [r7, #11]
 8006624:	3301      	adds	r3, #1
 8006626:	72fb      	strb	r3, [r7, #11]
      break;
 8006628:	e021      	b.n	800666e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	7c1b      	ldrb	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10d      	bne.n	800664e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663a:	f107 0208 	add.w	r2, r7, #8
 800663e:	4610      	mov	r0, r2
 8006640:	4798      	blx	r3
 8006642:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3301      	adds	r3, #1
 8006648:	2207      	movs	r2, #7
 800664a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800664c:	e00f      	b.n	800666e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f9d9 	bl	8006a08 <USBD_CtlError>
        err++;
 8006656:	7afb      	ldrb	r3, [r7, #11]
 8006658:	3301      	adds	r3, #1
 800665a:	72fb      	strb	r3, [r7, #11]
      break;
 800665c:	e007      	b.n	800666e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f9d1 	bl	8006a08 <USBD_CtlError>
      err++;
 8006666:	7afb      	ldrb	r3, [r7, #11]
 8006668:	3301      	adds	r3, #1
 800666a:	72fb      	strb	r3, [r7, #11]
      break;
 800666c:	bf00      	nop
  }

  if (err != 0U)
 800666e:	7afb      	ldrb	r3, [r7, #11]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d11c      	bne.n	80066ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006674:	893b      	ldrh	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d011      	beq.n	800669e <USBD_GetDescriptor+0x2b6>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	88db      	ldrh	r3, [r3, #6]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00d      	beq.n	800669e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	88da      	ldrh	r2, [r3, #6]
 8006686:	893b      	ldrh	r3, [r7, #8]
 8006688:	4293      	cmp	r3, r2
 800668a:	bf28      	it	cs
 800668c:	4613      	movcs	r3, r2
 800668e:	b29b      	uxth	r3, r3
 8006690:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006692:	893b      	ldrh	r3, [r7, #8]
 8006694:	461a      	mov	r2, r3
 8006696:	68f9      	ldr	r1, [r7, #12]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fa1f 	bl	8006adc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	88db      	ldrh	r3, [r3, #6]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d104      	bne.n	80066b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fa76 	bl	8006b98 <USBD_CtlSendStatus>
 80066ac:	e000      	b.n	80066b0 <USBD_GetDescriptor+0x2c8>
    return;
 80066ae:	bf00      	nop
    }
  }
}
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop

080066b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	889b      	ldrh	r3, [r3, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d130      	bne.n	800672c <USBD_SetAddress+0x74>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	88db      	ldrh	r3, [r3, #6]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d12c      	bne.n	800672c <USBD_SetAddress+0x74>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	885b      	ldrh	r3, [r3, #2]
 80066d6:	2b7f      	cmp	r3, #127	; 0x7f
 80066d8:	d828      	bhi.n	800672c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	885b      	ldrh	r3, [r3, #2]
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d104      	bne.n	80066fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f988 	bl	8006a08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066f8:	e01c      	b.n	8006734 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	7bfa      	ldrb	r2, [r7, #15]
 80066fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fe6c 	bl	80073e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fa43 	bl	8006b98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006720:	e008      	b.n	8006734 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800672a:	e003      	b.n	8006734 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f96a 	bl	8006a08 <USBD_CtlError>
  }
}
 8006734:	bf00      	nop
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	885b      	ldrh	r3, [r3, #2]
 800674a:	b2da      	uxtb	r2, r3
 800674c:	4b41      	ldr	r3, [pc, #260]	; (8006854 <USBD_SetConfig+0x118>)
 800674e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006750:	4b40      	ldr	r3, [pc, #256]	; (8006854 <USBD_SetConfig+0x118>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d904      	bls.n	8006762 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f954 	bl	8006a08 <USBD_CtlError>
 8006760:	e075      	b.n	800684e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006768:	2b02      	cmp	r3, #2
 800676a:	d002      	beq.n	8006772 <USBD_SetConfig+0x36>
 800676c:	2b03      	cmp	r3, #3
 800676e:	d023      	beq.n	80067b8 <USBD_SetConfig+0x7c>
 8006770:	e062      	b.n	8006838 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006772:	4b38      	ldr	r3, [pc, #224]	; (8006854 <USBD_SetConfig+0x118>)
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d01a      	beq.n	80067b0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800677a:	4b36      	ldr	r3, [pc, #216]	; (8006854 <USBD_SetConfig+0x118>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2203      	movs	r2, #3
 8006788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800678c:	4b31      	ldr	r3, [pc, #196]	; (8006854 <USBD_SetConfig+0x118>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff f9f3 	bl	8005b7e <USBD_SetClassConfig>
 8006798:	4603      	mov	r3, r0
 800679a:	2b02      	cmp	r3, #2
 800679c:	d104      	bne.n	80067a8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f931 	bl	8006a08 <USBD_CtlError>
            return;
 80067a6:	e052      	b.n	800684e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f9f5 	bl	8006b98 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80067ae:	e04e      	b.n	800684e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f9f1 	bl	8006b98 <USBD_CtlSendStatus>
        break;
 80067b6:	e04a      	b.n	800684e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80067b8:	4b26      	ldr	r3, [pc, #152]	; (8006854 <USBD_SetConfig+0x118>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d112      	bne.n	80067e6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80067c8:	4b22      	ldr	r3, [pc, #136]	; (8006854 <USBD_SetConfig+0x118>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	461a      	mov	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80067d2:	4b20      	ldr	r3, [pc, #128]	; (8006854 <USBD_SetConfig+0x118>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff f9ef 	bl	8005bbc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f9da 	bl	8006b98 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80067e4:	e033      	b.n	800684e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80067e6:	4b1b      	ldr	r3, [pc, #108]	; (8006854 <USBD_SetConfig+0x118>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d01d      	beq.n	8006830 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff f9dd 	bl	8005bbc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006802:	4b14      	ldr	r3, [pc, #80]	; (8006854 <USBD_SetConfig+0x118>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800680c:	4b11      	ldr	r3, [pc, #68]	; (8006854 <USBD_SetConfig+0x118>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff f9b3 	bl	8005b7e <USBD_SetClassConfig>
 8006818:	4603      	mov	r3, r0
 800681a:	2b02      	cmp	r3, #2
 800681c:	d104      	bne.n	8006828 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f8f1 	bl	8006a08 <USBD_CtlError>
            return;
 8006826:	e012      	b.n	800684e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f9b5 	bl	8006b98 <USBD_CtlSendStatus>
        break;
 800682e:	e00e      	b.n	800684e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f9b1 	bl	8006b98 <USBD_CtlSendStatus>
        break;
 8006836:	e00a      	b.n	800684e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f8e4 	bl	8006a08 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006840:	4b04      	ldr	r3, [pc, #16]	; (8006854 <USBD_SetConfig+0x118>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff f9b8 	bl	8005bbc <USBD_ClrClassConfig>
        break;
 800684c:	bf00      	nop
    }
  }
}
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	200001a0 	.word	0x200001a0

08006858 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	88db      	ldrh	r3, [r3, #6]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d004      	beq.n	8006874 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f8cb 	bl	8006a08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006872:	e021      	b.n	80068b8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687a:	2b01      	cmp	r3, #1
 800687c:	db17      	blt.n	80068ae <USBD_GetConfig+0x56>
 800687e:	2b02      	cmp	r3, #2
 8006880:	dd02      	ble.n	8006888 <USBD_GetConfig+0x30>
 8006882:	2b03      	cmp	r3, #3
 8006884:	d00b      	beq.n	800689e <USBD_GetConfig+0x46>
 8006886:	e012      	b.n	80068ae <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3308      	adds	r3, #8
 8006892:	2201      	movs	r2, #1
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f920 	bl	8006adc <USBD_CtlSendData>
        break;
 800689c:	e00c      	b.n	80068b8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3304      	adds	r3, #4
 80068a2:	2201      	movs	r2, #1
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f918 	bl	8006adc <USBD_CtlSendData>
        break;
 80068ac:	e004      	b.n	80068b8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f8a9 	bl	8006a08 <USBD_CtlError>
        break;
 80068b6:	bf00      	nop
}
 80068b8:	bf00      	nop
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d0:	3b01      	subs	r3, #1
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d81e      	bhi.n	8006914 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	88db      	ldrh	r3, [r3, #6]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d004      	beq.n	80068e8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f891 	bl	8006a08 <USBD_CtlError>
        break;
 80068e6:	e01a      	b.n	800691e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d005      	beq.n	8006904 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f043 0202 	orr.w	r2, r3, #2
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	330c      	adds	r3, #12
 8006908:	2202      	movs	r2, #2
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f8e5 	bl	8006adc <USBD_CtlSendData>
      break;
 8006912:	e004      	b.n	800691e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f876 	bl	8006a08 <USBD_CtlError>
      break;
 800691c:	bf00      	nop
  }
}
 800691e:	bf00      	nop
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b082      	sub	sp, #8
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	885b      	ldrh	r3, [r3, #2]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d106      	bne.n	8006946 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f929 	bl	8006b98 <USBD_CtlSendStatus>
  }
}
 8006946:	bf00      	nop
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695e:	3b01      	subs	r3, #1
 8006960:	2b02      	cmp	r3, #2
 8006962:	d80b      	bhi.n	800697c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	885b      	ldrh	r3, [r3, #2]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d10c      	bne.n	8006986 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f90f 	bl	8006b98 <USBD_CtlSendStatus>
      }
      break;
 800697a:	e004      	b.n	8006986 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f842 	bl	8006a08 <USBD_CtlError>
      break;
 8006984:	e000      	b.n	8006988 <USBD_ClrFeature+0x3a>
      break;
 8006986:	bf00      	nop
  }
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781a      	ldrb	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	785a      	ldrb	r2, [r3, #1]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	3302      	adds	r3, #2
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	3303      	adds	r3, #3
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	021b      	lsls	r3, r3, #8
 80069bc:	b29b      	uxth	r3, r3
 80069be:	4413      	add	r3, r2
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	3304      	adds	r3, #4
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	3305      	adds	r3, #5
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	021b      	lsls	r3, r3, #8
 80069d8:	b29b      	uxth	r3, r3
 80069da:	4413      	add	r3, r2
 80069dc:	b29a      	uxth	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	3306      	adds	r3, #6
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	3307      	adds	r3, #7
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	4413      	add	r3, r2
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	80da      	strh	r2, [r3, #6]

}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006a12:	2180      	movs	r1, #128	; 0x80
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fc7b 	bl	8007310 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fc77 	bl	8007310 <USBD_LL_StallEP>
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b086      	sub	sp, #24
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d032      	beq.n	8006aa6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 f834 	bl	8006aae <USBD_GetLen>
 8006a46:	4603      	mov	r3, r0
 8006a48:	3301      	adds	r3, #1
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	75fa      	strb	r2, [r7, #23]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4413      	add	r3, r2
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	7812      	ldrb	r2, [r2, #0]
 8006a64:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	75fa      	strb	r2, [r7, #23]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4413      	add	r3, r2
 8006a72:	2203      	movs	r2, #3
 8006a74:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006a76:	e012      	b.n	8006a9e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	60fa      	str	r2, [r7, #12]
 8006a7e:	7dfa      	ldrb	r2, [r7, #23]
 8006a80:	1c51      	adds	r1, r2, #1
 8006a82:	75f9      	strb	r1, [r7, #23]
 8006a84:	4611      	mov	r1, r2
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	440a      	add	r2, r1
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	75fa      	strb	r2, [r7, #23]
 8006a94:	461a      	mov	r2, r3
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	4413      	add	r3, r2
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1e8      	bne.n	8006a78 <USBD_GetString+0x4e>
    }
  }
}
 8006aa6:	bf00      	nop
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006aba:	e005      	b.n	8006ac8 <USBD_GetLen+0x1a>
  {
    len++;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1f5      	bne.n	8006abc <USBD_GetLen+0xe>
  }

  return len;
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr

08006adc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2202      	movs	r2, #2
 8006aee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006af2:	88fa      	ldrh	r2, [r7, #6]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006af8:	88fa      	ldrh	r2, [r7, #6]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	2100      	movs	r1, #0
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 fc8c 	bl	8007422 <USBD_LL_Transmit>

  return USBD_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b22:	88fb      	ldrh	r3, [r7, #6]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	2100      	movs	r1, #0
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 fc7a 	bl	8007422 <USBD_LL_Transmit>

  return USBD_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4613      	mov	r3, r2
 8006b44:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2203      	movs	r2, #3
 8006b4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006b4e:	88fa      	ldrh	r2, [r7, #6]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006b56:	88fa      	ldrh	r2, [r7, #6]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b5e:	88fb      	ldrh	r3, [r7, #6]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	2100      	movs	r1, #0
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fc7f 	bl	8007468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b82:	88fb      	ldrh	r3, [r7, #6]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	2100      	movs	r1, #0
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 fc6d 	bl	8007468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2200      	movs	r2, #0
 8006bac:	2100      	movs	r1, #0
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fc37 	bl	8007422 <USBD_LL_Transmit>

  return USBD_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2205      	movs	r2, #5
 8006bca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fc47 	bl	8007468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006be8:	2200      	movs	r2, #0
 8006bea:	4912      	ldr	r1, [pc, #72]	; (8006c34 <MX_USB_DEVICE_Init+0x50>)
 8006bec:	4812      	ldr	r0, [pc, #72]	; (8006c38 <MX_USB_DEVICE_Init+0x54>)
 8006bee:	f7fe ff6c 	bl	8005aca <USBD_Init>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006bf8:	f7fa f82e 	bl	8000c58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006bfc:	490f      	ldr	r1, [pc, #60]	; (8006c3c <MX_USB_DEVICE_Init+0x58>)
 8006bfe:	480e      	ldr	r0, [pc, #56]	; (8006c38 <MX_USB_DEVICE_Init+0x54>)
 8006c00:	f7fe ff8e 	bl	8005b20 <USBD_RegisterClass>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006c0a:	f7fa f825 	bl	8000c58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006c0e:	490c      	ldr	r1, [pc, #48]	; (8006c40 <MX_USB_DEVICE_Init+0x5c>)
 8006c10:	4809      	ldr	r0, [pc, #36]	; (8006c38 <MX_USB_DEVICE_Init+0x54>)
 8006c12:	f7fe febf 	bl	8005994 <USBD_CDC_RegisterInterface>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006c1c:	f7fa f81c 	bl	8000c58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c20:	4805      	ldr	r0, [pc, #20]	; (8006c38 <MX_USB_DEVICE_Init+0x54>)
 8006c22:	f7fe ff96 	bl	8005b52 <USBD_Start>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006c2c:	f7fa f814 	bl	8000c58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c30:	bf00      	nop
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	2000012c 	.word	0x2000012c
 8006c38:	200007c8 	.word	0x200007c8
 8006c3c:	20000018 	.word	0x20000018
 8006c40:	2000011c 	.word	0x2000011c

08006c44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4905      	ldr	r1, [pc, #20]	; (8006c60 <CDC_Init_FS+0x1c>)
 8006c4c:	4805      	ldr	r0, [pc, #20]	; (8006c64 <CDC_Init_FS+0x20>)
 8006c4e:	f7fe feb7 	bl	80059c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006c52:	4905      	ldr	r1, [pc, #20]	; (8006c68 <CDC_Init_FS+0x24>)
 8006c54:	4803      	ldr	r0, [pc, #12]	; (8006c64 <CDC_Init_FS+0x20>)
 8006c56:	f7fe fecc 	bl	80059f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006c5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	20000e74 	.word	0x20000e74
 8006c64:	200007c8 	.word	0x200007c8
 8006c68:	20000a8c 	.word	0x20000a8c

08006c6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bc80      	pop	{r7}
 8006c78:	4770      	bx	lr
	...

08006c7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	4603      	mov	r3, r0
 8006c84:	6039      	str	r1, [r7, #0]
 8006c86:	71fb      	strb	r3, [r7, #7]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	2b23      	cmp	r3, #35	; 0x23
 8006c90:	d84a      	bhi.n	8006d28 <CDC_Control_FS+0xac>
 8006c92:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <CDC_Control_FS+0x1c>)
 8006c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c98:	08006d29 	.word	0x08006d29
 8006c9c:	08006d29 	.word	0x08006d29
 8006ca0:	08006d29 	.word	0x08006d29
 8006ca4:	08006d29 	.word	0x08006d29
 8006ca8:	08006d29 	.word	0x08006d29
 8006cac:	08006d29 	.word	0x08006d29
 8006cb0:	08006d29 	.word	0x08006d29
 8006cb4:	08006d29 	.word	0x08006d29
 8006cb8:	08006d29 	.word	0x08006d29
 8006cbc:	08006d29 	.word	0x08006d29
 8006cc0:	08006d29 	.word	0x08006d29
 8006cc4:	08006d29 	.word	0x08006d29
 8006cc8:	08006d29 	.word	0x08006d29
 8006ccc:	08006d29 	.word	0x08006d29
 8006cd0:	08006d29 	.word	0x08006d29
 8006cd4:	08006d29 	.word	0x08006d29
 8006cd8:	08006d29 	.word	0x08006d29
 8006cdc:	08006d29 	.word	0x08006d29
 8006ce0:	08006d29 	.word	0x08006d29
 8006ce4:	08006d29 	.word	0x08006d29
 8006ce8:	08006d29 	.word	0x08006d29
 8006cec:	08006d29 	.word	0x08006d29
 8006cf0:	08006d29 	.word	0x08006d29
 8006cf4:	08006d29 	.word	0x08006d29
 8006cf8:	08006d29 	.word	0x08006d29
 8006cfc:	08006d29 	.word	0x08006d29
 8006d00:	08006d29 	.word	0x08006d29
 8006d04:	08006d29 	.word	0x08006d29
 8006d08:	08006d29 	.word	0x08006d29
 8006d0c:	08006d29 	.word	0x08006d29
 8006d10:	08006d29 	.word	0x08006d29
 8006d14:	08006d29 	.word	0x08006d29
 8006d18:	08006d29 	.word	0x08006d29
 8006d1c:	08006d29 	.word	0x08006d29
 8006d20:	08006d29 	.word	0x08006d29
 8006d24:	08006d29 	.word	0x08006d29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006d28:	bf00      	nop
  }

  return (USBD_OK);
 8006d2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop

08006d38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(*Len>0)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01d      	beq.n	8006d86 <CDC_Receive_FS+0x4e>
		{
			uint32_t data_size=0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
			if(*Len>1023)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d56:	d303      	bcc.n	8006d60 <CDC_Receive_FS+0x28>
			{
				data_size=1023;
 8006d58:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	e002      	b.n	8006d66 <CDC_Receive_FS+0x2e>
			}
			else
			{
				data_size=*Len;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60fb      	str	r3, [r7, #12]
			}

			strncpy(rx_buff,(char*)Buf,data_size);
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	480d      	ldr	r0, [pc, #52]	; (8006da0 <CDC_Receive_FS+0x68>)
 8006d6c:	f000 fc2a 	bl	80075c4 <strncpy>

			rx_buff[data_size]=0;
 8006d70:	4a0b      	ldr	r2, [pc, #44]	; (8006da0 <CDC_Receive_FS+0x68>)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4413      	add	r3, r2
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]

			rx_ready=1;
 8006d7a:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <CDC_Receive_FS+0x6c>)
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	701a      	strb	r2, [r3, #0]
			rx_data_len=data_size;
 8006d80:	4a09      	ldr	r2, [pc, #36]	; (8006da8 <CDC_Receive_FS+0x70>)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6013      	str	r3, [r2, #0]
		}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	4808      	ldr	r0, [pc, #32]	; (8006dac <CDC_Receive_FS+0x74>)
 8006d8a:	f7fe fe32 	bl	80059f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006d8e:	4807      	ldr	r0, [pc, #28]	; (8006dac <CDC_Receive_FS+0x74>)
 8006d90:	f7fe fe71 	bl	8005a76 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006d94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	200003c4 	.word	0x200003c4
 8006da4:	20000198 	.word	0x20000198
 8006da8:	2000019c 	.word	0x2000019c
 8006dac:	200007c8 	.word	0x200007c8

08006db0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006dc0:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <CDC_Transmit_FS+0x48>)
 8006dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e00b      	b.n	8006dee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006dd6:	887b      	ldrh	r3, [r7, #2]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6879      	ldr	r1, [r7, #4]
 8006ddc:	4806      	ldr	r0, [pc, #24]	; (8006df8 <CDC_Transmit_FS+0x48>)
 8006dde:	f7fe fdef 	bl	80059c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006de2:	4805      	ldr	r0, [pc, #20]	; (8006df8 <CDC_Transmit_FS+0x48>)
 8006de4:	f7fe fe18 	bl	8005a18 <USBD_CDC_TransmitPacket>
 8006de8:	4603      	mov	r3, r0
 8006dea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	200007c8 	.word	0x200007c8

08006dfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	4603      	mov	r3, r0
 8006e04:	6039      	str	r1, [r7, #0]
 8006e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2212      	movs	r2, #18
 8006e0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e0e:	4b03      	ldr	r3, [pc, #12]	; (8006e1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bc80      	pop	{r7}
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	20000148 	.word	0x20000148

08006e20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	4603      	mov	r3, r0
 8006e28:	6039      	str	r1, [r7, #0]
 8006e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2204      	movs	r2, #4
 8006e30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e32:	4b03      	ldr	r3, [pc, #12]	; (8006e40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	2000015c 	.word	0x2000015c

08006e44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	6039      	str	r1, [r7, #0]
 8006e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d105      	bne.n	8006e62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	4907      	ldr	r1, [pc, #28]	; (8006e78 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e5a:	4808      	ldr	r0, [pc, #32]	; (8006e7c <USBD_FS_ProductStrDescriptor+0x38>)
 8006e5c:	f7ff fde5 	bl	8006a2a <USBD_GetString>
 8006e60:	e004      	b.n	8006e6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	4904      	ldr	r1, [pc, #16]	; (8006e78 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e66:	4805      	ldr	r0, [pc, #20]	; (8006e7c <USBD_FS_ProductStrDescriptor+0x38>)
 8006e68:	f7ff fddf 	bl	8006a2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e6c:	4b02      	ldr	r3, [pc, #8]	; (8006e78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	2000125c 	.word	0x2000125c
 8006e7c:	0800761c 	.word	0x0800761c

08006e80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	6039      	str	r1, [r7, #0]
 8006e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	4904      	ldr	r1, [pc, #16]	; (8006ea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e90:	4804      	ldr	r0, [pc, #16]	; (8006ea4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e92:	f7ff fdca 	bl	8006a2a <USBD_GetString>
  return USBD_StrDesc;
 8006e96:	4b02      	ldr	r3, [pc, #8]	; (8006ea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	2000125c 	.word	0x2000125c
 8006ea4:	08007634 	.word	0x08007634

08006ea8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	6039      	str	r1, [r7, #0]
 8006eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	221a      	movs	r2, #26
 8006eb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006eba:	f000 f843 	bl	8006f44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006ebe:	4b02      	ldr	r3, [pc, #8]	; (8006ec8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20000160 	.word	0x20000160

08006ecc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	6039      	str	r1, [r7, #0]
 8006ed6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d105      	bne.n	8006eea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	4907      	ldr	r1, [pc, #28]	; (8006f00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ee2:	4808      	ldr	r0, [pc, #32]	; (8006f04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ee4:	f7ff fda1 	bl	8006a2a <USBD_GetString>
 8006ee8:	e004      	b.n	8006ef4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	4904      	ldr	r1, [pc, #16]	; (8006f00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eee:	4805      	ldr	r0, [pc, #20]	; (8006f04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ef0:	f7ff fd9b 	bl	8006a2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ef4:	4b02      	ldr	r3, [pc, #8]	; (8006f00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	2000125c 	.word	0x2000125c
 8006f04:	08007640 	.word	0x08007640

08006f08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	6039      	str	r1, [r7, #0]
 8006f12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f14:	79fb      	ldrb	r3, [r7, #7]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d105      	bne.n	8006f26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	4907      	ldr	r1, [pc, #28]	; (8006f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f1e:	4808      	ldr	r0, [pc, #32]	; (8006f40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f20:	f7ff fd83 	bl	8006a2a <USBD_GetString>
 8006f24:	e004      	b.n	8006f30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	4904      	ldr	r1, [pc, #16]	; (8006f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f2a:	4805      	ldr	r0, [pc, #20]	; (8006f40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f2c:	f7ff fd7d 	bl	8006a2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f30:	4b02      	ldr	r3, [pc, #8]	; (8006f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	2000125c 	.word	0x2000125c
 8006f40:	0800764c 	.word	0x0800764c

08006f44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f4a:	4b0f      	ldr	r3, [pc, #60]	; (8006f88 <Get_SerialNum+0x44>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f50:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <Get_SerialNum+0x48>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f56:	4b0e      	ldr	r3, [pc, #56]	; (8006f90 <Get_SerialNum+0x4c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4413      	add	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d009      	beq.n	8006f7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f6a:	2208      	movs	r2, #8
 8006f6c:	4909      	ldr	r1, [pc, #36]	; (8006f94 <Get_SerialNum+0x50>)
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 f814 	bl	8006f9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f74:	2204      	movs	r2, #4
 8006f76:	4908      	ldr	r1, [pc, #32]	; (8006f98 <Get_SerialNum+0x54>)
 8006f78:	68b8      	ldr	r0, [r7, #8]
 8006f7a:	f000 f80f 	bl	8006f9c <IntToUnicode>
  }
}
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	1ffff7e8 	.word	0x1ffff7e8
 8006f8c:	1ffff7ec 	.word	0x1ffff7ec
 8006f90:	1ffff7f0 	.word	0x1ffff7f0
 8006f94:	20000162 	.word	0x20000162
 8006f98:	20000172 	.word	0x20000172

08006f9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006fae:	2300      	movs	r3, #0
 8006fb0:	75fb      	strb	r3, [r7, #23]
 8006fb2:	e027      	b.n	8007004 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	0f1b      	lsrs	r3, r3, #28
 8006fb8:	2b09      	cmp	r3, #9
 8006fba:	d80b      	bhi.n	8006fd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	0f1b      	lsrs	r3, r3, #28
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	440b      	add	r3, r1
 8006fcc:	3230      	adds	r2, #48	; 0x30
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	e00a      	b.n	8006fea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	0f1b      	lsrs	r3, r3, #28
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	4619      	mov	r1, r3
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	440b      	add	r3, r1
 8006fe4:	3237      	adds	r2, #55	; 0x37
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	011b      	lsls	r3, r3, #4
 8006fee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	3301      	adds	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
 8007004:	7dfa      	ldrb	r2, [r7, #23]
 8007006:	79fb      	ldrb	r3, [r7, #7]
 8007008:	429a      	cmp	r2, r3
 800700a:	d3d3      	bcc.n	8006fb4 <IntToUnicode+0x18>
  }
}
 800700c:	bf00      	nop
 800700e:	371c      	adds	r7, #28
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr
	...

08007018 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a0d      	ldr	r2, [pc, #52]	; (800705c <HAL_PCD_MspInit+0x44>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d113      	bne.n	8007052 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800702a:	4b0d      	ldr	r3, [pc, #52]	; (8007060 <HAL_PCD_MspInit+0x48>)
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	4a0c      	ldr	r2, [pc, #48]	; (8007060 <HAL_PCD_MspInit+0x48>)
 8007030:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007034:	61d3      	str	r3, [r2, #28]
 8007036:	4b0a      	ldr	r3, [pc, #40]	; (8007060 <HAL_PCD_MspInit+0x48>)
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007042:	2200      	movs	r2, #0
 8007044:	2100      	movs	r1, #0
 8007046:	2014      	movs	r0, #20
 8007048:	f7f9 ffd7 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800704c:	2014      	movs	r0, #20
 800704e:	f7f9 fff0 	bl	8001032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	40005c00 	.word	0x40005c00
 8007060:	40021000 	.word	0x40021000

08007064 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007078:	4619      	mov	r1, r3
 800707a:	4610      	mov	r0, r2
 800707c:	f7fe fdb1 	bl	8005be2 <USBD_LL_SetupStage>
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	460b      	mov	r3, r1
 8007092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800709a:	78fa      	ldrb	r2, [r7, #3]
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	00db      	lsls	r3, r3, #3
 80070a6:	440b      	add	r3, r1
 80070a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	78fb      	ldrb	r3, [r7, #3]
 80070b0:	4619      	mov	r1, r3
 80070b2:	f7fe fde1 	bl	8005c78 <USBD_LL_DataOutStage>
}
 80070b6:	bf00      	nop
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	460b      	mov	r3, r1
 80070c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80070d0:	78fa      	ldrb	r2, [r7, #3]
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	4613      	mov	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	440b      	add	r3, r1
 80070de:	333c      	adds	r3, #60	; 0x3c
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	78fb      	ldrb	r3, [r7, #3]
 80070e4:	4619      	mov	r1, r3
 80070e6:	f7fe fe38 	bl	8005d5a <USBD_LL_DataInStage>
}
 80070ea:	bf00      	nop
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe ff48 	bl	8005f96 <USBD_LL_SOF>
}
 8007106:	bf00      	nop
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007116:	2301      	movs	r3, #1
 8007118:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	2b02      	cmp	r3, #2
 8007120:	d001      	beq.n	8007126 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007122:	f7f9 fd99 	bl	8000c58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800712c:	7bfa      	ldrb	r2, [r7, #15]
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe fef8 	bl	8005f26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe feb1 	bl	8005ea4 <USBD_LL_Reset>
}
 8007142:	bf00      	nop
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fef2 	bl	8005f44 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d005      	beq.n	8007174 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007168:	4b04      	ldr	r3, [pc, #16]	; (800717c <HAL_PCD_SuspendCallback+0x30>)
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	4a03      	ldr	r2, [pc, #12]	; (800717c <HAL_PCD_SuspendCallback+0x30>)
 800716e:	f043 0306 	orr.w	r3, r3, #6
 8007172:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007174:	bf00      	nop
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	e000ed00 	.word	0xe000ed00

08007180 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800718e:	4618      	mov	r0, r3
 8007190:	f7fe feec 	bl	8005f6c <USBD_LL_Resume>
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80071a4:	4a28      	ldr	r2, [pc, #160]	; (8007248 <USBD_LL_Init+0xac>)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a26      	ldr	r2, [pc, #152]	; (8007248 <USBD_LL_Init+0xac>)
 80071b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80071b4:	4b24      	ldr	r3, [pc, #144]	; (8007248 <USBD_LL_Init+0xac>)
 80071b6:	4a25      	ldr	r2, [pc, #148]	; (800724c <USBD_LL_Init+0xb0>)
 80071b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80071ba:	4b23      	ldr	r3, [pc, #140]	; (8007248 <USBD_LL_Init+0xac>)
 80071bc:	2208      	movs	r2, #8
 80071be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80071c0:	4b21      	ldr	r3, [pc, #132]	; (8007248 <USBD_LL_Init+0xac>)
 80071c2:	2202      	movs	r2, #2
 80071c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80071c6:	4b20      	ldr	r3, [pc, #128]	; (8007248 <USBD_LL_Init+0xac>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80071cc:	4b1e      	ldr	r3, [pc, #120]	; (8007248 <USBD_LL_Init+0xac>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80071d2:	4b1d      	ldr	r3, [pc, #116]	; (8007248 <USBD_LL_Init+0xac>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80071d8:	481b      	ldr	r0, [pc, #108]	; (8007248 <USBD_LL_Init+0xac>)
 80071da:	f7fa f8ce 	bl	800137a <HAL_PCD_Init>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80071e4:	f7f9 fd38 	bl	8000c58 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071ee:	2318      	movs	r3, #24
 80071f0:	2200      	movs	r2, #0
 80071f2:	2100      	movs	r1, #0
 80071f4:	f7fb fc02 	bl	80029fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071fe:	2358      	movs	r3, #88	; 0x58
 8007200:	2200      	movs	r2, #0
 8007202:	2180      	movs	r1, #128	; 0x80
 8007204:	f7fb fbfa 	bl	80029fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800720e:	23c0      	movs	r3, #192	; 0xc0
 8007210:	2200      	movs	r2, #0
 8007212:	2181      	movs	r1, #129	; 0x81
 8007214:	f7fb fbf2 	bl	80029fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800721e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007222:	2200      	movs	r2, #0
 8007224:	2101      	movs	r1, #1
 8007226:	f7fb fbe9 	bl	80029fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007234:	2200      	movs	r2, #0
 8007236:	2182      	movs	r1, #130	; 0x82
 8007238:	f7fb fbe0 	bl	80029fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	2000145c 	.word	0x2000145c
 800724c:	40005c00 	.word	0x40005c00

08007250 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007266:	4618      	mov	r0, r3
 8007268:	f7fa f992 	bl	8001590 <HAL_PCD_Start>
 800726c:	4603      	mov	r3, r0
 800726e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	4618      	mov	r0, r3
 8007274:	f000 f94e 	bl	8007514 <USBD_Get_USB_Status>
 8007278:	4603      	mov	r3, r0
 800727a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800727c:	7bbb      	ldrb	r3, [r7, #14]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	4608      	mov	r0, r1
 8007290:	4611      	mov	r1, r2
 8007292:	461a      	mov	r2, r3
 8007294:	4603      	mov	r3, r0
 8007296:	70fb      	strb	r3, [r7, #3]
 8007298:	460b      	mov	r3, r1
 800729a:	70bb      	strb	r3, [r7, #2]
 800729c:	4613      	mov	r3, r2
 800729e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80072ae:	78bb      	ldrb	r3, [r7, #2]
 80072b0:	883a      	ldrh	r2, [r7, #0]
 80072b2:	78f9      	ldrb	r1, [r7, #3]
 80072b4:	f7fa fb0c 	bl	80018d0 <HAL_PCD_EP_Open>
 80072b8:	4603      	mov	r3, r0
 80072ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 f928 	bl	8007514 <USBD_Get_USB_Status>
 80072c4:	4603      	mov	r3, r0
 80072c6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	460b      	mov	r3, r1
 80072dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072ec:	78fa      	ldrb	r2, [r7, #3]
 80072ee:	4611      	mov	r1, r2
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fa fb53 	bl	800199c <HAL_PCD_EP_Close>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 f909 	bl	8007514 <USBD_Get_USB_Status>
 8007302:	4603      	mov	r3, r0
 8007304:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007306:	7bbb      	ldrb	r3, [r7, #14]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800732a:	78fa      	ldrb	r2, [r7, #3]
 800732c:	4611      	mov	r1, r2
 800732e:	4618      	mov	r0, r3
 8007330:	f7fa fc13 	bl	8001b5a <HAL_PCD_EP_SetStall>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 f8ea 	bl	8007514 <USBD_Get_USB_Status>
 8007340:	4603      	mov	r3, r0
 8007342:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007344:	7bbb      	ldrb	r3, [r7, #14]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	460b      	mov	r3, r1
 8007358:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007368:	78fa      	ldrb	r2, [r7, #3]
 800736a:	4611      	mov	r1, r2
 800736c:	4618      	mov	r0, r3
 800736e:	f7fa fc54 	bl	8001c1a <HAL_PCD_EP_ClrStall>
 8007372:	4603      	mov	r3, r0
 8007374:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	4618      	mov	r0, r3
 800737a:	f000 f8cb 	bl	8007514 <USBD_Get_USB_Status>
 800737e:	4603      	mov	r3, r0
 8007380:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8007382:	7bbb      	ldrb	r3, [r7, #14]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	460b      	mov	r3, r1
 8007396:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800739e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80073a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	da0c      	bge.n	80073c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	440b      	add	r3, r1
 80073bc:	3302      	adds	r3, #2
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	e00b      	b.n	80073da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80073c2:	78fb      	ldrb	r3, [r7, #3]
 80073c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073c8:	68f9      	ldr	r1, [r7, #12]
 80073ca:	4613      	mov	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	440b      	add	r3, r1
 80073d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80073d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	bc80      	pop	{r7}
 80073e2:	4770      	bx	lr

080073e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073fe:	78fa      	ldrb	r2, [r7, #3]
 8007400:	4611      	mov	r1, r2
 8007402:	4618      	mov	r0, r3
 8007404:	f7fa fa3f 	bl	8001886 <HAL_PCD_SetAddress>
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	4618      	mov	r0, r3
 8007410:	f000 f880 	bl	8007514 <USBD_Get_USB_Status>
 8007414:	4603      	mov	r3, r0
 8007416:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007418:	7bbb      	ldrb	r3, [r7, #14]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b086      	sub	sp, #24
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	461a      	mov	r2, r3
 800742e:	460b      	mov	r3, r1
 8007430:	72fb      	strb	r3, [r7, #11]
 8007432:	4613      	mov	r3, r2
 8007434:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007444:	893b      	ldrh	r3, [r7, #8]
 8007446:	7af9      	ldrb	r1, [r7, #11]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	f7fa fb43 	bl	8001ad4 <HAL_PCD_EP_Transmit>
 800744e:	4603      	mov	r3, r0
 8007450:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f85d 	bl	8007514 <USBD_Get_USB_Status>
 800745a:	4603      	mov	r3, r0
 800745c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800745e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	607a      	str	r2, [r7, #4]
 8007472:	461a      	mov	r2, r3
 8007474:	460b      	mov	r3, r1
 8007476:	72fb      	strb	r3, [r7, #11]
 8007478:	4613      	mov	r3, r2
 800747a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800748a:	893b      	ldrh	r3, [r7, #8]
 800748c:	7af9      	ldrb	r1, [r7, #11]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	f7fa facc 	bl	8001a2c <HAL_PCD_EP_Receive>
 8007494:	4603      	mov	r3, r0
 8007496:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007498:	7dfb      	ldrb	r3, [r7, #23]
 800749a:	4618      	mov	r0, r3
 800749c:	f000 f83a 	bl	8007514 <USBD_Get_USB_Status>
 80074a0:	4603      	mov	r3, r0
 80074a2:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80074a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	460b      	mov	r3, r1
 80074b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074c0:	78fa      	ldrb	r2, [r7, #3]
 80074c2:	4611      	mov	r1, r2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fa faee 	bl	8001aa6 <HAL_PCD_EP_GetRxCount>
 80074ca:	4603      	mov	r3, r0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80074dc:	4b02      	ldr	r3, [pc, #8]	; (80074e8 <USBD_static_malloc+0x14>)
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr
 80074e8:	200001a4 	.word	0x200001a4

080074ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]

}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bc80      	pop	{r7}
 80074fc:	4770      	bx	lr

080074fe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	460b      	mov	r3, r1
 8007508:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr

08007514 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007522:	79fb      	ldrb	r3, [r7, #7]
 8007524:	2b03      	cmp	r3, #3
 8007526:	d817      	bhi.n	8007558 <USBD_Get_USB_Status+0x44>
 8007528:	a201      	add	r2, pc, #4	; (adr r2, 8007530 <USBD_Get_USB_Status+0x1c>)
 800752a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752e:	bf00      	nop
 8007530:	08007541 	.word	0x08007541
 8007534:	08007547 	.word	0x08007547
 8007538:	0800754d 	.word	0x0800754d
 800753c:	08007553 	.word	0x08007553
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	73fb      	strb	r3, [r7, #15]
    break;
 8007544:	e00b      	b.n	800755e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007546:	2302      	movs	r3, #2
 8007548:	73fb      	strb	r3, [r7, #15]
    break;
 800754a:	e008      	b.n	800755e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800754c:	2301      	movs	r3, #1
 800754e:	73fb      	strb	r3, [r7, #15]
    break;
 8007550:	e005      	b.n	800755e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007552:	2302      	movs	r3, #2
 8007554:	73fb      	strb	r3, [r7, #15]
    break;
 8007556:	e002      	b.n	800755e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007558:	2302      	movs	r3, #2
 800755a:	73fb      	strb	r3, [r7, #15]
    break;
 800755c:	bf00      	nop
  }
  return usb_status;
 800755e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	bc80      	pop	{r7}
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop

0800756c <__libc_init_array>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	2500      	movs	r5, #0
 8007570:	4e0c      	ldr	r6, [pc, #48]	; (80075a4 <__libc_init_array+0x38>)
 8007572:	4c0d      	ldr	r4, [pc, #52]	; (80075a8 <__libc_init_array+0x3c>)
 8007574:	1ba4      	subs	r4, r4, r6
 8007576:	10a4      	asrs	r4, r4, #2
 8007578:	42a5      	cmp	r5, r4
 800757a:	d109      	bne.n	8007590 <__libc_init_array+0x24>
 800757c:	f000 f838 	bl	80075f0 <_init>
 8007580:	2500      	movs	r5, #0
 8007582:	4e0a      	ldr	r6, [pc, #40]	; (80075ac <__libc_init_array+0x40>)
 8007584:	4c0a      	ldr	r4, [pc, #40]	; (80075b0 <__libc_init_array+0x44>)
 8007586:	1ba4      	subs	r4, r4, r6
 8007588:	10a4      	asrs	r4, r4, #2
 800758a:	42a5      	cmp	r5, r4
 800758c:	d105      	bne.n	800759a <__libc_init_array+0x2e>
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007594:	4798      	blx	r3
 8007596:	3501      	adds	r5, #1
 8007598:	e7ee      	b.n	8007578 <__libc_init_array+0xc>
 800759a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800759e:	4798      	blx	r3
 80075a0:	3501      	adds	r5, #1
 80075a2:	e7f2      	b.n	800758a <__libc_init_array+0x1e>
 80075a4:	0800766c 	.word	0x0800766c
 80075a8:	0800766c 	.word	0x0800766c
 80075ac:	0800766c 	.word	0x0800766c
 80075b0:	08007670 	.word	0x08007670

080075b4 <memset>:
 80075b4:	4603      	mov	r3, r0
 80075b6:	4402      	add	r2, r0
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d100      	bne.n	80075be <memset+0xa>
 80075bc:	4770      	bx	lr
 80075be:	f803 1b01 	strb.w	r1, [r3], #1
 80075c2:	e7f9      	b.n	80075b8 <memset+0x4>

080075c4 <strncpy>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	4604      	mov	r4, r0
 80075c8:	3901      	subs	r1, #1
 80075ca:	b902      	cbnz	r2, 80075ce <strncpy+0xa>
 80075cc:	bd70      	pop	{r4, r5, r6, pc}
 80075ce:	4623      	mov	r3, r4
 80075d0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80075d4:	1e56      	subs	r6, r2, #1
 80075d6:	f803 5b01 	strb.w	r5, [r3], #1
 80075da:	b92d      	cbnz	r5, 80075e8 <strncpy+0x24>
 80075dc:	4414      	add	r4, r2
 80075de:	42a3      	cmp	r3, r4
 80075e0:	d0f4      	beq.n	80075cc <strncpy+0x8>
 80075e2:	f803 5b01 	strb.w	r5, [r3], #1
 80075e6:	e7fa      	b.n	80075de <strncpy+0x1a>
 80075e8:	461c      	mov	r4, r3
 80075ea:	4632      	mov	r2, r6
 80075ec:	e7ed      	b.n	80075ca <strncpy+0x6>
	...

080075f0 <_init>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr

080075fc <_fini>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr
